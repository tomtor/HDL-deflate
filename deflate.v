// File: deflate.v
// Generated by MyHDL 0.10
// Date: Tue Dec 18 13:48:09 2018


`timescale 1ns/10ps

module deflate (
    i_mode,
    o_done,
    i_data,
    o_iprogress,
    o_oprogress,
    o_byte,
    i_addr,
    clk,
    reset
);
// Deflate (de)compress
// 
// Ports:

input [2:0] i_mode;
output o_done;
reg o_done;
input [7:0] i_data;
output [12:0] o_iprogress;
reg [12:0] o_iprogress;
output [12:0] o_oprogress;
reg [12:0] o_oprogress;
output [7:0] o_byte;
reg [7:0] o_byte;
input [12:0] i_addr;
input clk;
input reset;

reg [9:0] step;
reg static;
reg [4:0] state;
reg [8:0] spread_i;
reg [9:0] spread;
reg [14:0] reverse;
reg [7:0] orbyte;
reg [12:0] oraddr;
reg [12:0] old_di;
reg [12:0] offset;
reg ocopy;
reg [7:0] obyte;
reg [7:0] ob1;
reg [12:0] oaddr;
reg [8:0] numLiterals;
reg [5:0] numDistance;
reg [8:0] numCodeLength;
reg [2:0] nb;
reg [4:0] minBits;
reg [2:0] method;
reg [4:0] maxBits;
reg [12:0] length;
reg [23:0] leaf;
reg [14:0] lastToken;
reg [15:0] ladler1;
reg [12:0] isize;
reg [9:0] instantMaxBit;
reg [14:0] instantMask;
reg [8:0] howOften;
reg flush;
reg final;
reg filled;
reg [2:0] doo;
reg do_compress;
reg [12:0] do;
reg [2:0] dio;
reg [12:0] di;
reg [4:0] d_maxBits;
reg [9:0] d_instantMaxBit;
reg [14:0] d_instantMask;
reg [8:0] cur_static;
reg signed [7:0] cur_search;
reg [4:0] cur_next;
reg [12:0] cur_i;
reg signed [7:0] cur_dist;
reg [12:0] cur_cstatic;
reg [9:0] cur_HF1;
reg [14:0] code;
reg [8:0] b_numCodeLength;
wire [31:0] b41;
reg [7:0] b4;
reg [7:0] b3;
reg [7:0] b2;
reg [7:0] b1;
reg [15:0] adler2;
reg [15:0] adler1;
reg HF4_init;
reg [7:0] oram [0:8192-1];
reg [14:0] nextCode [0:15-1];
reg [23:0] leaves [0:512-1];
reg [7:0] iram [0:128-1];
reg [3:0] distanceLength [0:32-1];
reg [23:0] d_leaves [0:128-1];
reg [8:0] code_bits [0:288-1];
reg [3:0] codeLength [0:290-1];
reg [8:0] bitLengthCount [0:16-1];

assign b41[32-1:24] = b4;
assign b41[24-1:16] = b3;
assign b41[16-1:8] = b2;
assign b41[8-1:0] = b1;

task MYHDL3_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL82_RETURN
    nshift = ((dio + width) >>> 3);
    o_iprogress <= di;
    dio <= ((dio + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

task MYHDL4_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL83_RETURN
    nshift = ((dio + width) >>> 3);
    o_iprogress <= di;
    dio <= ((dio + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

function integer MYHDL5_get4;
    input boffset;
    input width;
begin: MYHDL84_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL5_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL84_RETURN;
end
endfunction

function integer MYHDL6_get4;
    input boffset;
    input width;
    integer width;
begin: MYHDL85_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL6_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL85_RETURN;
end
endfunction

task MYHDL7_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL86_RETURN
    nshift = ((dio + width) >>> 3);
    o_iprogress <= di;
    dio <= ((dio + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

task MYHDL8_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL87_RETURN
    nshift = ((dio + width) >>> 3);
    o_iprogress <= di;
    dio <= ((dio + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

function integer MYHDL9_get4;
    input boffset;
    integer boffset;
    input width;
    integer width;
begin: MYHDL88_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL9_get4 = ($signed($signed({1'b0, b41}) >>> ($signed({1'b0, dio}) + boffset)) & ((1 << width) - 1));
    disable MYHDL88_RETURN;
end
endfunction

task MYHDL10_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL89_RETURN
    nshift = $signed(($signed({1'b0, dio}) + width) >>> 3);
    o_iprogress <= di;
    dio <= (($signed({1'b0, dio}) + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

function integer MYHDL11_put;
    input d;
    integer d;
    input width;
    integer width;
begin: MYHDL90_RETURN
    if ((width > 9)) begin
        $finish;
    end
    if (($signed({1'b0, d}) > ((1 << width) - 1))) begin
        $finish;
    end
    MYHDL11_put = ((ob1 | (d << doo)) & 255);
    disable MYHDL90_RETURN;
end
endfunction

task MYHDL12_put_adv;
    input d;
    integer d;
    input width;
    integer width;
    reg pshift;
    integer carry;
    integer doo_next;
begin: MYHDL91_RETURN
    if ((width > 9)) begin
        $finish;
    end
    if (($signed({1'b0, d}) > ((1 << width) - 1))) begin
        $finish;
    end
    pshift = ((doo + width) > 8);
    if (pshift) begin
        carry = ($signed({1'b0, width}) - (8 - $signed({1'b0, doo})));
        ob1 <= $signed($signed({1'b0, d}) >>> ($signed({1'b0, width}) - carry));
    end
    else begin
        ob1 <= (ob1 | (d << doo));
    end
    do <= (do + pshift);
    o_oprogress <= (do + pshift);
    doo_next = ((doo + width) & 7);
    if ((doo_next == 0)) begin
        flush <= 1'b1;
    end
    doo <= doo_next;
end
endtask

task MYHDL13_do_flush;
begin: MYHDL92_RETURN
    flush <= 1'b0;
    ob1 <= 0;
    o_oprogress <= (do + 1);
    do <= (do + 1);
end
endtask

function integer MYHDL14_put;
    input [9-1:0] d;
    input [4-1:0] width;
begin: MYHDL93_RETURN
    if ((width > 9)) begin
        $finish;
    end
    if (($signed({1'b0, d}) > ((1 << width) - 1))) begin
        $finish;
    end
    MYHDL14_put = ((ob1 | (d << doo)) & 255);
    disable MYHDL93_RETURN;
end
endfunction

task MYHDL15_put_adv;
    input [9-1:0] d;
    input [4-1:0] width;
    reg pshift;
    integer carry;
    integer doo_next;
begin: MYHDL94_RETURN
    if ((width > 9)) begin
        $finish;
    end
    if (($signed({1'b0, d}) > ((1 << width) - 1))) begin
        $finish;
    end
    pshift = ((doo + width) > 8);
    if (pshift) begin
        carry = ($signed({1'b0, width}) - (8 - $signed({1'b0, doo})));
        ob1 <= $signed($signed({1'b0, d}) >>> ($signed({1'b0, width}) - carry));
    end
    else begin
        ob1 <= (ob1 | (d << doo));
    end
    do <= (do + pshift);
    o_oprogress <= (do + pshift);
    doo_next = ((doo + width) & 7);
    if ((doo_next == 0)) begin
        flush <= 1'b1;
    end
    doo <= doo_next;
end
endtask

task MYHDL16_do_flush;
begin: MYHDL95_RETURN
    flush <= 1'b0;
    ob1 <= 0;
    o_oprogress <= (do + 1);
    do <= (do + 1);
end
endtask

function integer MYHDL17_rev_bits;
    input [13-1:0] b;
    input nb;
    integer nb;
    integer r;
begin: MYHDL96_RETURN
    if ((b >= (1 << nb))) begin
        $finish;
        $write("too few bits");
        $write("\n");
    end
    r = (((((((((((((((((b >>> 14) & 1) << 0) | (((b >>> 13) & 1) << 1)) | (((b >>> 12) & 1) << 2)) | (((b >>> 11) & 1) << 3)) | (((b >>> 10) & 1) << 4)) | (((b >>> 9) & 1) << 5)) | (((b >>> 8) & 1) << 6)) | (((b >>> 7) & 1) << 7)) | (((b >>> 6) & 1) << 8)) | (((b >>> 5) & 1) << 9)) | (((b >>> 4) & 1) << 10)) | (((b >>> 3) & 1) << 11)) | (((b >>> 2) & 1) << 12)) | (((b >>> 1) & 1) << 13)) | (((b >>> 0) & 1) << 14));
    r = r >>> (15 - $signed({1'b0, nb}));
    MYHDL17_rev_bits = r;
    disable MYHDL96_RETURN;
end
endfunction

function integer MYHDL18_put;
    input d;
    integer d;
    input width;
    integer width;
begin: MYHDL97_RETURN
    if ((width > 9)) begin
        $finish;
    end
    if ((d > ((1 << width) - 1))) begin
        $finish;
    end
    MYHDL18_put = (($signed({1'b0, ob1}) | (d << $signed({1'b0, doo}))) & 255);
    disable MYHDL97_RETURN;
end
endfunction

task MYHDL19_put_adv;
    input d;
    integer d;
    input width;
    integer width;
    reg pshift;
    integer carry;
    integer doo_next;
begin: MYHDL98_RETURN
    if ((width > 9)) begin
        $finish;
    end
    if ((d > ((1 << width) - 1))) begin
        $finish;
    end
    pshift = (($signed({1'b0, doo}) + width) > 8);
    if (pshift) begin
        carry = (width - (8 - $signed({1'b0, doo})));
        ob1 <= $signed(d >>> (width - carry));
    end
    else begin
        ob1 <= ($signed({1'b0, ob1}) | (d << $signed({1'b0, doo})));
    end
    do <= (do + pshift);
    o_oprogress <= (do + pshift);
    doo_next = (($signed({1'b0, doo}) + width) & 7);
    if ((doo_next == 0)) begin
        flush <= 1'b1;
    end
    doo <= doo_next;
end
endtask

function integer MYHDL20_put;
    input [9-1:0] d;
    input [4-1:0] width;
begin: MYHDL99_RETURN
    if ((width > 9)) begin
        $finish;
    end
    if (($signed({1'b0, d}) > ((1 << width) - 1))) begin
        $finish;
    end
    MYHDL20_put = ((ob1 | (d << doo)) & 255);
    disable MYHDL99_RETURN;
end
endfunction

task MYHDL21_put_adv;
    input [9-1:0] d;
    input [4-1:0] width;
    reg pshift;
    integer carry;
    integer doo_next;
begin: MYHDL100_RETURN
    if ((width > 9)) begin
        $finish;
    end
    if (($signed({1'b0, d}) > ((1 << width) - 1))) begin
        $finish;
    end
    pshift = ((doo + width) > 8);
    if (pshift) begin
        carry = ($signed({1'b0, width}) - (8 - $signed({1'b0, doo})));
        ob1 <= $signed($signed({1'b0, d}) >>> ($signed({1'b0, width}) - carry));
    end
    else begin
        ob1 <= (ob1 | (d << doo));
    end
    do <= (do + pshift);
    o_oprogress <= (do + pshift);
    doo_next = ((doo + width) & 7);
    if ((doo_next == 0)) begin
        flush <= 1'b1;
    end
    doo <= doo_next;
end
endtask

task MYHDL22_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL101_RETURN
    nshift = $signed(($signed({1'b0, dio}) + width) >>> 3);
    o_iprogress <= di;
    dio <= (($signed({1'b0, dio}) + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

task MYHDL23_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL102_RETURN
    nshift = ((dio + width) >>> 3);
    o_iprogress <= di;
    dio <= ((dio + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

function integer MYHDL24_put;
    input [9-1:0] d;
    input [4-1:0] width;
begin: MYHDL103_RETURN
    if ((width > 9)) begin
        $finish;
    end
    if (($signed({1'b0, d}) > ((1 << width) - 1))) begin
        $finish;
    end
    MYHDL24_put = ((ob1 | (d << doo)) & 255);
    disable MYHDL103_RETURN;
end
endfunction

task MYHDL25_put_adv;
    input [9-1:0] d;
    input [4-1:0] width;
    reg pshift;
    integer carry;
    integer doo_next;
begin: MYHDL104_RETURN
    if ((width > 9)) begin
        $finish;
    end
    if (($signed({1'b0, d}) > ((1 << width) - 1))) begin
        $finish;
    end
    pshift = ((doo + width) > 8);
    if (pshift) begin
        carry = ($signed({1'b0, width}) - (8 - $signed({1'b0, doo})));
        ob1 <= $signed($signed({1'b0, d}) >>> ($signed({1'b0, width}) - carry));
    end
    else begin
        ob1 <= (ob1 | (d << doo));
    end
    do <= (do + pshift);
    o_oprogress <= (do + pshift);
    doo_next = ((doo + width) & 7);
    if ((doo_next == 0)) begin
        flush <= 1'b1;
    end
    doo <= doo_next;
end
endtask

function integer MYHDL34_get4;
    input boffset;
    input width;
    integer width;
begin: MYHDL105_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL34_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL105_RETURN;
end
endfunction

function integer MYHDL35_get4;
    input boffset;
    input width;
    integer width;
begin: MYHDL106_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL35_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL106_RETURN;
end
endfunction

function integer MYHDL36_get4;
    input boffset;
    integer boffset;
    input width;
    integer width;
begin: MYHDL107_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL36_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL107_RETURN;
end
endfunction

function integer MYHDL37_get4;
    input boffset;
    integer boffset;
    input width;
    integer width;
begin: MYHDL108_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL37_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL108_RETURN;
end
endfunction

function integer MYHDL38_get4;
    input boffset;
    integer boffset;
    input width;
    integer width;
begin: MYHDL109_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL38_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL109_RETURN;
end
endfunction

function integer MYHDL39_get4;
    input boffset;
    integer boffset;
    input width;
    integer width;
begin: MYHDL110_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL39_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL110_RETURN;
end
endfunction

task MYHDL40_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL111_RETURN
    nshift = ((dio + width) >>> 3);
    o_iprogress <= di;
    dio <= ((dio + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

function integer MYHDL41_get4;
    input boffset;
    input width;
    integer width;
begin: MYHDL112_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL41_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL112_RETURN;
end
endfunction

task MYHDL42_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL113_RETURN
    nshift = ((dio + width) >>> 3);
    o_iprogress <= di;
    dio <= ((dio + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

function integer MYHDL43_get4;
    input boffset;
    input width;
    integer width;
begin: MYHDL114_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL43_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL114_RETURN;
end
endfunction

function integer MYHDL44_get4;
    input boffset;
    input width;
    integer width;
begin: MYHDL115_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL44_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL115_RETURN;
end
endfunction

function integer MYHDL45_get4;
    input boffset;
    input width;
    integer width;
begin: MYHDL116_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL45_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL116_RETURN;
end
endfunction

task MYHDL46_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL117_RETURN
    nshift = $signed(($signed({1'b0, dio}) + width) >>> 3);
    o_iprogress <= di;
    dio <= (($signed({1'b0, dio}) + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

function integer MYHDL53_rev_bits;
    input [15-1:0] b;
    input [4-1:0] nb;
    integer r;
begin: MYHDL118_RETURN
    if ((b >= (1 << nb))) begin
        $finish;
        $write("too few bits");
        $write("\n");
    end
    r = (((((((((((((((((b >>> 14) & 1) << 0) | (((b >>> 13) & 1) << 1)) | (((b >>> 12) & 1) << 2)) | (((b >>> 11) & 1) << 3)) | (((b >>> 10) & 1) << 4)) | (((b >>> 9) & 1) << 5)) | (((b >>> 8) & 1) << 6)) | (((b >>> 7) & 1) << 7)) | (((b >>> 6) & 1) << 8)) | (((b >>> 5) & 1) << 9)) | (((b >>> 4) & 1) << 10)) | (((b >>> 3) & 1) << 11)) | (((b >>> 2) & 1) << 12)) | (((b >>> 1) & 1) << 13)) | (((b >>> 0) & 1) << 14));
    r = r >>> (15 - $signed({1'b0, nb}));
    MYHDL53_rev_bits = r;
    disable MYHDL118_RETURN;
end
endfunction

function integer MYHDL54_makeLeaf;
    input [9-1:0] lcode;
    input [4-1:0] lbits;
begin: MYHDL119_RETURN
    if ((lcode >= (1 << 15))) begin
        $finish;
    end
    if ((lbits >= (1 << 9))) begin
        $finish;
    end
    MYHDL54_makeLeaf = ((lcode << 9) | lbits);
    disable MYHDL119_RETURN;
end
endfunction

function integer MYHDL55_makeLeaf;
    input [9-1:0] lcode;
    input [4-1:0] lbits;
begin: MYHDL120_RETURN
    if ((lcode >= (1 << 15))) begin
        $finish;
    end
    if ((lbits >= (1 << 9))) begin
        $finish;
    end
    MYHDL55_makeLeaf = ((lcode << 9) | lbits);
    disable MYHDL120_RETURN;
end
endfunction

function integer MYHDL56_makeLeaf;
    input [9-1:0] lcode;
    input [4-1:0] lbits;
begin: MYHDL121_RETURN
    if ((lcode >= (1 << 15))) begin
        $finish;
    end
    if ((lbits >= (1 << 9))) begin
        $finish;
    end
    MYHDL56_makeLeaf = ((lcode << 9) | lbits);
    disable MYHDL121_RETURN;
end
endfunction

function integer MYHDL57_get4;
    input boffset;
    input [5-1:0] width;
begin: MYHDL122_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL57_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL122_RETURN;
end
endfunction

function integer MYHDL58_get_bits;
    input [24-1:0] aleaf;
begin: MYHDL123_RETURN
    MYHDL58_get_bits = ($signed({1'b0, aleaf}) & ((1 << 9) - 1));
    disable MYHDL123_RETURN;
end
endfunction

function integer MYHDL59_get_bits;
    input [24-1:0] aleaf;
begin: MYHDL124_RETURN
    MYHDL59_get_bits = ($signed({1'b0, aleaf}) & ((1 << 9) - 1));
    disable MYHDL124_RETURN;
end
endfunction

function integer MYHDL60_get_bits;
    input [24-1:0] aleaf;
begin: MYHDL125_RETURN
    MYHDL60_get_bits = ($signed({1'b0, aleaf}) & ((1 << 9) - 1));
    disable MYHDL125_RETURN;
end
endfunction

task MYHDL61_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL126_RETURN
    nshift = $signed(($signed({1'b0, dio}) + width) >>> 3);
    o_iprogress <= di;
    dio <= (($signed({1'b0, dio}) + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

function integer MYHDL62_get_code;
    input [24-1:0] aleaf;
begin: MYHDL127_RETURN
    MYHDL62_get_code = (aleaf >>> 9);
    disable MYHDL127_RETURN;
end
endfunction

function integer MYHDL63_get_code;
    input [24-1:0] aleaf;
begin: MYHDL128_RETURN
    MYHDL63_get_code = (aleaf >>> 9);
    disable MYHDL128_RETURN;
end
endfunction

function integer MYHDL64_get4;
    input boffset;
    integer boffset;
    input [5-1:0] width;
begin: MYHDL129_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL64_get4 = ($signed($signed({1'b0, b41}) >>> ($signed({1'b0, dio}) + boffset)) & ((1 << width) - 1));
    disable MYHDL129_RETURN;
end
endfunction

function integer MYHDL65_get_bits;
    input [24-1:0] aleaf;
begin: MYHDL130_RETURN
    MYHDL65_get_bits = ($signed({1'b0, aleaf}) & ((1 << 9) - 1));
    disable MYHDL130_RETURN;
end
endfunction

function integer MYHDL66_get_bits;
    input [24-1:0] aleaf;
begin: MYHDL131_RETURN
    MYHDL66_get_bits = ($signed({1'b0, aleaf}) & ((1 << 9) - 1));
    disable MYHDL131_RETURN;
end
endfunction

function integer MYHDL67_get4;
    input boffset;
    input width;
    integer width;
begin: MYHDL132_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL67_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL132_RETURN;
end
endfunction

function integer MYHDL68_get_code;
    input [24-1:0] aleaf;
begin: MYHDL133_RETURN
    MYHDL68_get_code = (aleaf >>> 9);
    disable MYHDL133_RETURN;
end
endfunction

function integer MYHDL69_get_bits;
    input [24-1:0] aleaf;
begin: MYHDL134_RETURN
    MYHDL69_get_bits = ($signed({1'b0, aleaf}) & ((1 << 9) - 1));
    disable MYHDL134_RETURN;
end
endfunction

function integer MYHDL70_get4;
    input boffset;
    integer boffset;
    input width;
    integer width;
begin: MYHDL135_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL70_get4 = ($signed($signed({1'b0, b41}) >>> ($signed({1'b0, dio}) + boffset)) & ((1 << width) - 1));
    disable MYHDL135_RETURN;
end
endfunction

function integer MYHDL71_get_bits;
    input [24-1:0] aleaf;
begin: MYHDL136_RETURN
    MYHDL71_get_bits = ($signed({1'b0, aleaf}) & ((1 << 9) - 1));
    disable MYHDL136_RETURN;
end
endfunction

task MYHDL72_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL137_RETURN
    nshift = $signed(($signed({1'b0, dio}) + width) >>> 3);
    o_iprogress <= di;
    dio <= (($signed({1'b0, dio}) + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

function integer MYHDL73_get4;
    input boffset;
    input width;
    integer width;
begin: MYHDL138_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL73_get4 = ((b41 >>> (dio + boffset)) & ((1 << width) - 1));
    disable MYHDL138_RETURN;
end
endfunction

function integer MYHDL74_get4;
    input boffset;
    integer boffset;
    input width;
    integer width;
begin: MYHDL139_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL74_get4 = ($signed($signed({1'b0, b41}) >>> ($signed({1'b0, dio}) + boffset)) & ((1 << width) - 1));
    disable MYHDL139_RETURN;
end
endfunction

function integer MYHDL75_rev_bits;
    input b;
    integer b;
    input nb;
    integer nb;
    integer r;
begin: MYHDL140_RETURN
    if ((b >= (1 << nb))) begin
        $finish;
        $write("too few bits");
        $write("\n");
    end
    r = (((((((((((((((((b >>> 14) & 1) << 0) | (((b >>> 13) & 1) << 1)) | (((b >>> 12) & 1) << 2)) | (((b >>> 11) & 1) << 3)) | (((b >>> 10) & 1) << 4)) | (((b >>> 9) & 1) << 5)) | (((b >>> 8) & 1) << 6)) | (((b >>> 7) & 1) << 7)) | (((b >>> 6) & 1) << 8)) | (((b >>> 5) & 1) << 9)) | (((b >>> 4) & 1) << 10)) | (((b >>> 3) & 1) << 11)) | (((b >>> 2) & 1) << 12)) | (((b >>> 1) & 1) << 13)) | (((b >>> 0) & 1) << 14));
    r = r >>> (15 - $signed({1'b0, nb}));
    MYHDL75_rev_bits = r;
    disable MYHDL140_RETURN;
end
endfunction

function integer MYHDL76_get4;
    input boffset;
    integer boffset;
    input width;
    integer width;
begin: MYHDL141_RETURN
    if ((nb != 4)) begin
        $write("----NB----");
        $write("\n");
        $finish;
    end
    MYHDL76_get4 = ($signed($signed({1'b0, b41}) >>> ($signed({1'b0, dio}) + boffset)) & ((1 << width) - 1));
    disable MYHDL141_RETURN;
end
endfunction

task MYHDL77_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL142_RETURN
    nshift = $signed(($signed({1'b0, dio}) + width) >>> 3);
    o_iprogress <= di;
    dio <= (($signed({1'b0, dio}) + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask

task MYHDL78_adv;
    input width;
    integer width;
    integer nshift;
begin: MYHDL143_RETURN
    nshift = ((dio + width) >>> 3);
    o_iprogress <= di;
    dio <= ((dio + width) & 7);
    di <= ($signed({1'b0, di}) + nshift);
    if ((nshift != 0)) begin
        filled <= 1'b0;
    end
end
endtask


always @(posedge clk) begin: DEFLATE_IO_LOGIC
    case (i_mode)
        'h2: begin
            iram[(i_addr & 127)] <= i_data;
            isize <= i_addr;
        end
        'h3: begin
            o_byte <= oram[i_addr];
        end
        default: begin
            // pass
        end
    endcase
end


always @(posedge clk, negedge reset) begin: DEFLATE_LOGIC
    integer i;
    integer skip;
    reg no_adv;
    reg [4-1:0] outlen;
    reg [9-1:0] outbits;
    reg [8-1:0] bdata;
    integer adler1_next;
    integer nextdist;
    integer copydist;
    integer extra_dist;
    integer extra_bits;
    integer outcode;
    integer lencode;
    integer match;
    integer distance;
    integer dbl;
    integer limit;
    reg [4-1:0] j;
    integer t;
    reg [5-1:0] amb;
    integer ncode;
    reg [4-1:0] bits;
    reg [15-1:0] canonical;
    reg [15-1:0] aim;
    integer cto;
    integer mask;
    integer token;
    integer extraLength;
    integer tlength;
    integer distanceCode;
    integer moreBits;
    integer mored;
    if (reset == 0) begin
        adler2 <= 0;
        ocopy <= 0;
        static <= 0;
        cur_i <= 0;
        ladler1 <= 0;
        oaddr <= 0;
        cur_cstatic <= 0;
        cur_HF1 <= 0;
        adler1 <= 0;
        instantMaxBit <= 0;
        instantMask <= 0;
        numCodeLength <= 0;
        oraddr <= 0;
        codeLength[0] <= 0;
        codeLength[1] <= 0;
        codeLength[2] <= 0;
        codeLength[3] <= 0;
        codeLength[4] <= 0;
        codeLength[5] <= 0;
        codeLength[6] <= 0;
        codeLength[7] <= 0;
        codeLength[8] <= 0;
        codeLength[9] <= 0;
        codeLength[10] <= 0;
        codeLength[11] <= 0;
        codeLength[12] <= 0;
        codeLength[13] <= 0;
        codeLength[14] <= 0;
        codeLength[15] <= 0;
        codeLength[16] <= 0;
        codeLength[17] <= 0;
        codeLength[18] <= 0;
        codeLength[19] <= 0;
        codeLength[20] <= 0;
        codeLength[21] <= 0;
        codeLength[22] <= 0;
        codeLength[23] <= 0;
        codeLength[24] <= 0;
        codeLength[25] <= 0;
        codeLength[26] <= 0;
        codeLength[27] <= 0;
        codeLength[28] <= 0;
        codeLength[29] <= 0;
        codeLength[30] <= 0;
        codeLength[31] <= 0;
        codeLength[32] <= 0;
        codeLength[33] <= 0;
        codeLength[34] <= 0;
        codeLength[35] <= 0;
        codeLength[36] <= 0;
        codeLength[37] <= 0;
        codeLength[38] <= 0;
        codeLength[39] <= 0;
        codeLength[40] <= 0;
        codeLength[41] <= 0;
        codeLength[42] <= 0;
        codeLength[43] <= 0;
        codeLength[44] <= 0;
        codeLength[45] <= 0;
        codeLength[46] <= 0;
        codeLength[47] <= 0;
        codeLength[48] <= 0;
        codeLength[49] <= 0;
        codeLength[50] <= 0;
        codeLength[51] <= 0;
        codeLength[52] <= 0;
        codeLength[53] <= 0;
        codeLength[54] <= 0;
        codeLength[55] <= 0;
        codeLength[56] <= 0;
        codeLength[57] <= 0;
        codeLength[58] <= 0;
        codeLength[59] <= 0;
        codeLength[60] <= 0;
        codeLength[61] <= 0;
        codeLength[62] <= 0;
        codeLength[63] <= 0;
        codeLength[64] <= 0;
        codeLength[65] <= 0;
        codeLength[66] <= 0;
        codeLength[67] <= 0;
        codeLength[68] <= 0;
        codeLength[69] <= 0;
        codeLength[70] <= 0;
        codeLength[71] <= 0;
        codeLength[72] <= 0;
        codeLength[73] <= 0;
        codeLength[74] <= 0;
        codeLength[75] <= 0;
        codeLength[76] <= 0;
        codeLength[77] <= 0;
        codeLength[78] <= 0;
        codeLength[79] <= 0;
        codeLength[80] <= 0;
        codeLength[81] <= 0;
        codeLength[82] <= 0;
        codeLength[83] <= 0;
        codeLength[84] <= 0;
        codeLength[85] <= 0;
        codeLength[86] <= 0;
        codeLength[87] <= 0;
        codeLength[88] <= 0;
        codeLength[89] <= 0;
        codeLength[90] <= 0;
        codeLength[91] <= 0;
        codeLength[92] <= 0;
        codeLength[93] <= 0;
        codeLength[94] <= 0;
        codeLength[95] <= 0;
        codeLength[96] <= 0;
        codeLength[97] <= 0;
        codeLength[98] <= 0;
        codeLength[99] <= 0;
        codeLength[100] <= 0;
        codeLength[101] <= 0;
        codeLength[102] <= 0;
        codeLength[103] <= 0;
        codeLength[104] <= 0;
        codeLength[105] <= 0;
        codeLength[106] <= 0;
        codeLength[107] <= 0;
        codeLength[108] <= 0;
        codeLength[109] <= 0;
        codeLength[110] <= 0;
        codeLength[111] <= 0;
        codeLength[112] <= 0;
        codeLength[113] <= 0;
        codeLength[114] <= 0;
        codeLength[115] <= 0;
        codeLength[116] <= 0;
        codeLength[117] <= 0;
        codeLength[118] <= 0;
        codeLength[119] <= 0;
        codeLength[120] <= 0;
        codeLength[121] <= 0;
        codeLength[122] <= 0;
        codeLength[123] <= 0;
        codeLength[124] <= 0;
        codeLength[125] <= 0;
        codeLength[126] <= 0;
        codeLength[127] <= 0;
        codeLength[128] <= 0;
        codeLength[129] <= 0;
        codeLength[130] <= 0;
        codeLength[131] <= 0;
        codeLength[132] <= 0;
        codeLength[133] <= 0;
        codeLength[134] <= 0;
        codeLength[135] <= 0;
        codeLength[136] <= 0;
        codeLength[137] <= 0;
        codeLength[138] <= 0;
        codeLength[139] <= 0;
        codeLength[140] <= 0;
        codeLength[141] <= 0;
        codeLength[142] <= 0;
        codeLength[143] <= 0;
        codeLength[144] <= 0;
        codeLength[145] <= 0;
        codeLength[146] <= 0;
        codeLength[147] <= 0;
        codeLength[148] <= 0;
        codeLength[149] <= 0;
        codeLength[150] <= 0;
        codeLength[151] <= 0;
        codeLength[152] <= 0;
        codeLength[153] <= 0;
        codeLength[154] <= 0;
        codeLength[155] <= 0;
        codeLength[156] <= 0;
        codeLength[157] <= 0;
        codeLength[158] <= 0;
        codeLength[159] <= 0;
        codeLength[160] <= 0;
        codeLength[161] <= 0;
        codeLength[162] <= 0;
        codeLength[163] <= 0;
        codeLength[164] <= 0;
        codeLength[165] <= 0;
        codeLength[166] <= 0;
        codeLength[167] <= 0;
        codeLength[168] <= 0;
        codeLength[169] <= 0;
        codeLength[170] <= 0;
        codeLength[171] <= 0;
        codeLength[172] <= 0;
        codeLength[173] <= 0;
        codeLength[174] <= 0;
        codeLength[175] <= 0;
        codeLength[176] <= 0;
        codeLength[177] <= 0;
        codeLength[178] <= 0;
        codeLength[179] <= 0;
        codeLength[180] <= 0;
        codeLength[181] <= 0;
        codeLength[182] <= 0;
        codeLength[183] <= 0;
        codeLength[184] <= 0;
        codeLength[185] <= 0;
        codeLength[186] <= 0;
        codeLength[187] <= 0;
        codeLength[188] <= 0;
        codeLength[189] <= 0;
        codeLength[190] <= 0;
        codeLength[191] <= 0;
        codeLength[192] <= 0;
        codeLength[193] <= 0;
        codeLength[194] <= 0;
        codeLength[195] <= 0;
        codeLength[196] <= 0;
        codeLength[197] <= 0;
        codeLength[198] <= 0;
        codeLength[199] <= 0;
        codeLength[200] <= 0;
        codeLength[201] <= 0;
        codeLength[202] <= 0;
        codeLength[203] <= 0;
        codeLength[204] <= 0;
        codeLength[205] <= 0;
        codeLength[206] <= 0;
        codeLength[207] <= 0;
        codeLength[208] <= 0;
        codeLength[209] <= 0;
        codeLength[210] <= 0;
        codeLength[211] <= 0;
        codeLength[212] <= 0;
        codeLength[213] <= 0;
        codeLength[214] <= 0;
        codeLength[215] <= 0;
        codeLength[216] <= 0;
        codeLength[217] <= 0;
        codeLength[218] <= 0;
        codeLength[219] <= 0;
        codeLength[220] <= 0;
        codeLength[221] <= 0;
        codeLength[222] <= 0;
        codeLength[223] <= 0;
        codeLength[224] <= 0;
        codeLength[225] <= 0;
        codeLength[226] <= 0;
        codeLength[227] <= 0;
        codeLength[228] <= 0;
        codeLength[229] <= 0;
        codeLength[230] <= 0;
        codeLength[231] <= 0;
        codeLength[232] <= 0;
        codeLength[233] <= 0;
        codeLength[234] <= 0;
        codeLength[235] <= 0;
        codeLength[236] <= 0;
        codeLength[237] <= 0;
        codeLength[238] <= 0;
        codeLength[239] <= 0;
        codeLength[240] <= 0;
        codeLength[241] <= 0;
        codeLength[242] <= 0;
        codeLength[243] <= 0;
        codeLength[244] <= 0;
        codeLength[245] <= 0;
        codeLength[246] <= 0;
        codeLength[247] <= 0;
        codeLength[248] <= 0;
        codeLength[249] <= 0;
        codeLength[250] <= 0;
        codeLength[251] <= 0;
        codeLength[252] <= 0;
        codeLength[253] <= 0;
        codeLength[254] <= 0;
        codeLength[255] <= 0;
        codeLength[256] <= 0;
        codeLength[257] <= 0;
        codeLength[258] <= 0;
        codeLength[259] <= 0;
        codeLength[260] <= 0;
        codeLength[261] <= 0;
        codeLength[262] <= 0;
        codeLength[263] <= 0;
        codeLength[264] <= 0;
        codeLength[265] <= 0;
        codeLength[266] <= 0;
        codeLength[267] <= 0;
        codeLength[268] <= 0;
        codeLength[269] <= 0;
        codeLength[270] <= 0;
        codeLength[271] <= 0;
        codeLength[272] <= 0;
        codeLength[273] <= 0;
        codeLength[274] <= 0;
        codeLength[275] <= 0;
        codeLength[276] <= 0;
        codeLength[277] <= 0;
        codeLength[278] <= 0;
        codeLength[279] <= 0;
        codeLength[280] <= 0;
        codeLength[281] <= 0;
        codeLength[282] <= 0;
        codeLength[283] <= 0;
        codeLength[284] <= 0;
        codeLength[285] <= 0;
        codeLength[286] <= 0;
        codeLength[287] <= 0;
        codeLength[288] <= 0;
        codeLength[289] <= 0;
        state <= 5'b00000;
        dio <= 0;
        lastToken <= 0;
        leaves[0] <= 0;
        leaves[1] <= 0;
        leaves[2] <= 0;
        leaves[3] <= 0;
        leaves[4] <= 0;
        leaves[5] <= 0;
        leaves[6] <= 0;
        leaves[7] <= 0;
        leaves[8] <= 0;
        leaves[9] <= 0;
        leaves[10] <= 0;
        leaves[11] <= 0;
        leaves[12] <= 0;
        leaves[13] <= 0;
        leaves[14] <= 0;
        leaves[15] <= 0;
        leaves[16] <= 0;
        leaves[17] <= 0;
        leaves[18] <= 0;
        leaves[19] <= 0;
        leaves[20] <= 0;
        leaves[21] <= 0;
        leaves[22] <= 0;
        leaves[23] <= 0;
        leaves[24] <= 0;
        leaves[25] <= 0;
        leaves[26] <= 0;
        leaves[27] <= 0;
        leaves[28] <= 0;
        leaves[29] <= 0;
        leaves[30] <= 0;
        leaves[31] <= 0;
        leaves[32] <= 0;
        leaves[33] <= 0;
        leaves[34] <= 0;
        leaves[35] <= 0;
        leaves[36] <= 0;
        leaves[37] <= 0;
        leaves[38] <= 0;
        leaves[39] <= 0;
        leaves[40] <= 0;
        leaves[41] <= 0;
        leaves[42] <= 0;
        leaves[43] <= 0;
        leaves[44] <= 0;
        leaves[45] <= 0;
        leaves[46] <= 0;
        leaves[47] <= 0;
        leaves[48] <= 0;
        leaves[49] <= 0;
        leaves[50] <= 0;
        leaves[51] <= 0;
        leaves[52] <= 0;
        leaves[53] <= 0;
        leaves[54] <= 0;
        leaves[55] <= 0;
        leaves[56] <= 0;
        leaves[57] <= 0;
        leaves[58] <= 0;
        leaves[59] <= 0;
        leaves[60] <= 0;
        leaves[61] <= 0;
        leaves[62] <= 0;
        leaves[63] <= 0;
        leaves[64] <= 0;
        leaves[65] <= 0;
        leaves[66] <= 0;
        leaves[67] <= 0;
        leaves[68] <= 0;
        leaves[69] <= 0;
        leaves[70] <= 0;
        leaves[71] <= 0;
        leaves[72] <= 0;
        leaves[73] <= 0;
        leaves[74] <= 0;
        leaves[75] <= 0;
        leaves[76] <= 0;
        leaves[77] <= 0;
        leaves[78] <= 0;
        leaves[79] <= 0;
        leaves[80] <= 0;
        leaves[81] <= 0;
        leaves[82] <= 0;
        leaves[83] <= 0;
        leaves[84] <= 0;
        leaves[85] <= 0;
        leaves[86] <= 0;
        leaves[87] <= 0;
        leaves[88] <= 0;
        leaves[89] <= 0;
        leaves[90] <= 0;
        leaves[91] <= 0;
        leaves[92] <= 0;
        leaves[93] <= 0;
        leaves[94] <= 0;
        leaves[95] <= 0;
        leaves[96] <= 0;
        leaves[97] <= 0;
        leaves[98] <= 0;
        leaves[99] <= 0;
        leaves[100] <= 0;
        leaves[101] <= 0;
        leaves[102] <= 0;
        leaves[103] <= 0;
        leaves[104] <= 0;
        leaves[105] <= 0;
        leaves[106] <= 0;
        leaves[107] <= 0;
        leaves[108] <= 0;
        leaves[109] <= 0;
        leaves[110] <= 0;
        leaves[111] <= 0;
        leaves[112] <= 0;
        leaves[113] <= 0;
        leaves[114] <= 0;
        leaves[115] <= 0;
        leaves[116] <= 0;
        leaves[117] <= 0;
        leaves[118] <= 0;
        leaves[119] <= 0;
        leaves[120] <= 0;
        leaves[121] <= 0;
        leaves[122] <= 0;
        leaves[123] <= 0;
        leaves[124] <= 0;
        leaves[125] <= 0;
        leaves[126] <= 0;
        leaves[127] <= 0;
        leaves[128] <= 0;
        leaves[129] <= 0;
        leaves[130] <= 0;
        leaves[131] <= 0;
        leaves[132] <= 0;
        leaves[133] <= 0;
        leaves[134] <= 0;
        leaves[135] <= 0;
        leaves[136] <= 0;
        leaves[137] <= 0;
        leaves[138] <= 0;
        leaves[139] <= 0;
        leaves[140] <= 0;
        leaves[141] <= 0;
        leaves[142] <= 0;
        leaves[143] <= 0;
        leaves[144] <= 0;
        leaves[145] <= 0;
        leaves[146] <= 0;
        leaves[147] <= 0;
        leaves[148] <= 0;
        leaves[149] <= 0;
        leaves[150] <= 0;
        leaves[151] <= 0;
        leaves[152] <= 0;
        leaves[153] <= 0;
        leaves[154] <= 0;
        leaves[155] <= 0;
        leaves[156] <= 0;
        leaves[157] <= 0;
        leaves[158] <= 0;
        leaves[159] <= 0;
        leaves[160] <= 0;
        leaves[161] <= 0;
        leaves[162] <= 0;
        leaves[163] <= 0;
        leaves[164] <= 0;
        leaves[165] <= 0;
        leaves[166] <= 0;
        leaves[167] <= 0;
        leaves[168] <= 0;
        leaves[169] <= 0;
        leaves[170] <= 0;
        leaves[171] <= 0;
        leaves[172] <= 0;
        leaves[173] <= 0;
        leaves[174] <= 0;
        leaves[175] <= 0;
        leaves[176] <= 0;
        leaves[177] <= 0;
        leaves[178] <= 0;
        leaves[179] <= 0;
        leaves[180] <= 0;
        leaves[181] <= 0;
        leaves[182] <= 0;
        leaves[183] <= 0;
        leaves[184] <= 0;
        leaves[185] <= 0;
        leaves[186] <= 0;
        leaves[187] <= 0;
        leaves[188] <= 0;
        leaves[189] <= 0;
        leaves[190] <= 0;
        leaves[191] <= 0;
        leaves[192] <= 0;
        leaves[193] <= 0;
        leaves[194] <= 0;
        leaves[195] <= 0;
        leaves[196] <= 0;
        leaves[197] <= 0;
        leaves[198] <= 0;
        leaves[199] <= 0;
        leaves[200] <= 0;
        leaves[201] <= 0;
        leaves[202] <= 0;
        leaves[203] <= 0;
        leaves[204] <= 0;
        leaves[205] <= 0;
        leaves[206] <= 0;
        leaves[207] <= 0;
        leaves[208] <= 0;
        leaves[209] <= 0;
        leaves[210] <= 0;
        leaves[211] <= 0;
        leaves[212] <= 0;
        leaves[213] <= 0;
        leaves[214] <= 0;
        leaves[215] <= 0;
        leaves[216] <= 0;
        leaves[217] <= 0;
        leaves[218] <= 0;
        leaves[219] <= 0;
        leaves[220] <= 0;
        leaves[221] <= 0;
        leaves[222] <= 0;
        leaves[223] <= 0;
        leaves[224] <= 0;
        leaves[225] <= 0;
        leaves[226] <= 0;
        leaves[227] <= 0;
        leaves[228] <= 0;
        leaves[229] <= 0;
        leaves[230] <= 0;
        leaves[231] <= 0;
        leaves[232] <= 0;
        leaves[233] <= 0;
        leaves[234] <= 0;
        leaves[235] <= 0;
        leaves[236] <= 0;
        leaves[237] <= 0;
        leaves[238] <= 0;
        leaves[239] <= 0;
        leaves[240] <= 0;
        leaves[241] <= 0;
        leaves[242] <= 0;
        leaves[243] <= 0;
        leaves[244] <= 0;
        leaves[245] <= 0;
        leaves[246] <= 0;
        leaves[247] <= 0;
        leaves[248] <= 0;
        leaves[249] <= 0;
        leaves[250] <= 0;
        leaves[251] <= 0;
        leaves[252] <= 0;
        leaves[253] <= 0;
        leaves[254] <= 0;
        leaves[255] <= 0;
        leaves[256] <= 0;
        leaves[257] <= 0;
        leaves[258] <= 0;
        leaves[259] <= 0;
        leaves[260] <= 0;
        leaves[261] <= 0;
        leaves[262] <= 0;
        leaves[263] <= 0;
        leaves[264] <= 0;
        leaves[265] <= 0;
        leaves[266] <= 0;
        leaves[267] <= 0;
        leaves[268] <= 0;
        leaves[269] <= 0;
        leaves[270] <= 0;
        leaves[271] <= 0;
        leaves[272] <= 0;
        leaves[273] <= 0;
        leaves[274] <= 0;
        leaves[275] <= 0;
        leaves[276] <= 0;
        leaves[277] <= 0;
        leaves[278] <= 0;
        leaves[279] <= 0;
        leaves[280] <= 0;
        leaves[281] <= 0;
        leaves[282] <= 0;
        leaves[283] <= 0;
        leaves[284] <= 0;
        leaves[285] <= 0;
        leaves[286] <= 0;
        leaves[287] <= 0;
        leaves[288] <= 0;
        leaves[289] <= 0;
        leaves[290] <= 0;
        leaves[291] <= 0;
        leaves[292] <= 0;
        leaves[293] <= 0;
        leaves[294] <= 0;
        leaves[295] <= 0;
        leaves[296] <= 0;
        leaves[297] <= 0;
        leaves[298] <= 0;
        leaves[299] <= 0;
        leaves[300] <= 0;
        leaves[301] <= 0;
        leaves[302] <= 0;
        leaves[303] <= 0;
        leaves[304] <= 0;
        leaves[305] <= 0;
        leaves[306] <= 0;
        leaves[307] <= 0;
        leaves[308] <= 0;
        leaves[309] <= 0;
        leaves[310] <= 0;
        leaves[311] <= 0;
        leaves[312] <= 0;
        leaves[313] <= 0;
        leaves[314] <= 0;
        leaves[315] <= 0;
        leaves[316] <= 0;
        leaves[317] <= 0;
        leaves[318] <= 0;
        leaves[319] <= 0;
        leaves[320] <= 0;
        leaves[321] <= 0;
        leaves[322] <= 0;
        leaves[323] <= 0;
        leaves[324] <= 0;
        leaves[325] <= 0;
        leaves[326] <= 0;
        leaves[327] <= 0;
        leaves[328] <= 0;
        leaves[329] <= 0;
        leaves[330] <= 0;
        leaves[331] <= 0;
        leaves[332] <= 0;
        leaves[333] <= 0;
        leaves[334] <= 0;
        leaves[335] <= 0;
        leaves[336] <= 0;
        leaves[337] <= 0;
        leaves[338] <= 0;
        leaves[339] <= 0;
        leaves[340] <= 0;
        leaves[341] <= 0;
        leaves[342] <= 0;
        leaves[343] <= 0;
        leaves[344] <= 0;
        leaves[345] <= 0;
        leaves[346] <= 0;
        leaves[347] <= 0;
        leaves[348] <= 0;
        leaves[349] <= 0;
        leaves[350] <= 0;
        leaves[351] <= 0;
        leaves[352] <= 0;
        leaves[353] <= 0;
        leaves[354] <= 0;
        leaves[355] <= 0;
        leaves[356] <= 0;
        leaves[357] <= 0;
        leaves[358] <= 0;
        leaves[359] <= 0;
        leaves[360] <= 0;
        leaves[361] <= 0;
        leaves[362] <= 0;
        leaves[363] <= 0;
        leaves[364] <= 0;
        leaves[365] <= 0;
        leaves[366] <= 0;
        leaves[367] <= 0;
        leaves[368] <= 0;
        leaves[369] <= 0;
        leaves[370] <= 0;
        leaves[371] <= 0;
        leaves[372] <= 0;
        leaves[373] <= 0;
        leaves[374] <= 0;
        leaves[375] <= 0;
        leaves[376] <= 0;
        leaves[377] <= 0;
        leaves[378] <= 0;
        leaves[379] <= 0;
        leaves[380] <= 0;
        leaves[381] <= 0;
        leaves[382] <= 0;
        leaves[383] <= 0;
        leaves[384] <= 0;
        leaves[385] <= 0;
        leaves[386] <= 0;
        leaves[387] <= 0;
        leaves[388] <= 0;
        leaves[389] <= 0;
        leaves[390] <= 0;
        leaves[391] <= 0;
        leaves[392] <= 0;
        leaves[393] <= 0;
        leaves[394] <= 0;
        leaves[395] <= 0;
        leaves[396] <= 0;
        leaves[397] <= 0;
        leaves[398] <= 0;
        leaves[399] <= 0;
        leaves[400] <= 0;
        leaves[401] <= 0;
        leaves[402] <= 0;
        leaves[403] <= 0;
        leaves[404] <= 0;
        leaves[405] <= 0;
        leaves[406] <= 0;
        leaves[407] <= 0;
        leaves[408] <= 0;
        leaves[409] <= 0;
        leaves[410] <= 0;
        leaves[411] <= 0;
        leaves[412] <= 0;
        leaves[413] <= 0;
        leaves[414] <= 0;
        leaves[415] <= 0;
        leaves[416] <= 0;
        leaves[417] <= 0;
        leaves[418] <= 0;
        leaves[419] <= 0;
        leaves[420] <= 0;
        leaves[421] <= 0;
        leaves[422] <= 0;
        leaves[423] <= 0;
        leaves[424] <= 0;
        leaves[425] <= 0;
        leaves[426] <= 0;
        leaves[427] <= 0;
        leaves[428] <= 0;
        leaves[429] <= 0;
        leaves[430] <= 0;
        leaves[431] <= 0;
        leaves[432] <= 0;
        leaves[433] <= 0;
        leaves[434] <= 0;
        leaves[435] <= 0;
        leaves[436] <= 0;
        leaves[437] <= 0;
        leaves[438] <= 0;
        leaves[439] <= 0;
        leaves[440] <= 0;
        leaves[441] <= 0;
        leaves[442] <= 0;
        leaves[443] <= 0;
        leaves[444] <= 0;
        leaves[445] <= 0;
        leaves[446] <= 0;
        leaves[447] <= 0;
        leaves[448] <= 0;
        leaves[449] <= 0;
        leaves[450] <= 0;
        leaves[451] <= 0;
        leaves[452] <= 0;
        leaves[453] <= 0;
        leaves[454] <= 0;
        leaves[455] <= 0;
        leaves[456] <= 0;
        leaves[457] <= 0;
        leaves[458] <= 0;
        leaves[459] <= 0;
        leaves[460] <= 0;
        leaves[461] <= 0;
        leaves[462] <= 0;
        leaves[463] <= 0;
        leaves[464] <= 0;
        leaves[465] <= 0;
        leaves[466] <= 0;
        leaves[467] <= 0;
        leaves[468] <= 0;
        leaves[469] <= 0;
        leaves[470] <= 0;
        leaves[471] <= 0;
        leaves[472] <= 0;
        leaves[473] <= 0;
        leaves[474] <= 0;
        leaves[475] <= 0;
        leaves[476] <= 0;
        leaves[477] <= 0;
        leaves[478] <= 0;
        leaves[479] <= 0;
        leaves[480] <= 0;
        leaves[481] <= 0;
        leaves[482] <= 0;
        leaves[483] <= 0;
        leaves[484] <= 0;
        leaves[485] <= 0;
        leaves[486] <= 0;
        leaves[487] <= 0;
        leaves[488] <= 0;
        leaves[489] <= 0;
        leaves[490] <= 0;
        leaves[491] <= 0;
        leaves[492] <= 0;
        leaves[493] <= 0;
        leaves[494] <= 0;
        leaves[495] <= 0;
        leaves[496] <= 0;
        leaves[497] <= 0;
        leaves[498] <= 0;
        leaves[499] <= 0;
        leaves[500] <= 0;
        leaves[501] <= 0;
        leaves[502] <= 0;
        leaves[503] <= 0;
        leaves[504] <= 0;
        leaves[505] <= 0;
        leaves[506] <= 0;
        leaves[507] <= 0;
        leaves[508] <= 0;
        leaves[509] <= 0;
        leaves[510] <= 0;
        leaves[511] <= 0;
        code <= 0;
        filled <= 0;
        cur_next <= 0;
        cur_search <= 0;
        leaf <= 0;
        o_oprogress <= 0;
        o_iprogress <= 0;
        maxBits <= 0;
        howOften <= 0;
        numDistance <= 0;
        spread_i <= 0;
        d_instantMaxBit <= 0;
        distanceLength[0] <= 0;
        distanceLength[1] <= 0;
        distanceLength[2] <= 0;
        distanceLength[3] <= 0;
        distanceLength[4] <= 0;
        distanceLength[5] <= 0;
        distanceLength[6] <= 0;
        distanceLength[7] <= 0;
        distanceLength[8] <= 0;
        distanceLength[9] <= 0;
        distanceLength[10] <= 0;
        distanceLength[11] <= 0;
        distanceLength[12] <= 0;
        distanceLength[13] <= 0;
        distanceLength[14] <= 0;
        distanceLength[15] <= 0;
        distanceLength[16] <= 0;
        distanceLength[17] <= 0;
        distanceLength[18] <= 0;
        distanceLength[19] <= 0;
        distanceLength[20] <= 0;
        distanceLength[21] <= 0;
        distanceLength[22] <= 0;
        distanceLength[23] <= 0;
        distanceLength[24] <= 0;
        distanceLength[25] <= 0;
        distanceLength[26] <= 0;
        distanceLength[27] <= 0;
        distanceLength[28] <= 0;
        distanceLength[29] <= 0;
        distanceLength[30] <= 0;
        distanceLength[31] <= 0;
        do_compress <= 0;
        o_done <= 0;
        cur_dist <= 0;
        method <= 0;
        reverse <= 0;
        numLiterals <= 0;
        ob1 <= 0;
        obyte <= 0;
        do <= 0;
        length <= 0;
        d_instantMask <= 0;
        flush <= 0;
        minBits <= 0;
        nextCode[0] <= 0;
        nextCode[1] <= 0;
        nextCode[2] <= 0;
        nextCode[3] <= 0;
        nextCode[4] <= 0;
        nextCode[5] <= 0;
        nextCode[6] <= 0;
        nextCode[7] <= 0;
        nextCode[8] <= 0;
        nextCode[9] <= 0;
        nextCode[10] <= 0;
        nextCode[11] <= 0;
        nextCode[12] <= 0;
        nextCode[13] <= 0;
        nextCode[14] <= 0;
        HF4_init <= 0;
        d_leaves[0] <= 0;
        d_leaves[1] <= 0;
        d_leaves[2] <= 0;
        d_leaves[3] <= 0;
        d_leaves[4] <= 0;
        d_leaves[5] <= 0;
        d_leaves[6] <= 0;
        d_leaves[7] <= 0;
        d_leaves[8] <= 0;
        d_leaves[9] <= 0;
        d_leaves[10] <= 0;
        d_leaves[11] <= 0;
        d_leaves[12] <= 0;
        d_leaves[13] <= 0;
        d_leaves[14] <= 0;
        d_leaves[15] <= 0;
        d_leaves[16] <= 0;
        d_leaves[17] <= 0;
        d_leaves[18] <= 0;
        d_leaves[19] <= 0;
        d_leaves[20] <= 0;
        d_leaves[21] <= 0;
        d_leaves[22] <= 0;
        d_leaves[23] <= 0;
        d_leaves[24] <= 0;
        d_leaves[25] <= 0;
        d_leaves[26] <= 0;
        d_leaves[27] <= 0;
        d_leaves[28] <= 0;
        d_leaves[29] <= 0;
        d_leaves[30] <= 0;
        d_leaves[31] <= 0;
        d_leaves[32] <= 0;
        d_leaves[33] <= 0;
        d_leaves[34] <= 0;
        d_leaves[35] <= 0;
        d_leaves[36] <= 0;
        d_leaves[37] <= 0;
        d_leaves[38] <= 0;
        d_leaves[39] <= 0;
        d_leaves[40] <= 0;
        d_leaves[41] <= 0;
        d_leaves[42] <= 0;
        d_leaves[43] <= 0;
        d_leaves[44] <= 0;
        d_leaves[45] <= 0;
        d_leaves[46] <= 0;
        d_leaves[47] <= 0;
        d_leaves[48] <= 0;
        d_leaves[49] <= 0;
        d_leaves[50] <= 0;
        d_leaves[51] <= 0;
        d_leaves[52] <= 0;
        d_leaves[53] <= 0;
        d_leaves[54] <= 0;
        d_leaves[55] <= 0;
        d_leaves[56] <= 0;
        d_leaves[57] <= 0;
        d_leaves[58] <= 0;
        d_leaves[59] <= 0;
        d_leaves[60] <= 0;
        d_leaves[61] <= 0;
        d_leaves[62] <= 0;
        d_leaves[63] <= 0;
        d_leaves[64] <= 0;
        d_leaves[65] <= 0;
        d_leaves[66] <= 0;
        d_leaves[67] <= 0;
        d_leaves[68] <= 0;
        d_leaves[69] <= 0;
        d_leaves[70] <= 0;
        d_leaves[71] <= 0;
        d_leaves[72] <= 0;
        d_leaves[73] <= 0;
        d_leaves[74] <= 0;
        d_leaves[75] <= 0;
        d_leaves[76] <= 0;
        d_leaves[77] <= 0;
        d_leaves[78] <= 0;
        d_leaves[79] <= 0;
        d_leaves[80] <= 0;
        d_leaves[81] <= 0;
        d_leaves[82] <= 0;
        d_leaves[83] <= 0;
        d_leaves[84] <= 0;
        d_leaves[85] <= 0;
        d_leaves[86] <= 0;
        d_leaves[87] <= 0;
        d_leaves[88] <= 0;
        d_leaves[89] <= 0;
        d_leaves[90] <= 0;
        d_leaves[91] <= 0;
        d_leaves[92] <= 0;
        d_leaves[93] <= 0;
        d_leaves[94] <= 0;
        d_leaves[95] <= 0;
        d_leaves[96] <= 0;
        d_leaves[97] <= 0;
        d_leaves[98] <= 0;
        d_leaves[99] <= 0;
        d_leaves[100] <= 0;
        d_leaves[101] <= 0;
        d_leaves[102] <= 0;
        d_leaves[103] <= 0;
        d_leaves[104] <= 0;
        d_leaves[105] <= 0;
        d_leaves[106] <= 0;
        d_leaves[107] <= 0;
        d_leaves[108] <= 0;
        d_leaves[109] <= 0;
        d_leaves[110] <= 0;
        d_leaves[111] <= 0;
        d_leaves[112] <= 0;
        d_leaves[113] <= 0;
        d_leaves[114] <= 0;
        d_leaves[115] <= 0;
        d_leaves[116] <= 0;
        d_leaves[117] <= 0;
        d_leaves[118] <= 0;
        d_leaves[119] <= 0;
        d_leaves[120] <= 0;
        d_leaves[121] <= 0;
        d_leaves[122] <= 0;
        d_leaves[123] <= 0;
        d_leaves[124] <= 0;
        d_leaves[125] <= 0;
        d_leaves[126] <= 0;
        d_leaves[127] <= 0;
        doo <= 0;
        code_bits[0] <= 0;
        code_bits[1] <= 0;
        code_bits[2] <= 0;
        code_bits[3] <= 0;
        code_bits[4] <= 0;
        code_bits[5] <= 0;
        code_bits[6] <= 0;
        code_bits[7] <= 0;
        code_bits[8] <= 0;
        code_bits[9] <= 0;
        code_bits[10] <= 0;
        code_bits[11] <= 0;
        code_bits[12] <= 0;
        code_bits[13] <= 0;
        code_bits[14] <= 0;
        code_bits[15] <= 0;
        code_bits[16] <= 0;
        code_bits[17] <= 0;
        code_bits[18] <= 0;
        code_bits[19] <= 0;
        code_bits[20] <= 0;
        code_bits[21] <= 0;
        code_bits[22] <= 0;
        code_bits[23] <= 0;
        code_bits[24] <= 0;
        code_bits[25] <= 0;
        code_bits[26] <= 0;
        code_bits[27] <= 0;
        code_bits[28] <= 0;
        code_bits[29] <= 0;
        code_bits[30] <= 0;
        code_bits[31] <= 0;
        code_bits[32] <= 0;
        code_bits[33] <= 0;
        code_bits[34] <= 0;
        code_bits[35] <= 0;
        code_bits[36] <= 0;
        code_bits[37] <= 0;
        code_bits[38] <= 0;
        code_bits[39] <= 0;
        code_bits[40] <= 0;
        code_bits[41] <= 0;
        code_bits[42] <= 0;
        code_bits[43] <= 0;
        code_bits[44] <= 0;
        code_bits[45] <= 0;
        code_bits[46] <= 0;
        code_bits[47] <= 0;
        code_bits[48] <= 0;
        code_bits[49] <= 0;
        code_bits[50] <= 0;
        code_bits[51] <= 0;
        code_bits[52] <= 0;
        code_bits[53] <= 0;
        code_bits[54] <= 0;
        code_bits[55] <= 0;
        code_bits[56] <= 0;
        code_bits[57] <= 0;
        code_bits[58] <= 0;
        code_bits[59] <= 0;
        code_bits[60] <= 0;
        code_bits[61] <= 0;
        code_bits[62] <= 0;
        code_bits[63] <= 0;
        code_bits[64] <= 0;
        code_bits[65] <= 0;
        code_bits[66] <= 0;
        code_bits[67] <= 0;
        code_bits[68] <= 0;
        code_bits[69] <= 0;
        code_bits[70] <= 0;
        code_bits[71] <= 0;
        code_bits[72] <= 0;
        code_bits[73] <= 0;
        code_bits[74] <= 0;
        code_bits[75] <= 0;
        code_bits[76] <= 0;
        code_bits[77] <= 0;
        code_bits[78] <= 0;
        code_bits[79] <= 0;
        code_bits[80] <= 0;
        code_bits[81] <= 0;
        code_bits[82] <= 0;
        code_bits[83] <= 0;
        code_bits[84] <= 0;
        code_bits[85] <= 0;
        code_bits[86] <= 0;
        code_bits[87] <= 0;
        code_bits[88] <= 0;
        code_bits[89] <= 0;
        code_bits[90] <= 0;
        code_bits[91] <= 0;
        code_bits[92] <= 0;
        code_bits[93] <= 0;
        code_bits[94] <= 0;
        code_bits[95] <= 0;
        code_bits[96] <= 0;
        code_bits[97] <= 0;
        code_bits[98] <= 0;
        code_bits[99] <= 0;
        code_bits[100] <= 0;
        code_bits[101] <= 0;
        code_bits[102] <= 0;
        code_bits[103] <= 0;
        code_bits[104] <= 0;
        code_bits[105] <= 0;
        code_bits[106] <= 0;
        code_bits[107] <= 0;
        code_bits[108] <= 0;
        code_bits[109] <= 0;
        code_bits[110] <= 0;
        code_bits[111] <= 0;
        code_bits[112] <= 0;
        code_bits[113] <= 0;
        code_bits[114] <= 0;
        code_bits[115] <= 0;
        code_bits[116] <= 0;
        code_bits[117] <= 0;
        code_bits[118] <= 0;
        code_bits[119] <= 0;
        code_bits[120] <= 0;
        code_bits[121] <= 0;
        code_bits[122] <= 0;
        code_bits[123] <= 0;
        code_bits[124] <= 0;
        code_bits[125] <= 0;
        code_bits[126] <= 0;
        code_bits[127] <= 0;
        code_bits[128] <= 0;
        code_bits[129] <= 0;
        code_bits[130] <= 0;
        code_bits[131] <= 0;
        code_bits[132] <= 0;
        code_bits[133] <= 0;
        code_bits[134] <= 0;
        code_bits[135] <= 0;
        code_bits[136] <= 0;
        code_bits[137] <= 0;
        code_bits[138] <= 0;
        code_bits[139] <= 0;
        code_bits[140] <= 0;
        code_bits[141] <= 0;
        code_bits[142] <= 0;
        code_bits[143] <= 0;
        code_bits[144] <= 0;
        code_bits[145] <= 0;
        code_bits[146] <= 0;
        code_bits[147] <= 0;
        code_bits[148] <= 0;
        code_bits[149] <= 0;
        code_bits[150] <= 0;
        code_bits[151] <= 0;
        code_bits[152] <= 0;
        code_bits[153] <= 0;
        code_bits[154] <= 0;
        code_bits[155] <= 0;
        code_bits[156] <= 0;
        code_bits[157] <= 0;
        code_bits[158] <= 0;
        code_bits[159] <= 0;
        code_bits[160] <= 0;
        code_bits[161] <= 0;
        code_bits[162] <= 0;
        code_bits[163] <= 0;
        code_bits[164] <= 0;
        code_bits[165] <= 0;
        code_bits[166] <= 0;
        code_bits[167] <= 0;
        code_bits[168] <= 0;
        code_bits[169] <= 0;
        code_bits[170] <= 0;
        code_bits[171] <= 0;
        code_bits[172] <= 0;
        code_bits[173] <= 0;
        code_bits[174] <= 0;
        code_bits[175] <= 0;
        code_bits[176] <= 0;
        code_bits[177] <= 0;
        code_bits[178] <= 0;
        code_bits[179] <= 0;
        code_bits[180] <= 0;
        code_bits[181] <= 0;
        code_bits[182] <= 0;
        code_bits[183] <= 0;
        code_bits[184] <= 0;
        code_bits[185] <= 0;
        code_bits[186] <= 0;
        code_bits[187] <= 0;
        code_bits[188] <= 0;
        code_bits[189] <= 0;
        code_bits[190] <= 0;
        code_bits[191] <= 0;
        code_bits[192] <= 0;
        code_bits[193] <= 0;
        code_bits[194] <= 0;
        code_bits[195] <= 0;
        code_bits[196] <= 0;
        code_bits[197] <= 0;
        code_bits[198] <= 0;
        code_bits[199] <= 0;
        code_bits[200] <= 0;
        code_bits[201] <= 0;
        code_bits[202] <= 0;
        code_bits[203] <= 0;
        code_bits[204] <= 0;
        code_bits[205] <= 0;
        code_bits[206] <= 0;
        code_bits[207] <= 0;
        code_bits[208] <= 0;
        code_bits[209] <= 0;
        code_bits[210] <= 0;
        code_bits[211] <= 0;
        code_bits[212] <= 0;
        code_bits[213] <= 0;
        code_bits[214] <= 0;
        code_bits[215] <= 0;
        code_bits[216] <= 0;
        code_bits[217] <= 0;
        code_bits[218] <= 0;
        code_bits[219] <= 0;
        code_bits[220] <= 0;
        code_bits[221] <= 0;
        code_bits[222] <= 0;
        code_bits[223] <= 0;
        code_bits[224] <= 0;
        code_bits[225] <= 0;
        code_bits[226] <= 0;
        code_bits[227] <= 0;
        code_bits[228] <= 0;
        code_bits[229] <= 0;
        code_bits[230] <= 0;
        code_bits[231] <= 0;
        code_bits[232] <= 0;
        code_bits[233] <= 0;
        code_bits[234] <= 0;
        code_bits[235] <= 0;
        code_bits[236] <= 0;
        code_bits[237] <= 0;
        code_bits[238] <= 0;
        code_bits[239] <= 0;
        code_bits[240] <= 0;
        code_bits[241] <= 0;
        code_bits[242] <= 0;
        code_bits[243] <= 0;
        code_bits[244] <= 0;
        code_bits[245] <= 0;
        code_bits[246] <= 0;
        code_bits[247] <= 0;
        code_bits[248] <= 0;
        code_bits[249] <= 0;
        code_bits[250] <= 0;
        code_bits[251] <= 0;
        code_bits[252] <= 0;
        code_bits[253] <= 0;
        code_bits[254] <= 0;
        code_bits[255] <= 0;
        code_bits[256] <= 0;
        code_bits[257] <= 0;
        code_bits[258] <= 0;
        code_bits[259] <= 0;
        code_bits[260] <= 0;
        code_bits[261] <= 0;
        code_bits[262] <= 0;
        code_bits[263] <= 0;
        code_bits[264] <= 0;
        code_bits[265] <= 0;
        code_bits[266] <= 0;
        code_bits[267] <= 0;
        code_bits[268] <= 0;
        code_bits[269] <= 0;
        code_bits[270] <= 0;
        code_bits[271] <= 0;
        code_bits[272] <= 0;
        code_bits[273] <= 0;
        code_bits[274] <= 0;
        code_bits[275] <= 0;
        code_bits[276] <= 0;
        code_bits[277] <= 0;
        code_bits[278] <= 0;
        code_bits[279] <= 0;
        code_bits[280] <= 0;
        code_bits[281] <= 0;
        code_bits[282] <= 0;
        code_bits[283] <= 0;
        code_bits[284] <= 0;
        code_bits[285] <= 0;
        code_bits[286] <= 0;
        code_bits[287] <= 0;
        spread <= 0;
        bitLengthCount[0] <= 0;
        bitLengthCount[1] <= 0;
        bitLengthCount[2] <= 0;
        bitLengthCount[3] <= 0;
        bitLengthCount[4] <= 0;
        bitLengthCount[5] <= 0;
        bitLengthCount[6] <= 0;
        bitLengthCount[7] <= 0;
        bitLengthCount[8] <= 0;
        bitLengthCount[9] <= 0;
        bitLengthCount[10] <= 0;
        bitLengthCount[11] <= 0;
        bitLengthCount[12] <= 0;
        bitLengthCount[13] <= 0;
        bitLengthCount[14] <= 0;
        bitLengthCount[15] <= 0;
        di <= 0;
        step <= 0;
        d_maxBits <= 0;
        offset <= 0;
        b_numCodeLength <= 0;
        cur_static <= 0;
        final <= 0;
    end
    else begin
        if ((!reset)) begin
            $write("DEFLATE RESET");
            $write("\n");
            state <= 5'b00000;
            o_done <= 1'b0;
        end
        else begin
            case (state)
                5'b00000: begin
                    ocopy <= 1'b0;
                    case (i_mode)
                        'h4: begin
                            $write("STARTC");
                            $write("\n");
                            do_compress <= 1'b1;
                            method <= 1;
                            o_done <= 1'b0;
                            o_iprogress <= 0;
                            o_oprogress <= 0;
                            di <= 0;
                            dio <= 0;
                            do <= 0;
                            doo <= 0;
                            filled <= 1'b1;
                            cur_static <= 0;
                            state <= 5'b01100;
                        end
                        'h5: begin
                            do_compress <= 1'b0;
                            o_done <= 1'b0;
                            di <= 0;
                            dio <= 0;
                            do <= 0;
                            doo <= 0;
                            filled <= 1'b1;
                            state <= 5'b00001;
                        end
                        default: begin
                            // pass
                        end
                    endcase
                end
                5'b00001: begin
                    if ((!filled)) begin
                        filled <= 1'b1;
                    end
                    else if ((nb != 4)) begin
                        // pass
                    end
                    else if ((di == 0)) begin
                        if ((b1 == 120)) begin
                            $write("deflate mode");
                            $write("\n");
                        end
                        else begin
                            $write("%h", di);
                            $write(" ");
                            $write("%h", dio);
                            $write(" ");
                            $write("%h", nb);
                            $write(" ");
                            $write("%h", b1);
                            $write(" ");
                            $write("%h", b2);
                            $write(" ");
                            $write("%h", b3);
                            $write(" ");
                            $write("%h", b4);
                            $write(" ");
                            $write("%h", isize);
                            $write("\n");
                            $finish;
                        end
                        MYHDL3_adv(8);
                    end
                    else if ((di == 1)) begin
                        if ((b1 != 156)) begin
                            $finish;
                        end
                        MYHDL4_adv(8);
                    end
                    else begin
                        if (MYHDL5_get4(0, 1)) begin
                            $write("final");
                            $write("\n");
                            final <= 1'b1;
                        end
                        i = MYHDL6_get4(1, 2);
                        method <= i;
                        $write("method");
                        $write(" ");
                        $write("%0d", i);
                        $write("\n");
                        $write("%h", di);
                        $write(" ");
                        $write("%h", dio);
                        $write(" ");
                        $write("%h", nb);
                        $write(" ");
                        $write("%h", b1);
                        $write(" ");
                        $write("%h", b2);
                        $write(" ");
                        $write("%h", b3);
                        $write(" ");
                        $write("%h", b4);
                        $write(" ");
                        $write("%0d", i);
                        $write(" ");
                        $write("%h", isize);
                        $write("\n");
                        case (i)
                            'h2: begin
                                state <= 5'b00010;
                                numCodeLength <= 0;
                                numLiterals <= 0;
                                static <= 1'b0;
                                MYHDL7_adv(3);
                            end
                            'h1: begin
                                static <= 1'b1;
                                cur_static <= 0;
                                state <= 5'b01100;
                                MYHDL8_adv(3);
                            end
                            'h0: begin
                                state <= 5'b10010;
                                skip = (8 - dio);
                                if ((skip <= 2)) begin
                                    skip = (16 - dio);
                                end
                                i = MYHDL9_get4(skip, 16);
                                MYHDL10_adv((skip + 16));
                                length <= i;
                                cur_i <= 0;
                                offset <= 7;
                            end
                            default: begin
                                $write("Bad method");
                                $write("\n");
                                $finish;
                            end
                        endcase
                    end
                end
                5'b10011: begin
                    no_adv = 0;
                    if ((!filled)) begin
                        no_adv = 1;
                        filled <= 1'b1;
                    end
                    else if ((nb != 4)) begin
                        no_adv = 1;
                        // pass
                    end
                    else if ((cur_cstatic == 0)) begin
                        flush <= 1'b0;
                        ob1 <= 0;
                        adler1 <= 1;
                        adler2 <= 0;
                        ladler1 <= 0;
                        oaddr <= 0;
                        obyte <= 120;
                    end
                    else if ((cur_cstatic == 1)) begin
                        oaddr <= 1;
                        obyte <= 156;
                        do <= 2;
                    end
                    else if ((cur_cstatic == 2)) begin
                        oaddr <= do;
                        obyte <= MYHDL11_put(3, 3);
                        MYHDL12_put_adv(3, 3);
                    end
                    else if (flush) begin
                        $write("flush");
                        $write(" ");
                        $write("%h", do);
                        $write(" ");
                        $write("%h", ob1);
                        $write("\n");
                        no_adv = 1;
                        oaddr <= do;
                        obyte <= ob1;
                        MYHDL13_do_flush;
                    end
                    else if ((($signed({1'b0, cur_cstatic}) - 3) > isize)) begin
                        if ((($signed({1'b0, cur_cstatic}) - 3) == (isize + 1))) begin
                            $write("Put EOF");
                            $write(" ");
                            $write("%h", do);
                            $write("\n");
                            i = 256;
                            outlen = codeLength[i];
                            outbits = code_bits[i];
                            $write("EOF BITS:");
                            $write(" ");
                            $write("%0d", i);
                            $write(" ");
                            $write("%h", outlen);
                            $write(" ");
                            $write("%h", outbits);
                            $write("\n");
                            oaddr <= do;
                            obyte <= MYHDL14_put(outbits, outlen);
                            MYHDL15_put_adv(outbits, outlen);
                        end
                        else if ((($signed({1'b0, cur_cstatic}) - 3) == (isize + 2))) begin
                            $write("calc end adler");
                            $write("\n");
                            adler2 <= ((adler2 + ladler1) % 65521);
                            if ((doo != 0)) begin
                                oaddr <= do;
                                obyte <= ob1;
                                do <= (do + 1);
                            end
                        end
                        else if ((($signed({1'b0, cur_cstatic}) - 3) == (isize + 3))) begin
                            $write("c1");
                            $write("\n");
                            oaddr <= do;
                            obyte <= (adler2 >>> 8);
                            do <= (do + 1);
                        end
                        else if ((($signed({1'b0, cur_cstatic}) - 3) == (isize + 4))) begin
                            $write("c2");
                            $write("\n");
                            oaddr <= do;
                            obyte <= (adler2 & 255);
                            do <= (do + 1);
                        end
                        else if ((($signed({1'b0, cur_cstatic}) - 3) == (isize + 5))) begin
                            $write("c3");
                            $write("\n");
                            oaddr <= do;
                            obyte <= (adler1 >>> 8);
                            do <= (do + 1);
                        end
                        else if ((($signed({1'b0, cur_cstatic}) - 3) == (isize + 6))) begin
                            $write("c4");
                            $write("\n");
                            oaddr <= do;
                            obyte <= (adler1 & 255);
                        end
                        else if ((($signed({1'b0, cur_cstatic}) - 3) == (isize + 7))) begin
                            $write("EOF finish");
                            $write(" ");
                            $write("%h", do);
                            $write("\n");
                            o_done <= 1'b1;
                            o_oprogress <= (do + 1);
                            state <= 5'b00000;
                        end
                        else begin
                            $write("%h", cur_cstatic);
                            $write(" ");
                            $write("%h", isize);
                            $write("\n");
                            $finish;
                        end
                    end
                    else begin
                        bdata = iram[di];
                        adler1_next = ((adler1 + bdata) % 65521);
                        adler1 <= adler1_next;
                        adler2 <= ((adler2 + ladler1) % 65521);
                        ladler1 <= adler1_next;
                        state <= 5'b10100;
                        cur_search <= (di - 3);
                    end
                    if ((!no_adv)) begin
                        cur_cstatic <= (cur_cstatic + 1);
                    end
                end
                5'b10101: begin
                    if (flush) begin
                        MYHDL16_do_flush;
                    end
                    else begin
                        case ((cur_i + 1))
                            0: nextdist = 1;
                            1: nextdist = 2;
                            2: nextdist = 3;
                            3: nextdist = 4;
                            4: nextdist = 5;
                            5: nextdist = 7;
                            6: nextdist = 9;
                            7: nextdist = 13;
                            8: nextdist = 17;
                            9: nextdist = 25;
                            10: nextdist = 33;
                            11: nextdist = 49;
                            12: nextdist = 65;
                            13: nextdist = 97;
                            14: nextdist = 129;
                            15: nextdist = 193;
                            16: nextdist = 257;
                            17: nextdist = 385;
                            18: nextdist = 513;
                            19: nextdist = 769;
                            20: nextdist = 1025;
                            21: nextdist = 1537;
                            22: nextdist = 2049;
                            23: nextdist = 3073;
                            24: nextdist = 4097;
                            25: nextdist = 6145;
                            26: nextdist = 8193;
                            27: nextdist = 12289;
                            28: nextdist = 16385;
                            default: nextdist = 24577;
                        endcase
                        if ((nextdist > cur_dist)) begin
                            $write("Found distance");
                            $write(" ");
                            $write("%h", cur_i);
                            $write("\n");
                            case (cur_i)
                                0: copydist = 1;
                                1: copydist = 2;
                                2: copydist = 3;
                                3: copydist = 4;
                                4: copydist = 5;
                                5: copydist = 7;
                                6: copydist = 9;
                                7: copydist = 13;
                                8: copydist = 17;
                                9: copydist = 25;
                                10: copydist = 33;
                                11: copydist = 49;
                                12: copydist = 65;
                                13: copydist = 97;
                                14: copydist = 129;
                                15: copydist = 193;
                                16: copydist = 257;
                                17: copydist = 385;
                                18: copydist = 513;
                                19: copydist = 769;
                                20: copydist = 1025;
                                21: copydist = 1537;
                                22: copydist = 2049;
                                23: copydist = 3073;
                                24: copydist = 4097;
                                25: copydist = 6145;
                                26: copydist = 8193;
                                27: copydist = 12289;
                                28: copydist = 16385;
                                default: copydist = 24577;
                            endcase
                            extra_dist = (cur_dist - copydist);
                            case ((cur_i / 2))
                                0: extra_bits = 0;
                                1: extra_bits = 0;
                                2: extra_bits = 1;
                                3: extra_bits = 2;
                                4: extra_bits = 3;
                                5: extra_bits = 4;
                                6: extra_bits = 5;
                                7: extra_bits = 6;
                                8: extra_bits = 7;
                                9: extra_bits = 8;
                                10: extra_bits = 9;
                                11: extra_bits = 10;
                                12: extra_bits = 11;
                                13: extra_bits = 12;
                                default: extra_bits = 13;
                            endcase
                            if ((extra_dist > ((1 << extra_bits) - 1))) begin
                                $finish;
                            end
                            outcode = (MYHDL17_rev_bits(cur_i, 5) | (extra_dist << 5));
                            oaddr <= do;
                            obyte <= MYHDL18_put(outcode, (5 + extra_bits));
                            MYHDL19_put_adv(outcode, (5 + extra_bits));
                            cur_i <= (($signed({1'b0, di}) - $signed({1'b0, length})) + 1);
                            state <= 5'b10110;
                        end
                        else begin
                            cur_i <= (cur_i + 1);
                        end
                    end
                end
                5'b10110: begin
                    if ((cur_i < di)) begin
                        bdata = iram[(cur_i & 127)];
                        adler1_next = ((adler1 + bdata) % 65521);
                        adler1 <= adler1_next;
                        adler2 <= ((adler2 + ladler1) % 65521);
                        ladler1 <= adler1_next;
                        cur_i <= (cur_i + 1);
                    end
                    else begin
                        state <= 5'b10011;
                    end
                end
                5'b10100: begin
                    if ((!filled)) begin
                        filled <= 1'b1;
                    end
                    else if ((nb != 4)) begin
                        // pass
                    end
                    else begin
                        if (((cur_search >= 0) && (cur_search >= ($signed({1'b0, di}) - 32)) && (di >= 3) && ($signed({1'b0, di}) < ($signed({1'b0, isize}) - 3)))) begin
                            if (((iram[(cur_search & 127)] == b1) && (iram[((cur_search + 1) & 127)] == b2) && (iram[((cur_search + 2) & 127)] == b3))) begin
                                lencode = 257;
                                match = 3;
                                if ((($signed({1'b0, di}) < ($signed({1'b0, isize}) - 4)) && (iram[((cur_search + 3) & 127)] == b4))) begin
                                    lencode = 258;
                                    match = 4;
                                    if ((($signed({1'b0, di}) < ($signed({1'b0, isize}) - 5)) && (iram[((cur_search + 4) & 127)] == iram[((di + 4) & 127)]))) begin
                                        lencode = 259;
                                        match = 5;
                                    end
                                end
                                // if di < isize - 6 and                                             iram[cur_search+5 & IBS] == iram[di + 5 & IBS]:
                                //     lencode = 260
                                //     match = 6
                                //     if di < isize - 7 and                                                 iram[cur_search+6 & IBS] == iram[di + 6 & IBS]:
                                //         lencode = 261
                                //         match = 7
                                //         if di < isize - 8 and                                                     iram[cur_search+7 & IBS] == iram[di + 7 & IBS]:
                                //             lencode = 262
                                //             match = 8
                                //             if di < isize - 9 and                                                         iram[cur_search+8 & IBS] == iram[di + 8 & IBS]:
                                //                 lencode = 263
                                //                 match = 9
                                //                 if di < isize - 10 and                                                             iram[cur_search+9 & IBS] == iram[di + 9 & IBS]:
                                //                     lencode = 264
                                //                     match = 10
                                $write("found:");
                                $write(" ");
                                $write("%h", cur_search);
                                $write(" ");
                                $write("%h", di);
                                $write(" ");
                                $write("%h", isize);
                                $write(" ");
                                $write("%0d", match);
                                $write("\n");
                                outlen = codeLength[lencode];
                                outbits = code_bits[lencode];
                                oaddr <= do;
                                obyte <= MYHDL20_put(outbits, outlen);
                                MYHDL21_put_adv(outbits, outlen);
                                distance = ($signed({1'b0, di}) - cur_search);
                                cur_dist <= distance;
                                cur_i <= 0;
                                MYHDL22_adv((match * 8));
                                cur_cstatic <= ((cur_cstatic + match) - 1);
                                length <= match;
                                state <= 5'b10101;
                            end
                            else begin
                                cur_search <= (cur_search - 1);
                            end
                        end
                        else begin
                            bdata = iram[di];
                            MYHDL23_adv(8);
                            outlen = codeLength[bdata];
                            outbits = code_bits[bdata];
                            oaddr <= do;
                            obyte <= MYHDL24_put(outbits, outlen);
                            MYHDL25_put_adv(outbits, outlen);
                            state <= 5'b10011;
                        end
                    end
                end
                5'b01100: begin
                    for (i=0; i<144; i=i+1) begin
                        codeLength[i] <= 8;
                    end
                    for (i=144; i<256; i=i+1) begin
                        codeLength[i] <= 9;
                    end
                    for (i=256; i<280; i=i+1) begin
                        codeLength[i] <= 7;
                    end
                    for (i=280; i<288; i=i+1) begin
                        codeLength[i] <= 8;
                    end
                    numCodeLength <= 288;
                    cur_HF1 <= 0;
                    state <= 5'b00111;
                    // if cur_static < 288:
                    //     if cur_static < 144:
                    //         codeLength[cur_static].next = 8
                    //     elif cur_static < 256:
                    //         codeLength[cur_static].next = 9
                    //     elif cur_static < 280:
                    //         codeLength[cur_static].next = 7
                    //     else:
                    //         codeLength[cur_static].next = 8
                    //     cur_static.next = cur_static + 1
                    // else:
                    //     numCodeLength.next = 288
                    //     cur_HF1.next = 0
                    //     state.next = d_state.HF1
                end
                5'b00010: begin
                    if ((!filled)) begin
                        filled <= 1'b1;
                    end
                    else if ((nb != 4)) begin
                        // pass
                    end
                    else if ((numLiterals == 0)) begin
                        numLiterals <= (257 + MYHDL34_get4(0, 5));
                        $write("NL:");
                        $write(" ");
                        $write("%0d", (257 + MYHDL35_get4(0, 5)));
                        $write("\n");
                        numDistance <= (1 + MYHDL36_get4(5, 5));
                        $write("ND:");
                        $write(" ");
                        $write("%0d", (1 + MYHDL37_get4(5, 5)));
                        $write("\n");
                        b_numCodeLength <= (4 + MYHDL38_get4(10, 4));
                        $write("NCL:");
                        $write(" ");
                        $write("%0d", (4 + MYHDL39_get4(10, 4)));
                        $write("\n");
                        numCodeLength <= 0;
                        MYHDL40_adv(14);
                    end
                    else begin
                        if ((numCodeLength < 19)) begin
                            case (numCodeLength)
                                0: i = 16;
                                1: i = 17;
                                2: i = 18;
                                3: i = 0;
                                4: i = 8;
                                5: i = 7;
                                6: i = 9;
                                7: i = 6;
                                8: i = 10;
                                9: i = 5;
                                10: i = 11;
                                11: i = 4;
                                12: i = 12;
                                13: i = 3;
                                14: i = 13;
                                15: i = 2;
                                16: i = 14;
                                17: i = 1;
                                default: i = 15;
                            endcase
                            if ((numCodeLength < b_numCodeLength)) begin
                                codeLength[i] <= MYHDL41_get4(0, 3);
                                MYHDL42_adv(3);
                            end
                            else begin
                                codeLength[i] <= 0;
                            end
                            numCodeLength <= (numCodeLength + 1);
                        end
                        else begin
                            numCodeLength <= 19;
                            cur_HF1 <= 0;
                            state <= 5'b00111;
                        end
                    end
                end
                5'b00011: begin
                    if ((!filled)) begin
                        filled <= 1'b1;
                    end
                    else if ((nb != 4)) begin
                        // pass
                    end
                    else if ((numCodeLength < (numLiterals + numDistance))) begin
                        i = 0;
                        if ((code < 16)) begin
                            howOften <= 1;
                            lastToken <= code;
                        end
                        else if ((code == 16)) begin
                            howOften <= (3 + MYHDL43_get4(0, 2));
                            i = 2;
                        end
                        else if ((code == 17)) begin
                            howOften <= (3 + MYHDL44_get4(0, 3));
                            lastToken <= 0;
                            i = 3;
                        end
                        else if ((code == 18)) begin
                            howOften <= (11 + MYHDL45_get4(0, 7));
                            lastToken <= 0;
                            i = 7;
                        end
                        else begin
                            $finish;
                        end
                        if ((i != 0)) begin
                            MYHDL46_adv(i);
                        end
                        state <= 5'b00100;
                    end
                    else begin
                        $write("FILL UP");
                        $write("\n");
                        for (i=0; i<32; i=i+1) begin
                            dbl = 0;
                            if (((i + $signed({1'b0, numLiterals})) < numCodeLength)) begin
                                dbl = codeLength[(i + $signed({1'b0, numLiterals}))];
                            end
                            distanceLength[i] <= dbl;
                        end
                        cur_i <= numLiterals;
                        state <= 5'b00110;
                    end
                end
                default: begin
                    if ((state == 5'b00110)) begin
                        if ((cur_i < 288)) begin
                            codeLength[cur_i] <= 0;
                            cur_i <= (cur_i + 1);
                        end
                        else begin
                            numCodeLength <= 288;
                            method <= 3;
                            cur_HF1 <= 0;
                            state <= 5'b00111;
                        end
                    end
                    else begin
                        case (state)
                            5'b00101: begin
                                $write("DISTTREE");
                                $write("\n");
                                for (i=0; i<32; i=i+1) begin
                                    codeLength[i] <= distanceLength[i];
                                end
                                numCodeLength <= 32;
                                method <= 4;
                                cur_HF1 <= 0;
                                state <= 5'b00111;
                            end
                            5'b00100: begin
                                if ((howOften != 0)) begin
                                    codeLength[numCodeLength] <= lastToken;
                                    howOften <= (howOften - 1);
                                    numCodeLength <= (numCodeLength + 1);
                                end
                                else if ((numCodeLength < (numLiterals + numDistance))) begin
                                    cur_next <= 0;
                                    state <= 5'b10000;
                                end
                                else begin
                                    state <= 5'b00011;
                                end
                            end
                            5'b00111: begin
                                if ((cur_HF1 < 16)) begin
                                    bitLengthCount[cur_HF1] <= 0;
                                end
                                if ((cur_HF1 < 128)) begin
                                    d_leaves[cur_HF1] <= 0;
                                end
                                if (((method != 4) && (cur_HF1 < 512))) begin
                                    leaves[cur_HF1] <= 0;
                                end
                                limit = 512;
                                if ((method == 4)) begin
                                    limit = 128;
                                end
                                if ((cur_HF1 < limit)) begin
                                    cur_HF1 <= (cur_HF1 + 1);
                                end
                                else begin
                                    $write("DID HF1 INIT");
                                    $write("\n");
                                    cur_i <= 0;
                                    state <= 5'b01000;
                                end
                            end
                            5'b01000: begin
                                if ((cur_i < numCodeLength)) begin
                                    j = codeLength[cur_i];
                                    bitLengthCount[j] <= (bitLengthCount[j] + 1);
                                    cur_i <= (cur_i + 1);
                                end
                                else begin
                                    bitLengthCount[0] <= 0;
                                    state <= 5'b01001;
                                    cur_i <= 1;
                                    if ((method == 4)) begin
                                        d_maxBits <= 0;
                                    end
                                    else begin
                                        maxBits <= 0;
                                    end
                                    minBits <= 15;
                                end
                            end
                            5'b01001: begin
                                if ((cur_i <= 15)) begin
                                    if ((bitLengthCount[cur_i] != 0)) begin
                                        if ((cur_i < minBits)) begin
                                            minBits <= cur_i;
                                        end
                                        if ((method == 4)) begin
                                            if ((cur_i > d_maxBits)) begin
                                                d_maxBits <= cur_i;
                                            end
                                        end
                                        else begin
                                            if ((cur_i > maxBits)) begin
                                                maxBits <= cur_i;
                                            end
                                        end
                                    end
                                    cur_i <= (cur_i + 1);
                                end
                                else begin
                                    $write("%h", minBits);
                                    $write(" ");
                                    $write("%h", maxBits);
                                    $write("\n");
                                    t = 10;
                                    if ((method == 4)) begin
                                        if ((t > d_maxBits)) begin
                                            t = d_maxBits;
                                        end
                                        d_instantMaxBit <= t;
                                        d_instantMask <= ((1 << t) - 1);
                                    end
                                    else begin
                                        if ((t > maxBits)) begin
                                            t = maxBits;
                                        end
                                        instantMaxBit <= t;
                                        instantMask <= ((1 << t) - 1);
                                    end
                                    $write("%0d", ((1 << t) - 1));
                                    $write("\n");
                                    state <= 5'b01010;
                                    cur_i <= minBits;
                                    code <= 0;
                                    for (i=0; i<15; i=i+1) begin
                                        nextCode[i] <= 0;
                                    end
                                    $write("to HF3");
                                    $write("\n");
                                end
                            end
                            5'b01010: begin
                                amb = maxBits;
                                if ((method == 4)) begin
                                    amb = d_maxBits;
                                end
                                if ((cur_i <= amb)) begin
                                    ncode = ((code + bitLengthCount[($signed({1'b0, cur_i}) - 1)]) << 1);
                                    code <= ncode;
                                    nextCode[cur_i] <= ncode;
                                    cur_i <= (cur_i + 1);
                                end
                                else begin
                                    state <= 5'b01011;
                                    cur_i <= 0;
                                    spread_i <= 0;
                                    HF4_init <= 0;
                                    $write("to HF4");
                                    $write("\n");
                                end
                            end
                            5'b01011: begin
                                if ((spread_i < numCodeLength)) begin
                                    bits = codeLength[spread_i];
                                    if ((bits != 0)) begin
                                        if ((HF4_init == 0)) begin
                                            canonical = nextCode[bits];
                                            nextCode[bits] <= (nextCode[bits] + 1);
                                            if ((bits > 15)) begin
                                                $finish;
                                            end
                                            reverse <= MYHDL53_rev_bits(canonical, bits);
                                            leaf <= MYHDL54_makeLeaf(spread_i, bits);
                                            HF4_init <= 1;
                                        end
                                        else if ((method == 4)) begin
                                            d_leaves[reverse] <= leaf;
                                            if ((bits <= d_instantMaxBit)) begin
                                                if (((reverse + (1 << bits)) <= d_instantMask)) begin
                                                    step <= (1 << bits);
                                                    spread <= (reverse + (1 << bits));
                                                    state <= 5'b01111;
                                                end
                                                else begin
                                                    spread_i <= (spread_i + 1);
                                                end
                                            end
                                            else begin
                                                spread_i <= (spread_i + 1);
                                            end
                                            HF4_init <= 0;
                                        end
                                        else begin
                                            leaves[reverse] <= leaf;
                                            code_bits[spread_i] <= reverse;
                                            if ((bits <= instantMaxBit)) begin
                                                if (((reverse + (1 << bits)) <= instantMask)) begin
                                                    step <= (1 << bits);
                                                    spread <= (reverse + (1 << bits));
                                                    state <= 5'b01111;
                                                end
                                                else begin
                                                    spread_i <= (spread_i + 1);
                                                end
                                            end
                                            else begin
                                                spread_i <= (spread_i + 1);
                                            end
                                            HF4_init <= 0;
                                        end
                                    end
                                    else begin
                                        spread_i <= (spread_i + 1);
                                    end
                                end
                                else begin
                                    if (do_compress) begin
                                        state <= 5'b10011;
                                        cur_cstatic <= 0;
                                    end
                                    else if ((method == 3)) begin
                                        state <= 5'b00101;
                                    end
                                    else if ((method == 4)) begin
                                        $write("DEFLATE m2!");
                                        $write("\n");
                                        state <= 5'b10000;
                                    end
                                    else if ((method == 2)) begin
                                        numCodeLength <= 0;
                                        state <= 5'b10000;
                                    end
                                    else begin
                                        state <= 5'b10000;
                                    end
                                    cur_next <= 0;
                                    cur_i <= 0;
                                end
                            end
                            5'b01111: begin
                                if ((method == 4)) begin
                                    d_leaves[spread] <= MYHDL55_makeLeaf(spread_i, codeLength[spread_i]);
                                end
                                else begin
                                    leaves[spread] <= MYHDL56_makeLeaf(spread_i, codeLength[spread_i]);
                                end
                                aim = instantMask;
                                if ((method == 4)) begin
                                    aim = d_instantMask;
                                end
                                if (($signed({1'b0, spread}) > ($signed({1'b0, aim}) - $signed({1'b0, step})))) begin
                                    spread_i <= (spread_i + 1);
                                    state <= 5'b01011;
                                end
                                else begin
                                    spread <= (spread + step);
                                end
                            end
                            5'b10000: begin
                                if ((!filled)) begin
                                    filled <= 1'b1;
                                end
                                else if ((nb != 4)) begin
                                    // pass
                                end
                                else if ((cur_next == 0)) begin
                                    if ((instantMaxBit <= maxBits)) begin
                                        cto = MYHDL57_get4(0, maxBits);
                                        cur_next <= instantMaxBit;
                                        mask = ((1 << instantMaxBit) - 1);
                                        leaf <= leaves[(cto & mask)];
                                    end
                                    else begin
                                        $write("FAIL instantMaxBit <= maxBits");
                                        $write("\n");
                                        $finish;
                                    end
                                end
                                else if ((cur_next <= maxBits)) begin
                                    if ((MYHDL58_get_bits(leaf) <= cur_next)) begin
                                        if ((MYHDL59_get_bits(leaf) < 1)) begin
                                            $write("< 1 bits: ");
                                            $write("\n");
                                            $finish;
                                        end
                                        MYHDL61_adv(MYHDL60_get_bits(leaf));
                                        if ((MYHDL62_get_code(leaf) == 0)) begin
                                            $write("leaf 0");
                                            $write("\n");
                                        end
                                        code <= MYHDL63_get_code(leaf);
                                        if ((method == 2)) begin
                                            state <= 5'b00011;
                                        end
                                        else begin
                                            state <= 5'b10001;
                                        end
                                    end
                                    else begin
                                        $write("FAIL get_bits(leaf) <= cur_next");
                                        $write("\n");
                                        $finish;
                                    end
                                end
                                else begin
                                    $write("no next token");
                                    $write("\n");
                                    $finish;
                                end
                            end
                            5'b01101: begin
                                if ((!filled)) begin
                                    filled <= 1'b1;
                                end
                                else if ((nb != 4)) begin
                                    // pass
                                end
                                else if ((cur_next == 0)) begin
                                    if ((d_instantMaxBit <= d_maxBits)) begin
                                        token = (code - 257);
                                        case (token)
                                            0: extraLength = 0;
                                            1: extraLength = 0;
                                            2: extraLength = 0;
                                            3: extraLength = 0;
                                            4: extraLength = 0;
                                            5: extraLength = 0;
                                            6: extraLength = 0;
                                            7: extraLength = 0;
                                            8: extraLength = 1;
                                            9: extraLength = 1;
                                            10: extraLength = 1;
                                            11: extraLength = 1;
                                            12: extraLength = 2;
                                            13: extraLength = 2;
                                            14: extraLength = 2;
                                            15: extraLength = 2;
                                            16: extraLength = 3;
                                            17: extraLength = 3;
                                            18: extraLength = 3;
                                            19: extraLength = 3;
                                            20: extraLength = 4;
                                            21: extraLength = 4;
                                            22: extraLength = 4;
                                            23: extraLength = 4;
                                            24: extraLength = 5;
                                            25: extraLength = 5;
                                            26: extraLength = 5;
                                            27: extraLength = 5;
                                            default: extraLength = 0;
                                        endcase
                                        cto = MYHDL64_get4(extraLength, d_maxBits);
                                        cur_next <= d_instantMaxBit;
                                        mask = ((1 << d_instantMaxBit) - 1);
                                        leaf <= d_leaves[(cto & mask)];
                                    end
                                    else begin
                                        $finish;
                                    end
                                end
                                else if ((cur_next <= d_maxBits)) begin
                                    if ((MYHDL65_get_bits(leaf) <= cur_next)) begin
                                        if ((MYHDL66_get_bits(leaf) == 0)) begin
                                            $finish;
                                        end
                                        token = (code - 257);
                                        case (token)
                                            0: tlength = 3;
                                            1: tlength = 4;
                                            2: tlength = 5;
                                            3: tlength = 6;
                                            4: tlength = 7;
                                            5: tlength = 8;
                                            6: tlength = 9;
                                            7: tlength = 10;
                                            8: tlength = 11;
                                            9: tlength = 13;
                                            10: tlength = 15;
                                            11: tlength = 17;
                                            12: tlength = 19;
                                            13: tlength = 23;
                                            14: tlength = 27;
                                            15: tlength = 31;
                                            16: tlength = 35;
                                            17: tlength = 43;
                                            18: tlength = 51;
                                            19: tlength = 59;
                                            20: tlength = 67;
                                            21: tlength = 83;
                                            22: tlength = 99;
                                            23: tlength = 115;
                                            24: tlength = 131;
                                            25: tlength = 163;
                                            26: tlength = 195;
                                            27: tlength = 227;
                                            default: tlength = 258;
                                        endcase
                                        case (token)
                                            0: extraLength = 0;
                                            1: extraLength = 0;
                                            2: extraLength = 0;
                                            3: extraLength = 0;
                                            4: extraLength = 0;
                                            5: extraLength = 0;
                                            6: extraLength = 0;
                                            7: extraLength = 0;
                                            8: extraLength = 1;
                                            9: extraLength = 1;
                                            10: extraLength = 1;
                                            11: extraLength = 1;
                                            12: extraLength = 2;
                                            13: extraLength = 2;
                                            14: extraLength = 2;
                                            15: extraLength = 2;
                                            16: extraLength = 3;
                                            17: extraLength = 3;
                                            18: extraLength = 3;
                                            19: extraLength = 3;
                                            20: extraLength = 4;
                                            21: extraLength = 4;
                                            22: extraLength = 4;
                                            23: extraLength = 4;
                                            24: extraLength = 5;
                                            25: extraLength = 5;
                                            26: extraLength = 5;
                                            27: extraLength = 5;
                                            default: extraLength = 0;
                                        endcase
                                        tlength = tlength + MYHDL67_get4(0, extraLength);
                                        distanceCode = MYHDL68_get_code(leaf);
                                        case (distanceCode)
                                            0: distance = 1;
                                            1: distance = 2;
                                            2: distance = 3;
                                            3: distance = 4;
                                            4: distance = 5;
                                            5: distance = 7;
                                            6: distance = 9;
                                            7: distance = 13;
                                            8: distance = 17;
                                            9: distance = 25;
                                            10: distance = 33;
                                            11: distance = 49;
                                            12: distance = 65;
                                            13: distance = 97;
                                            14: distance = 129;
                                            15: distance = 193;
                                            16: distance = 257;
                                            17: distance = 385;
                                            18: distance = 513;
                                            19: distance = 769;
                                            20: distance = 1025;
                                            21: distance = 1537;
                                            22: distance = 2049;
                                            23: distance = 3073;
                                            24: distance = 4097;
                                            25: distance = 6145;
                                            26: distance = 8193;
                                            27: distance = 12289;
                                            28: distance = 16385;
                                            default: distance = 24577;
                                        endcase
                                        case ($signed(distanceCode >>> 1))
                                            0: moreBits = 0;
                                            1: moreBits = 0;
                                            2: moreBits = 1;
                                            3: moreBits = 2;
                                            4: moreBits = 3;
                                            5: moreBits = 4;
                                            6: moreBits = 5;
                                            7: moreBits = 6;
                                            8: moreBits = 7;
                                            9: moreBits = 8;
                                            10: moreBits = 9;
                                            11: moreBits = 10;
                                            12: moreBits = 11;
                                            13: moreBits = 12;
                                            default: moreBits = 13;
                                        endcase
                                        mored = MYHDL70_get4((extraLength + MYHDL69_get_bits(leaf)), moreBits);
                                        distance = distance + mored;
                                        MYHDL72_adv(((moreBits + extraLength) + MYHDL71_get_bits(leaf)));
                                        offset <= ($signed({1'b0, do}) - distance);
                                        length <= tlength;
                                        cur_i <= 0;
                                        state <= 5'b10010;
                                    end
                                    else begin
                                        $finish;
                                    end
                                end
                                else begin
                                    $finish;
                                end
                            end
                            default: begin
                                if ((state == 5'b10001)) begin
                                    if ((!filled)) begin
                                        filled <= 1'b1;
                                    end
                                    else if ((nb != 4)) begin
                                        // pass
                                    end
                                    else if (($signed({1'b0, di}) > ($signed({1'b0, isize}) - 3))) begin
                                        state <= 5'b00000;
                                        o_done <= 1'b1;
                                        $write("NO EOF ");
                                        $write(" ");
                                        $write("%h", di);
                                        $write("\n");
                                        $finish;
                                    end
                                    else if ((code == 256)) begin
                                        $write("EOF:");
                                        $write(" ");
                                        $write("%h", di);
                                        $write(" ");
                                        $write("%h", do);
                                        $write("\n");
                                        if ((!final)) begin
                                            state <= 5'b00001;
                                        end
                                        else begin
                                            o_done <= 1'b1;
                                            o_oprogress <= do;
                                            state <= 5'b00000;
                                        end
                                    end
                                    else begin
                                        if ((code < 256)) begin
                                            oaddr <= do;
                                            obyte <= code;
                                            o_oprogress <= (do + 1);
                                            do <= (do + 1);
                                            cur_next <= 0;
                                            state <= 5'b10000;
                                        end
                                        else if ((code == 300)) begin
                                            $finish;
                                        end
                                        else begin
                                            if (static) begin
                                                token = (code - 257);
                                                case (token)
                                                    0: tlength = 3;
                                                    1: tlength = 4;
                                                    2: tlength = 5;
                                                    3: tlength = 6;
                                                    4: tlength = 7;
                                                    5: tlength = 8;
                                                    6: tlength = 9;
                                                    7: tlength = 10;
                                                    8: tlength = 11;
                                                    9: tlength = 13;
                                                    10: tlength = 15;
                                                    11: tlength = 17;
                                                    12: tlength = 19;
                                                    13: tlength = 23;
                                                    14: tlength = 27;
                                                    15: tlength = 31;
                                                    16: tlength = 35;
                                                    17: tlength = 43;
                                                    18: tlength = 51;
                                                    19: tlength = 59;
                                                    20: tlength = 67;
                                                    21: tlength = 83;
                                                    22: tlength = 99;
                                                    23: tlength = 115;
                                                    24: tlength = 131;
                                                    25: tlength = 163;
                                                    26: tlength = 195;
                                                    27: tlength = 227;
                                                    default: tlength = 258;
                                                endcase
                                                case (token)
                                                    0: extraLength = 0;
                                                    1: extraLength = 0;
                                                    2: extraLength = 0;
                                                    3: extraLength = 0;
                                                    4: extraLength = 0;
                                                    5: extraLength = 0;
                                                    6: extraLength = 0;
                                                    7: extraLength = 0;
                                                    8: extraLength = 1;
                                                    9: extraLength = 1;
                                                    10: extraLength = 1;
                                                    11: extraLength = 1;
                                                    12: extraLength = 2;
                                                    13: extraLength = 2;
                                                    14: extraLength = 2;
                                                    15: extraLength = 2;
                                                    16: extraLength = 3;
                                                    17: extraLength = 3;
                                                    18: extraLength = 3;
                                                    19: extraLength = 3;
                                                    20: extraLength = 4;
                                                    21: extraLength = 4;
                                                    22: extraLength = 4;
                                                    23: extraLength = 4;
                                                    24: extraLength = 5;
                                                    25: extraLength = 5;
                                                    26: extraLength = 5;
                                                    27: extraLength = 5;
                                                    default: extraLength = 0;
                                                endcase
                                                tlength = tlength + MYHDL73_get4(0, extraLength);
                                                t = MYHDL74_get4(extraLength, 5);
                                                distanceCode = MYHDL75_rev_bits(t, 5);
                                                case (distanceCode)
                                                    0: distance = 1;
                                                    1: distance = 2;
                                                    2: distance = 3;
                                                    3: distance = 4;
                                                    4: distance = 5;
                                                    5: distance = 7;
                                                    6: distance = 9;
                                                    7: distance = 13;
                                                    8: distance = 17;
                                                    9: distance = 25;
                                                    10: distance = 33;
                                                    11: distance = 49;
                                                    12: distance = 65;
                                                    13: distance = 97;
                                                    14: distance = 129;
                                                    15: distance = 193;
                                                    16: distance = 257;
                                                    17: distance = 385;
                                                    18: distance = 513;
                                                    19: distance = 769;
                                                    20: distance = 1025;
                                                    21: distance = 1537;
                                                    22: distance = 2049;
                                                    23: distance = 3073;
                                                    24: distance = 4097;
                                                    25: distance = 6145;
                                                    26: distance = 8193;
                                                    27: distance = 12289;
                                                    28: distance = 16385;
                                                    default: distance = 24577;
                                                endcase
                                                case ($signed(distanceCode >>> 1))
                                                    0: moreBits = 0;
                                                    1: moreBits = 0;
                                                    2: moreBits = 1;
                                                    3: moreBits = 2;
                                                    4: moreBits = 3;
                                                    5: moreBits = 4;
                                                    6: moreBits = 5;
                                                    7: moreBits = 6;
                                                    8: moreBits = 7;
                                                    9: moreBits = 8;
                                                    10: moreBits = 9;
                                                    11: moreBits = 10;
                                                    12: moreBits = 11;
                                                    13: moreBits = 12;
                                                    default: moreBits = 13;
                                                endcase
                                                distance = distance + MYHDL76_get4((extraLength + 5), moreBits);
                                                MYHDL77_adv(((extraLength + 5) + moreBits));
                                                offset <= ($signed({1'b0, do}) - distance);
                                                length <= tlength;
                                                cur_i <= 0;
                                                state <= 5'b10010;
                                            end
                                            else begin
                                                state <= 5'b01101;
                                            end
                                        end
                                        cur_next <= 0;
                                    end
                                end
                                else begin
                                    if ((state == 5'b10010)) begin
                                        if ((!filled)) begin
                                            filled <= 1'b1;
                                        end
                                        else if ((nb != 4)) begin
                                            // pass
                                        end
                                        else if ((method == 0)) begin
                                            if ((cur_i < length)) begin
                                                oaddr <= do;
                                                obyte <= b3;
                                                MYHDL78_adv(8);
                                                cur_i <= (cur_i + 1);
                                                do <= (do + 1);
                                                o_oprogress <= (do + 1);
                                            end
                                            else if ((!final)) begin
                                                state <= 5'b00001;
                                            end
                                            else begin
                                                o_oprogress <= do;
                                                o_done <= 1'b1;
                                                state <= 5'b00000;
                                            end
                                        end
                                        else if ((cur_i < (length + 1))) begin
                                            oraddr <= (offset + cur_i);
                                            cur_i <= (cur_i + 1);
                                            if ((cur_i > 1)) begin
                                                oaddr <= do;
                                                obyte <= orbyte;
                                                o_oprogress <= (do + 1);
                                                do <= (do + 1);
                                            end
                                        end
                                        else begin
                                            oaddr <= do;
                                            obyte <= orbyte;
                                            do <= (do + 1);
                                            o_oprogress <= (do + 1);
                                            cur_next <= 0;
                                            state <= 5'b10000;
                                        end
                                    end
                                    else begin
                                        $write("unknown state?!");
                                        $write("\n");
                                        state <= 5'b00000;
                                    end
                                end
                            end
                        endcase
                    end
                end
            endcase
        end
    end
end


always @(posedge clk, negedge reset) begin: DEFLATE_FILL_BUF
    integer delta;
    if (reset == 0) begin
        b4 <= 0;
        b3 <= 0;
        old_di <= 0;
        b1 <= 0;
        b2 <= 0;
        nb <= 0;
    end
    else begin
        if ((!reset)) begin
            nb <= 0;
            old_di <= 0;
            b1 <= 0;
            b2 <= 0;
            b3 <= 0;
            b4 <= 0;
        end
        else begin
            if ((isize < 4)) begin
                // pass
            end
            else if (((i_mode == 4) || (i_mode == 5))) begin
                nb <= 0;
            end
            else if ((nb == 5)) begin
                nb <= 4;
            end
            else if (((!filled) && (nb == 4) && (($signed({1'b0, di}) - $signed({1'b0, old_di})) <= 4))) begin
                delta = (di - old_di);
                case (delta)
                    'h1: begin
                        b1 <= b2;
                        b2 <= b3;
                        b3 <= b4;
                        b4 <= iram[((di + 3) & 127)];
                        nb <= 5;
                    end
                    'h2: begin
                        b1 <= b3;
                        b2 <= b4;
                        b3 <= iram[((di + 2) & 127)];
                        nb <= 3;
                    end
                    'h3: begin
                        b1 <= b4;
                        b2 <= iram[((di + 1) & 127)];
                        nb <= 2;
                    end
                    'h4: begin
                        b1 <= iram[(di & 127)];
                        nb <= 1;
                    end
                    default: begin
                        // pass
                    end
                endcase
            end
            else if (((!filled) || (nb == 0))) begin
                b1 <= iram[(di & 127)];
                nb <= 1;
            end
            else if (((!filled) || (nb == 1))) begin
                b2 <= iram[((di + 1) & 127)];
                nb <= 2;
            end
            else if (((!filled) || (nb == 2))) begin
                b3 <= iram[((di + 2) & 127)];
                nb <= 3;
            end
            else if (((!filled) || (nb == 3))) begin
                b4 <= iram[((di + 3) & 127)];
                nb <= 5;
            end
            else begin
                // pass
            end
            old_di <= di;
        end
    end
end


always @(posedge clk) begin: DEFLATE_ORAMWRITE
    oram[oaddr] <= obyte;
end


always @(posedge clk) begin: DEFLATE_ORAMREAD
    orbyte <= oram[oraddr];
end

endmodule
