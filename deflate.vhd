-- File: deflate.vhd
-- Generated by MyHDL 0.10
-- Date: Sat Feb  2 10:00:45 2019


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_010.all;

entity deflate is
    port (
        i_mode: in unsigned(2 downto 0);
        o_done: out std_logic;
        i_data: in unsigned(7 downto 0);
        o_iprogress: out unsigned(23 downto 0);
        o_oprogress: out unsigned(23 downto 0);
        o_byte: out unsigned(7 downto 0);
        i_waddr: in unsigned(8 downto 0);
        i_raddr: in unsigned(8 downto 0);
        clk: in std_logic;
        reset: in std_logic
    );
end entity deflate;
-- Deflate (de)compress
-- 
-- Ports:

architecture MyHDL of deflate is


type t_enum_d_state_1 is (
    IDLE,
    HEADER,
    BL,
    READBL,
    REPEAT,
    DISTTREE,
    INIT3,
    HF1,
    HF1INIT,
    HF2,
    HF3,
    HF4,
    HF4_2,
    HF4_3,
    STATIC,
    D_NEXT,
    D_NEXT_2,
    D_INFLATE,
    SPREAD,
    NEXT,
    INFLATE,
    COPY,
    CSTATIC,
    SEARCH,
    SEARCH10,
    SEARCHF,
    DISTANCE,
    CHECKSUM
);
signal wleaf: unsigned(18 downto 0);
signal step: unsigned(9 downto 0);
signal static: std_logic;
signal state: t_enum_d_state_1;
signal stat_leaf: unsigned(18 downto 0);
signal spread_i: unsigned(8 downto 0);
signal spread: unsigned(9 downto 0);
signal rleaf: unsigned(18 downto 0);
signal reverse: unsigned(14 downto 0);
signal rcount: unsigned(3 downto 0);
signal prev_method: unsigned(1 downto 0);
signal outcarrybits: unsigned(3 downto 0);
signal outcarry: unsigned(8 downto 0);
signal orbyte: unsigned(7 downto 0);
signal oraddr: unsigned(8 downto 0);
signal old_di: unsigned(23 downto 0);
signal offset: unsigned(8 downto 0);
signal off2: std_logic;
signal off1: std_logic;
signal obyte: unsigned(7 downto 0);
signal ob1: unsigned(7 downto 0);
signal oaddr: unsigned(8 downto 0);
signal numLiterals: unsigned(8 downto 0);
signal numDistance: unsigned(5 downto 0);
signal numCodeLength: unsigned(8 downto 0);
signal nb: std_logic;
signal more: unsigned(3 downto 0);
signal mlength: unsigned(3 downto 0);
signal minBits: unsigned(3 downto 0);
signal method: unsigned(2 downto 0);
signal maxBits: unsigned(3 downto 0);
signal lwaddr: unsigned(14 downto 0);
signal lraddr: unsigned(14 downto 0);
signal length: unsigned(8 downto 0);
signal leaf: unsigned(18 downto 0);
signal lastToken: unsigned(8 downto 0);
signal ladler1: unsigned(15 downto 0);
signal isize: unsigned(23 downto 0);
signal irbyte: unsigned(7 downto 0);
signal instantMaxBit: unsigned(3 downto 0);
signal instantMask: unsigned(14 downto 0);
signal howOften: unsigned(8 downto 0);
signal flush: std_logic;
signal first_block: std_logic;
signal final: std_logic;
signal filled: std_logic;
signal fcount: unsigned(3 downto 0);
signal dwleaf: unsigned(18 downto 0);
signal drleaf: unsigned(18 downto 0);
signal doo: unsigned(2 downto 0);
signal do_init: std_logic;
signal do_compress: std_logic;
signal do: unsigned(23 downto 0);
signal dlwaddr: unsigned(14 downto 0);
signal dlraddr: unsigned(14 downto 0);
signal dlength: unsigned(9 downto 0);
signal dio: unsigned(2 downto 0);
signal di: unsigned(23 downto 0);
signal d_maxBits: unsigned(3 downto 0);
signal d_instantMaxBit: unsigned(3 downto 0);
signal d_instantMask: unsigned(14 downto 0);
signal cur_static: unsigned(8 downto 0);
signal cur_search: signed (24 downto 0);
signal cur_next: unsigned(4 downto 0);
signal cur_i: unsigned(23 downto 0);
signal cur_dist: signed (9 downto 0);
signal cur_cstatic: unsigned(3 downto 0);
signal cur_HF1: unsigned(15 downto 0);
signal copy2: unsigned(7 downto 0);
signal copy1: unsigned(7 downto 0);
signal code: unsigned(14 downto 0);
signal bits: unsigned(3 downto 0);
signal b_numCodeLength: unsigned(8 downto 0);
signal b9: unsigned(7 downto 0);
signal b8: unsigned(7 downto 0);
signal b7: unsigned(7 downto 0);
signal b6: unsigned(7 downto 0);
signal b5: unsigned(7 downto 0);
signal b41: unsigned(31 downto 0);
signal b4: unsigned(7 downto 0);
signal b3: unsigned(7 downto 0);
signal b2: unsigned(7 downto 0);
signal b15: unsigned(39 downto 0);
signal b14: unsigned(31 downto 0);
signal b110: unsigned(79 downto 0);
signal b10: unsigned(7 downto 0);
signal b1: unsigned(7 downto 0);
signal adler2: unsigned(15 downto 0);
signal adler1: unsigned(15 downto 0);
signal cwindow: unsigned(255 downto 0);
type t_array_oram is array(0 to 512-1) of unsigned(7 downto 0);
signal oram: t_array_oram;
type t_array_nextCode is array(0 to 16-1) of unsigned(15 downto 0);
signal nextCode: t_array_nextCode;
type t_array_leaves is array(0 to 32768-1) of unsigned(18 downto 0);
signal leaves: t_array_leaves;
type t_array_iram is array(0 to 512-1) of unsigned(7 downto 0);
signal iram: t_array_iram;
type t_array_distanceLength is array(0 to 32-1) of unsigned(3 downto 0);
signal distanceLength: t_array_distanceLength;
type t_array_d_leaves is array(0 to 4096-1) of unsigned(18 downto 0);
signal d_leaves: t_array_d_leaves;
type t_array_codeLength is array(0 to 320-1) of unsigned(3 downto 0);
signal codeLength: t_array_codeLength;
type t_array_bitLengthCount is array(0 to 16-1) of unsigned(8 downto 0);
signal bitLengthCount: t_array_bitLengthCount;
type t_array_smatch is array(0 to 32-1) of std_logic;
signal smatch: t_array_smatch;

function MYHDL203_get4(
    boffset: in std_logic;
    width: in std_logic
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL203_get4;

function MYHDL204_get4(
    boffset: in std_logic;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL204_get4;

procedure MYHDL205_adv(
    width: in natural) is
    variable nshift: integer;
begin
    if (not True) then
        assert False report "End of Simulation" severity Failure;
    end if;
    nshift := to_integer(shift_right((dio + width), 3));
    o_iprogress <= di;
    dio <= ((dio + width) and to_unsigned(7, 3));
    di <= resize(unsigned(signed(resize(di, 25)) + nshift), 24);
    if (nshift /= 0) then
        filled <= '0';
    end if;
end procedure MYHDL205_adv;

procedure MYHDL206_adv(
    width: in natural) is
    variable nshift: integer;
begin
    if (not True) then
        assert False report "End of Simulation" severity Failure;
    end if;
    nshift := to_integer(shift_right((dio + width), 3));
    o_iprogress <= di;
    dio <= ((dio + width) and to_unsigned(7, 3));
    di <= resize(unsigned(signed(resize(di, 25)) + nshift), 24);
    if (nshift /= 0) then
        filled <= '0';
    end if;
end procedure MYHDL206_adv;

function MYHDL207_get4(
    boffset: in integer;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(signed(resize(dio, 4)) + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL207_get4;

procedure MYHDL208_adv(
    width: in integer) is
    variable nshift: integer;
begin
    if (not True) then
        assert False report "End of Simulation" severity Failure;
    end if;
    nshift := to_integer(shift_right((signed(resize(dio, 4)) + width), 3));
    o_iprogress <= di;
    dio <= resize(unsigned(((signed(resize(dio, 4)) + width) and to_signed(7, 4))), 3);
    di <= resize(unsigned(signed(resize(di, 25)) + nshift), 24);
    if (nshift /= 0) then
        filled <= '0';
    end if;
end procedure MYHDL208_adv;

procedure MYHDL209_adv(
    width: in natural) is
    variable nshift: integer;
begin
    if (not True) then
        assert False report "End of Simulation" severity Failure;
    end if;
    nshift := to_integer(shift_right((dio + width), 3));
    o_iprogress <= di;
    dio <= ((dio + width) and to_unsigned(7, 3));
    di <= resize(unsigned(signed(resize(di, 25)) + nshift), 24);
    if (nshift /= 0) then
        filled <= '0';
    end if;
end procedure MYHDL209_adv;

procedure MYHDL210_put(
    d: in natural;
    width: in natural) is
    variable pshift: std_logic;
    variable carry: integer;
    variable doo_next: integer;
begin
    if (width > 9) then
        assert False report "End of Simulation" severity Failure;
    end if;
    if (d > (shift_left(1, width) - 1)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    obyte <= ((ob1 or to_unsigned(shift_left(d, to_integer(doo)), 8)) and to_unsigned(255, 8));
    oaddr <= resize(do, 9);
    pshift := stdl((doo + width) > 8);
    if bool(pshift) then
        carry := to_integer(width - (8 - signed(resize(doo, 4))));
        ob1 <= to_unsigned(shift_right(d, (width - carry)), 8);
    else
        ob1 <= (ob1 or to_unsigned(shift_left(d, to_integer(doo)), 8));
    end if;
    do <= (do + to_unsigned(pshift, 1));
    o_oprogress <= (do + to_unsigned(pshift, 1));
    doo_next := to_integer(((doo + width) and to_unsigned(7, 3)));
    if (doo_next = 0) then
        flush <= '1';
    end if;
    doo <= to_unsigned(doo_next, 3);
end procedure MYHDL210_put;

procedure MYHDL211_do_flush is
begin
    flush <= '0';
    ob1 <= to_unsigned(0, 8);
    o_oprogress <= (do + 1);
    do <= (do + 1);
end procedure MYHDL211_do_flush;

procedure MYHDL212_put(
    d: in integer;
    signal width: in unsigned) is
    variable pshift: std_logic;
    variable carry: integer;
    variable doo_next: integer;
begin
    if (width > 9) then
        assert False report "End of Simulation" severity Failure;
    end if;
    if (d > (shift_left(1, width) - 1)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    obyte <= ((ob1 or to_unsigned(shift_left(d, to_integer(doo)), 8)) and to_unsigned(255, 8));
    oaddr <= resize(do, 9);
    pshift := stdl((doo + width) > 8);
    if bool(pshift) then
        carry := to_integer(width - (8 - signed(resize(doo, 4))));
        ob1 <= to_unsigned(shift_right(d, to_integer(width - carry)), 8);
    else
        ob1 <= (ob1 or to_unsigned(shift_left(d, to_integer(doo)), 8));
    end if;
    do <= (do + to_unsigned(pshift, 1));
    o_oprogress <= (do + to_unsigned(pshift, 1));
    doo_next := to_integer(((doo + width) and to_unsigned(7, 4)));
    if (doo_next = 0) then
        flush <= '1';
    end if;
    doo <= to_unsigned(doo_next, 3);
end procedure MYHDL212_put;

procedure MYHDL213_do_flush is
begin
    flush <= '0';
    ob1 <= to_unsigned(0, 8);
    o_oprogress <= (do + 1);
    do <= (do + 1);
end procedure MYHDL213_do_flush;

procedure MYHDL214_put(
    d: in integer;
    signal width: in unsigned) is
    variable pshift: std_logic;
    variable carry: integer;
    variable doo_next: integer;
begin
    if (width > 9) then
        assert False report "End of Simulation" severity Failure;
    end if;
    if (d > (shift_left(1, width) - 1)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    obyte <= ((ob1 or to_unsigned(shift_left(d, to_integer(doo)), 8)) and to_unsigned(255, 8));
    oaddr <= resize(do, 9);
    pshift := stdl((doo + width) > 8);
    if bool(pshift) then
        carry := to_integer(width - (8 - signed(resize(doo, 4))));
        ob1 <= to_unsigned(shift_right(d, to_integer(width - carry)), 8);
    else
        ob1 <= (ob1 or to_unsigned(shift_left(d, to_integer(doo)), 8));
    end if;
    do <= (do + to_unsigned(pshift, 1));
    o_oprogress <= (do + to_unsigned(pshift, 1));
    doo_next := to_integer(((doo + width) and to_unsigned(7, 4)));
    if (doo_next = 0) then
        flush <= '1';
    end if;
    doo <= to_unsigned(doo_next, 3);
end procedure MYHDL214_put;

procedure MYHDL215_put(
    signal d: in unsigned;
    signal width: in unsigned) is
    variable pshift: std_logic;
    variable carry: integer;
    variable doo_next: integer;
begin
    if (width > 9) then
        assert False report "End of Simulation" severity Failure;
    end if;
    if (d > (shift_left(1, width) - 1)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    obyte <= resize(((resize(ob1, 9) or shift_left(d, to_integer(doo))) and to_unsigned(255, 9)), 8);
    oaddr <= resize(do, 9);
    pshift := stdl((doo + width) > 8);
    if bool(pshift) then
        carry := to_integer(width - (8 - signed(resize(doo, 4))));
        ob1 <= resize(shift_right(d, to_integer(width - carry)), 8);
    else
        ob1 <= resize((resize(ob1, 9) or shift_left(d, to_integer(doo))), 8);
    end if;
    do <= (do + to_unsigned(pshift, 1));
    o_oprogress <= (do + to_unsigned(pshift, 1));
    doo_next := to_integer(((doo + width) and to_unsigned(7, 4)));
    if (doo_next = 0) then
        flush <= '1';
    end if;
    doo <= to_unsigned(doo_next, 3);
end procedure MYHDL215_put;

function MYHDL216_rev_bits(
    b: in unsigned;
    nb: in natural
    ) return integer is
    variable L: line;
    variable r: integer;
begin
    if (b >= shift_left(1, nb)) then
        assert False report "End of Simulation" severity Failure;
        write(L, string'("too few bits"));
        writeline(output, L);
    end if;
    if (nb > 15) then
        assert False report "End of Simulation" severity Failure;
    end if;
    r := to_integer(((((((((((((((shift_left((shift_right(b, 14) and to_unsigned(1, 24)), 0) or shift_left((shift_right(b, 13) and to_unsigned(1, 24)), 1)) or shift_left((shift_right(b, 12) and to_unsigned(1, 24)), 2)) or shift_left((shift_right(b, 11) and to_unsigned(1, 24)), 3)) or shift_left((shift_right(b, 10) and to_unsigned(1, 24)), 4)) or shift_left((shift_right(b, 9) and to_unsigned(1, 24)), 5)) or shift_left((shift_right(b, 8) and to_unsigned(1, 24)), 6)) or shift_left((shift_right(b, 7) and to_unsigned(1, 24)), 7)) or shift_left((shift_right(b, 6) and to_unsigned(1, 24)), 8)) or shift_left((shift_right(b, 5) and to_unsigned(1, 24)), 9)) or shift_left((shift_right(b, 4) and to_unsigned(1, 24)), 10)) or shift_left((shift_right(b, 3) and to_unsigned(1, 24)), 11)) or shift_left((shift_right(b, 2) and to_unsigned(1, 24)), 12)) or shift_left((shift_right(b, 1) and to_unsigned(1, 24)), 13)) or shift_left((shift_right(b, 0) and to_unsigned(1, 24)), 14)));
    r := shift_right(r, (15 - nb));
    return r;
end function MYHDL216_rev_bits;

procedure MYHDL217_put(
    d: in integer;
    width: in integer) is
    variable pshift: std_logic;
    variable carry: integer;
    variable doo_next: integer;
begin
    if (width > 9) then
        assert False report "End of Simulation" severity Failure;
    end if;
    if (d > (shift_left(1, width) - 1)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    obyte <= ((ob1 or to_unsigned(shift_left(d, to_integer(doo)), 8)) and to_unsigned(255, 8));
    oaddr <= resize(do, 9);
    pshift := stdl((signed(resize(doo, 4)) + width) > 8);
    if bool(pshift) then
        carry := to_integer(width - (8 - signed(resize(doo, 4))));
        ob1 <= to_unsigned(shift_right(d, (width - carry)), 8);
    else
        ob1 <= (ob1 or to_unsigned(shift_left(d, to_integer(doo)), 8));
    end if;
    do <= (do + to_unsigned(pshift, 1));
    o_oprogress <= (do + to_unsigned(pshift, 1));
    doo_next := to_integer(((signed(resize(doo, 4)) + width) and to_signed(7, 4)));
    if (doo_next = 0) then
        flush <= '1';
    end if;
    doo <= to_unsigned(doo_next, 3);
end procedure MYHDL217_put;

procedure MYHDL218_put(
    d: in integer;
    width: in natural) is
    variable pshift: std_logic;
    variable carry: integer;
    variable doo_next: integer;
begin
    if (width > 9) then
        assert False report "End of Simulation" severity Failure;
    end if;
    if (d > (shift_left(1, width) - 1)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    obyte <= ((ob1 or to_unsigned(shift_left(d, to_integer(doo)), 8)) and to_unsigned(255, 8));
    oaddr <= resize(do, 9);
    pshift := stdl((doo + width) > 8);
    if bool(pshift) then
        carry := to_integer(width - (8 - signed(resize(doo, 4))));
        ob1 <= to_unsigned(shift_right(d, (width - carry)), 8);
    else
        ob1 <= (ob1 or to_unsigned(shift_left(d, to_integer(doo)), 8));
    end if;
    do <= (do + to_unsigned(pshift, 1));
    o_oprogress <= (do + to_unsigned(pshift, 1));
    doo_next := to_integer(((doo + width) and to_unsigned(7, 3)));
    if (doo_next = 0) then
        flush <= '1';
    end if;
    doo <= to_unsigned(doo_next, 3);
end procedure MYHDL218_put;

procedure MYHDL221_put(
    d: in integer;
    signal width: in unsigned) is
    variable pshift: std_logic;
    variable carry: integer;
    variable doo_next: integer;
begin
    if (width > 9) then
        assert False report "End of Simulation" severity Failure;
    end if;
    if (d > (shift_left(1, width) - 1)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    obyte <= ((ob1 or to_unsigned(shift_left(d, to_integer(doo)), 8)) and to_unsigned(255, 8));
    oaddr <= resize(do, 9);
    pshift := stdl((doo + width) > 8);
    if bool(pshift) then
        carry := to_integer(width - (8 - signed(resize(doo, 4))));
        ob1 <= to_unsigned(shift_right(d, to_integer(width - carry)), 8);
    else
        ob1 <= (ob1 or to_unsigned(shift_left(d, to_integer(doo)), 8));
    end if;
    do <= (do + to_unsigned(pshift, 1));
    o_oprogress <= (do + to_unsigned(pshift, 1));
    doo_next := to_integer(((doo + width) and to_unsigned(7, 4)));
    if (doo_next = 0) then
        flush <= '1';
    end if;
    doo <= to_unsigned(doo_next, 3);
end procedure MYHDL221_put;

function MYHDL230_get4(
    boffset: in std_logic;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL230_get4;

function MYHDL231_get4(
    boffset: in std_logic;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL231_get4;

function MYHDL232_get4(
    boffset: in natural;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL232_get4;

function MYHDL233_get4(
    boffset: in natural;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL233_get4;

function MYHDL234_get4(
    boffset: in natural;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL234_get4;

function MYHDL235_get4(
    boffset: in natural;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL235_get4;

procedure MYHDL236_adv(
    width: in natural) is
    variable nshift: integer;
begin
    if (not True) then
        assert False report "End of Simulation" severity Failure;
    end if;
    nshift := to_integer(shift_right((dio + width), 3));
    o_iprogress <= di;
    dio <= ((dio + width) and to_unsigned(7, 3));
    di <= resize(unsigned(signed(resize(di, 25)) + nshift), 24);
    if (nshift /= 0) then
        filled <= '0';
    end if;
end procedure MYHDL236_adv;

function MYHDL237_get4(
    boffset: in std_logic;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL237_get4;

procedure MYHDL238_adv(
    width: in natural) is
    variable nshift: integer;
begin
    if (not True) then
        assert False report "End of Simulation" severity Failure;
    end if;
    nshift := to_integer(shift_right((dio + width), 3));
    o_iprogress <= di;
    dio <= ((dio + width) and to_unsigned(7, 3));
    di <= resize(unsigned(signed(resize(di, 25)) + nshift), 24);
    if (nshift /= 0) then
        filled <= '0';
    end if;
end procedure MYHDL238_adv;

function MYHDL239_get4(
    boffset: in std_logic;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL239_get4;

function MYHDL240_get4(
    boffset: in std_logic;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL240_get4;

function MYHDL241_get4(
    boffset: in std_logic;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL241_get4;

procedure MYHDL242_adv(
    width: in natural) is
    variable nshift: integer;
begin
    if (not True) then
        assert False report "End of Simulation" severity Failure;
    end if;
    nshift := to_integer(shift_right((dio + width), 3));
    o_iprogress <= di;
    dio <= ((dio + width) and to_unsigned(7, 3));
    di <= resize(unsigned(signed(resize(di, 25)) + nshift), 24);
    if (nshift /= 0) then
        filled <= '0';
    end if;
end procedure MYHDL242_adv;

function MYHDL247_rev_bits(
    b: in unsigned;
    nb: in unsigned
    ) return integer is
    variable L: line;
    variable r: integer;
begin
    if (b >= shift_left(1, nb)) then
        assert False report "End of Simulation" severity Failure;
        write(L, string'("too few bits"));
        writeline(output, L);
    end if;
    if (nb > 15) then
        assert False report "End of Simulation" severity Failure;
    end if;
    r := to_integer(((((((((((((((shift_left((shift_right(b, 14) and to_unsigned(1, 16)), 0) or shift_left((shift_right(b, 13) and to_unsigned(1, 16)), 1)) or shift_left((shift_right(b, 12) and to_unsigned(1, 16)), 2)) or shift_left((shift_right(b, 11) and to_unsigned(1, 16)), 3)) or shift_left((shift_right(b, 10) and to_unsigned(1, 16)), 4)) or shift_left((shift_right(b, 9) and to_unsigned(1, 16)), 5)) or shift_left((shift_right(b, 8) and to_unsigned(1, 16)), 6)) or shift_left((shift_right(b, 7) and to_unsigned(1, 16)), 7)) or shift_left((shift_right(b, 6) and to_unsigned(1, 16)), 8)) or shift_left((shift_right(b, 5) and to_unsigned(1, 16)), 9)) or shift_left((shift_right(b, 4) and to_unsigned(1, 16)), 10)) or shift_left((shift_right(b, 3) and to_unsigned(1, 16)), 11)) or shift_left((shift_right(b, 2) and to_unsigned(1, 16)), 12)) or shift_left((shift_right(b, 1) and to_unsigned(1, 16)), 13)) or shift_left((shift_right(b, 0) and to_unsigned(1, 16)), 14)));
    r := shift_right(r, to_integer(15 - nb));
    return r;
end function MYHDL247_rev_bits;

function MYHDL248_makeLeaf(
    lcode: in unsigned;
    lbits: in unsigned
    ) return integer is
begin
    if (lcode >= shift_left(1, 15)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    if (lbits >= shift_left(1, 4)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    return to_integer((shift_left(lcode, 4) or lbits));
end function MYHDL248_makeLeaf;

function MYHDL249_makeLeaf(
    lcode: in unsigned;
    lbits: in unsigned
    ) return integer is
begin
    if (lcode >= shift_left(1, 15)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    if (lbits >= shift_left(1, 4)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    return to_integer((shift_left(lcode, 4) or lbits));
end function MYHDL249_makeLeaf;

function MYHDL250_makeLeaf(
    lcode: in unsigned;
    lbits: in unsigned
    ) return integer is
begin
    if (lcode >= shift_left(1, 15)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    if (lbits >= shift_left(1, 4)) then
        assert False report "End of Simulation" severity Failure;
    end if;
    return to_integer((shift_left(lcode, 4) or lbits));
end function MYHDL250_makeLeaf;

function MYHDL251_get4(
    boffset: in std_logic;
    width: in unsigned
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL251_get4;

function MYHDL252_get_bits(
    aleaf: in unsigned
    ) return integer is
begin
    return to_integer((aleaf and to_unsigned(shift_left(1, 4) - 1, 19)));
end function MYHDL252_get_bits;

function MYHDL253_get4(
    boffset: in std_logic;
    width: in unsigned
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL253_get4;

function MYHDL254_get_bits(
    aleaf: in unsigned
    ) return integer is
begin
    return to_integer((aleaf and to_unsigned(shift_left(1, 4) - 1, 19)));
end function MYHDL254_get_bits;

function MYHDL255_get_bits(
    aleaf: in unsigned
    ) return integer is
begin
    return to_integer((aleaf and to_unsigned(shift_left(1, 4) - 1, 19)));
end function MYHDL255_get_bits;

procedure MYHDL256_adv(
    width: in integer) is
    variable nshift: integer;
begin
    if (not True) then
        assert False report "End of Simulation" severity Failure;
    end if;
    nshift := to_integer(shift_right((signed(resize(dio, 4)) + width), 3));
    o_iprogress <= di;
    dio <= resize(unsigned(((signed(resize(dio, 4)) + width) and to_signed(7, 4))), 3);
    di <= resize(unsigned(signed(resize(di, 25)) + nshift), 24);
    if (nshift /= 0) then
        filled <= '0';
    end if;
end procedure MYHDL256_adv;

function MYHDL257_get_code(
    aleaf: in unsigned
    ) return integer is
begin
    return to_integer(shift_right(aleaf, 4));
end function MYHDL257_get_code;

function MYHDL258_get4(
    boffset: in integer;
    width: in unsigned
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(signed(resize(dio, 4)) + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL258_get4;

function MYHDL259_get_bits(
    aleaf: in unsigned
    ) return integer is
begin
    return to_integer((aleaf and to_unsigned(shift_left(1, 4) - 1, 19)));
end function MYHDL259_get_bits;

function MYHDL260_get4(
    boffset: in integer;
    width: in unsigned
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(signed(resize(dio, 4)) + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL260_get4;

function MYHDL261_get_bits(
    aleaf: in unsigned
    ) return integer is
begin
    return to_integer((aleaf and to_unsigned(shift_left(1, 4) - 1, 19)));
end function MYHDL261_get_bits;

function MYHDL262_get4(
    boffset: in std_logic;
    width: in integer
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL262_get4;

function MYHDL263_get_code(
    aleaf: in unsigned
    ) return integer is
begin
    return to_integer(shift_right(aleaf, 4));
end function MYHDL263_get_code;

function MYHDL264_get_bits(
    aleaf: in unsigned
    ) return integer is
begin
    return to_integer((aleaf and to_unsigned(shift_left(1, 4) - 1, 19)));
end function MYHDL264_get_bits;

function MYHDL265_get4(
    boffset: in integer;
    width: in integer
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(signed(resize(dio, 4)) + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL265_get4;

function MYHDL266_get_bits(
    aleaf: in unsigned
    ) return integer is
begin
    return to_integer((aleaf and to_unsigned(shift_left(1, 4) - 1, 19)));
end function MYHDL266_get_bits;

procedure MYHDL267_adv(
    width: in integer) is
    variable nshift: integer;
begin
    if (not True) then
        assert False report "End of Simulation" severity Failure;
    end if;
    nshift := to_integer(shift_right((signed(resize(dio, 4)) + width), 3));
    o_iprogress <= di;
    dio <= resize(unsigned(((signed(resize(dio, 4)) + width) and to_signed(7, 4))), 3);
    di <= resize(unsigned(signed(resize(di, 25)) + nshift), 24);
    if (nshift /= 0) then
        filled <= '0';
    end if;
end procedure MYHDL267_adv;

function MYHDL268_get4(
    boffset: in std_logic;
    width: in integer
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(dio + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL268_get4;

function MYHDL269_get4(
    boffset: in integer;
    width: in natural
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(signed(resize(dio, 4)) + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL269_get4;

function MYHDL270_rev_bits(
    b: in natural;
    nb: in natural
    ) return integer is
    variable L: line;
    variable r: integer;
begin
    if (b >= shift_left(1, nb)) then
        assert False report "End of Simulation" severity Failure;
        write(L, string'("too few bits"));
        writeline(output, L);
    end if;
    if (nb > 15) then
        assert False report "End of Simulation" severity Failure;
    end if;
    r := ((((((((((((((shift_left((shift_right(b, 14) and 1), 0) or shift_left((shift_right(b, 13) and 1), 1)) or shift_left((shift_right(b, 12) and 1), 2)) or shift_left((shift_right(b, 11) and 1), 3)) or shift_left((shift_right(b, 10) and 1), 4)) or shift_left((shift_right(b, 9) and 1), 5)) or shift_left((shift_right(b, 8) and 1), 6)) or shift_left((shift_right(b, 7) and 1), 7)) or shift_left((shift_right(b, 6) and 1), 8)) or shift_left((shift_right(b, 5) and 1), 9)) or shift_left((shift_right(b, 4) and 1), 10)) or shift_left((shift_right(b, 3) and 1), 11)) or shift_left((shift_right(b, 2) and 1), 12)) or shift_left((shift_right(b, 1) and 1), 13)) or shift_left((shift_right(b, 0) and 1), 14));
    r := shift_right(r, (15 - nb));
    return r;
end function MYHDL270_rev_bits;

function MYHDL271_get4(
    boffset: in integer;
    width: in integer
    ) return integer is
begin
    return to_integer((shift_right(b41, to_integer(signed(resize(dio, 4)) + boffset)) and to_unsigned(shift_left(1, width) - 1, 32)));
end function MYHDL271_get4;

procedure MYHDL272_adv(
    width: in integer) is
    variable nshift: integer;
begin
    if (not True) then
        assert False report "End of Simulation" severity Failure;
    end if;
    nshift := to_integer(shift_right((signed(resize(dio, 4)) + width), 3));
    o_iprogress <= di;
    dio <= resize(unsigned(((signed(resize(dio, 4)) + width) and to_signed(7, 4))), 3);
    di <= resize(unsigned(signed(resize(di, 25)) + nshift), 24);
    if (nshift /= 0) then
        filled <= '0';
    end if;
end procedure MYHDL272_adv;

begin


irbyte <= to_unsigned(0, 8);

b15(40-1 downto 32) <= b1;
b15(32-1 downto 24) <= b2;
b15(24-1 downto 16) <= b3;
b15(16-1 downto 8) <= b4;
b15(8-1 downto 0) <= b5;
b14(32-1 downto 24) <= b1;
b14(24-1 downto 16) <= b2;
b14(16-1 downto 8) <= b3;
b14(8-1 downto 0) <= b4;
b110(80-1 downto 72) <= b1;
b110(72-1 downto 64) <= b2;
b110(64-1 downto 56) <= b3;
b110(56-1 downto 48) <= b4;
b110(48-1 downto 40) <= b5;
b110(40-1 downto 32) <= b6;
b110(32-1 downto 24) <= b7;
b110(24-1 downto 16) <= b8;
b110(16-1 downto 8) <= b9;
b110(8-1 downto 0) <= b10;

DEFLATE_BRAMWRITE: process (clk) is
begin
    if rising_edge(clk) then
        oram(to_integer(oaddr)) <= obyte;
        if True then
            leaves(to_integer(lwaddr)) <= wleaf;
            d_leaves(to_integer(dlwaddr)) <= dwleaf;
        end if;
    end if;
end process DEFLATE_BRAMWRITE;

DEFLATE_BRAMREAD: process (clk) is
begin
    if rising_edge(clk) then
        orbyte <= oram(to_integer(oraddr));
    end if;
end process DEFLATE_BRAMREAD;

DEFLATE_RLEAFREAD: process (clk) is
begin
    if rising_edge(clk) then
        rleaf <= leaves(to_integer(lraddr));
        drleaf <= d_leaves(to_integer(dlraddr));
    end if;
end process DEFLATE_RLEAFREAD;


smatch(0) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 0)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(1) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 1)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(2) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 2)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(3) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 3)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(4) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 4)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(5) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 5)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(6) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 6)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(7) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 7)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(8) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 8)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(9) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 9)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(10) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 10)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(11) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 11)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(12) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 12)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(13) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 13)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(14) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 14)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(15) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 15)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(16) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 16)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(17) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 17)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(18) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 18)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(19) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 19)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(20) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 20)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(21) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 21)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(22) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 22)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(23) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 23)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(24) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 24)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(25) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 25)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(26) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 26)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(27) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 27)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(28) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 28)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(29) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 29)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(30) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 30)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));


smatch(31) <= stdl((shift_right(unsigned'(cwindow & b1 & b2), (8 * 31)) and to_unsigned(16777215, 272)) = shift_right(b14, 8));

DEFLATE_FILL_BUF: process (clk) is
    variable L: line;
    variable shift: integer;
    variable rb: unsigned(7 downto 0);
begin
    if rising_edge(clk) then
        if (not bool(reset)) then
            write(L, string'("FILL RESET"));
            writeline(output, L);
            nb <= '0';
        else
            if (isize < 4) then
                nb <= '0';
                if True then
                    old_di <= to_unsigned(0, 24);
                end if;
            elsif ((i_mode = 4) or (i_mode = 5)) then
                nb <= '0';
                if True then
                    old_di <= to_unsigned(0, 24);
                end if;
            else
                -- if do_compress:
                --     print("FILL", di, old_di, nb, b1, b2, b3, b4)
                if True then
                    shift := to_integer((signed(resize(di, 25)) - signed(resize(old_di, 25))) * 8);
                    -- if shift != 0:
                    --     print("shift", shift, cwindow, b1, b2, b3, b4)
                    if True then
                        cwindow <= (shift_left(cwindow, shift) or shift_right(resize(b110, 256), (80 - shift)));
                    else
                        cwindow <= (shift_left(cwindow, shift) or shift_right(resize(b15, 256), (40 - shift)));
                    end if;
                end if;
                if (not False) then
                    b1 <= iram(to_integer((di and to_unsigned(511, 24))));
                    b2 <= iram(to_integer(((di + 1) and to_unsigned(511, 24))));
                    b3 <= iram(to_integer(((di + 2) and to_unsigned(511, 24))));
                end if;
                if (old_di = di) then
                    -- if fcount < 9:
                    --     print("fcount", fcount)
                    rb := irbyte;
                    if False then
                        if (fcount >= 4) then
                            nb <= '1';
                        end if;
                    else
                        rb := iram(to_integer(((di + fcount) and to_unsigned(511, 24))));
                        nb <= '1';
                    end if;
                    if False then
                        fcount <= rcount;
                        if (rcount = 1) then
                            b1 <= rb;
                        elsif (rcount = 2) then
                            b2 <= rb;
                        elsif (rcount = 3) then
                            b3 <= rb;
                        elsif (rcount = 4) then
                            b4 <= rb;
                        elsif (rcount = 5) then
                            b5 <= rb;
                        end if;
                        if (rcount < 5) then
                            rcount <= (rcount + 1);
                        end if;
                    elsif (fcount = 4) then
                        b5 <= rb;
                        fcount <= to_unsigned(5, 4);
                    elsif True then
                        if (fcount = 5) then
                            b6 <= rb;
                        elsif (fcount = 6) then
                            b7 <= rb;
                        elsif (fcount = 7) then
                            b8 <= rb;
                        elsif (fcount = 8) then
                            b9 <= rb;
                        elsif (fcount = 9) then
                            b10 <= rb;
                        end if;
                        if (fcount < 10) then
                            fcount <= (fcount + 1);
                        end if;
                    end if;
                else
                    if False then
                        rcount <= to_unsigned(0, 4);
                        fcount <= to_unsigned(0, 4);
                    else
                        fcount <= to_unsigned(4, 4);
                        b4 <= iram(to_integer(((di + 3) and to_unsigned(511, 24))));
                    end if;
                end if;
                old_di <= di;
            end if;
        end if;
    end if;
end process DEFLATE_FILL_BUF;

DEFLATE_IO_LOGIC: process (clk) is
begin
    if rising_edge(clk) then
        o_byte <= oram(to_integer((i_raddr and to_unsigned(511, 9))));
        if (i_mode = 2) then
            iram(to_integer((i_waddr and to_unsigned(511, 9)))) <= i_data;
            isize <= resize(i_waddr, 24);
        end if;
    end if;
end process DEFLATE_IO_LOGIC;

DEFLATE_LOGIC: process (clk) is
    variable L: line;
    variable hm: integer;
    variable skip: integer;
    variable cs_i: natural;
    variable outlen: unsigned(3 downto 0);
    variable outbits: integer;
    variable bdata: unsigned(7 downto 0);
    variable adler1_next: integer;
    variable lencode: integer;
    variable nextdist: integer;
    variable copydist: integer;
    variable extra_dist: integer;
    variable extra_bits: integer;
    variable outcode: integer;
    variable lfmatch: unsigned(9 downto 0);
    variable distance: integer;
    variable fmatch2: integer;
    variable match: natural;
    variable mdone: std_logic;
    variable found: std_logic;
    variable fmatch: integer;
    variable mlimit: natural;
    variable cbyte: unsigned(7 downto 0);
    variable clo_i: integer;
    variable n_adv: natural;
    variable dbl: integer;
    variable limit: natural;
    variable j: unsigned(3 downto 0);
    variable t: natural;
    variable amb: unsigned(3 downto 0);
    variable ncode: integer;
    variable canonical: unsigned(15 downto 0);
    variable bits_next: unsigned(3 downto 0);
    variable aim: unsigned(14 downto 0);
    variable cto: integer;
    variable mask: integer;
    variable the_leaf: unsigned(18 downto 0);
    variable token: integer;
    variable extraLength: integer;
    variable tlength: integer;
    variable distanceCode: integer;
    variable moreBits: integer;
    variable mored: integer;
begin
    if rising_edge(clk) then
        if (not bool(reset)) then
            write(L, string'("DEFLATE RESET"));
            writeline(output, L);
            state <= IDLE;
            o_done <= '0';
        else
            case state is
                when IDLE =>
                    if (True and (i_mode = 4)) then
                        write(L, string'("STARTC"));
                        writeline(output, L);
                        do_compress <= '1';
                        o_done <= '0';
                        o_iprogress <= to_unsigned(0, 24);
                        o_oprogress <= to_unsigned(0, 24);
                        di <= to_unsigned(0, 24);
                        dio <= to_unsigned(0, 3);
                        do <= to_unsigned(0, 24);
                        doo <= to_unsigned(0, 3);
                        filled <= '1';
                        cur_static <= to_unsigned(0, 9);
                        cur_cstatic <= to_unsigned(0, 4);
                        state <= STATIC;
                    elsif (True and (i_mode = 5)) then
                        maxBits <= to_unsigned(9, 4);
                        instantMaxBit <= to_unsigned(9, 4);
                        prev_method <= to_unsigned(3, 2);
                        do_compress <= '0';
                        o_done <= '0';
                        o_iprogress <= to_unsigned(0, 24);
                        o_oprogress <= to_unsigned(0, 24);
                        di <= to_unsigned(2, 24);
                        dio <= to_unsigned(0, 3);
                        do <= to_unsigned(0, 24);
                        doo <= to_unsigned(0, 3);
                        filled <= '1';
                        first_block <= '1';
                        state <= HEADER;
                    else
                        null;
                    end if;
                when HEADER =>
                    if (not True) then
                        null;
                    elsif (not bool(filled)) then
                        filled <= '1';
                    elsif (not bool(nb)) then
                        null;
                    elsif (False and bool(first_block)) then
                        first_block <= '0';
                        if (b1 = 120) then
                            write(L, string'("deflate mode"));
                            writeline(output, L);
                        else
                            write(L, to_hstring(di));
                            write(L, string'(" "));
                            write(L, to_hstring(dio));
                            write(L, string'(" "));
                            write(L, to_string(bool(nb)));
                            write(L, string'(" "));
                            write(L, to_hstring(b1));
                            write(L, string'(" "));
                            write(L, to_hstring(b2));
                            write(L, string'(" "));
                            write(L, to_hstring(b3));
                            write(L, string'(" "));
                            write(L, to_hstring(b4));
                            write(L, string'(" "));
                            write(L, to_hstring(isize));
                            writeline(output, L);
                            assert False report "End of Simulation" severity Failure;
                            o_done <= '1';
                            state <= IDLE;
                        end if;
                    else
                        if (not False) then
                            if bool(MYHDL203_get4(0, 1)) then
                                write(L, string'("final"));
                                writeline(output, L);
                                final <= '1';
                            else
                                final <= '0';
                            end if;
                        end if;
                        if True then
                            hm := MYHDL204_get4(1, 2);
                            method <= to_unsigned(hm, 3);
                            write(L, string'("method"));
                            write(L, string'(" "));
                            write(L, to_string(hm));
                            writeline(output, L);
                            case hm is
                                when 0 =>
                                    if (not True) then
                                        write(L, string'("dynamic tree mode disabled"));
                                        writeline(output, L);
                                        assert False report "End of Simulation" severity Failure;
                                    end if;
                                    state <= BL;
                                    numCodeLength <= to_unsigned(0, 9);
                                    numLiterals <= to_unsigned(0, 9);
                                    static <= '0';
                                    MYHDL205_adv(3);
                                when 1 =>
                                    static <= '1';
                                    cur_static <= to_unsigned(0, 9);
                                    write(L, string'("prev method is"));
                                    write(L, string'(" "));
                                    write(L, to_hstring(prev_method));
                                    writeline(output, L);
                                    if (prev_method = 1) then
                                        write(L, string'("skip HF init"));
                                        writeline(output, L);
                                        state <= NEXT;
                                        cur_next <= to_unsigned(0, 5);
                                    else
                                        state <= STATIC;
                                    end if;
                                    MYHDL206_adv(3);
                                when 2 =>
                                    state <= COPY;
                                    skip := to_integer(8 - dio);
                                    if (skip <= 2) then
                                        skip := to_integer(16 - dio);
                                    end if;
                                    length <= to_unsigned(MYHDL207_get4(skip, 16), 9);
                                    MYHDL208_adv((skip + 16));
                                    cur_i <= to_unsigned(0, 24);
                                    offset <= to_unsigned(7, 9);
                                when others =>
                                    state <= IDLE;
                                    write(L, string'("Bad method"));
                                    writeline(output, L);
                                    assert False report "End of Simulation" severity Failure;
                            end case;
                            prev_method <= to_unsigned(hm, 2);
                            write(L, string'("set prev"));
                            write(L, string'(" "));
                            write(L, to_string(hm));
                            writeline(output, L);
                        else
                            method <= to_unsigned(1, 3);
                            cur_next <= to_unsigned(0, 5);
                            if False then
                                dio <= to_unsigned(3, 3);
                            else
                                MYHDL209_adv(3);
                            end if;
                            state <= NEXT;
                        end if;
                    end if;
                when CSTATIC =>
                    if (not True) then
                        null;
                    elsif (not bool(nb)) then
                        null;
                    elsif ((not True) and (not bool(filled))) then
                        filled <= '1';
                    elsif (False and (fcount = 0)) then
                        null;
                    elsif (cur_cstatic = 0) then
                        flush <= '0';
                        ob1 <= to_unsigned(0, 8);
                        adler1 <= to_unsigned(1, 16);
                        adler2 <= to_unsigned(0, 16);
                        ladler1 <= to_unsigned(0, 16);
                        oaddr <= to_unsigned(0, 9);
                        obyte <= to_unsigned(120, 8);
                        cur_cstatic <= to_unsigned(1, 4);
                    elsif (cur_cstatic = 1) then
                        oaddr <= to_unsigned(1, 9);
                        obyte <= to_unsigned(156, 8);
                        do <= to_unsigned(2, 24);
                        cur_cstatic <= to_unsigned(2, 4);
                    elsif (cur_cstatic = 2) then
                        MYHDL210_put(3, 3);
                        cur_cstatic <= to_unsigned(3, 4);
                    elsif bool(flush) then
                        oaddr <= resize(do, 9);
                        obyte <= ob1;
                        ;
                    elsif ((signed(resize(di, 25)) >= (signed(resize(isize, 25)) - 10)) and (i_mode /= 0)) then
                        write(L, string'("P"));
                        write(L, string'(" "));
                        write(L, to_hstring(di));
                        write(L, string'(" "));
                        write(L, to_hstring(isize));
                        writeline(output, L);
                        null;
                    elsif (di > isize) then
                        case cur_cstatic is
                            when "0011" =>
                                cur_cstatic <= to_unsigned(4, 4);
                                write(L, string'("Put EOF"));
                                write(L, string'(" "));
                                write(L, to_hstring(do));
                                writeline(output, L);
                                cs_i := 256;
                                outlen := codeLength(cs_i);
                                case cs_i is
                                    when 0 => outbits := 12;
                                    when 1 => outbits := 140;
                                    when 2 => outbits := 76;
                                    when 3 => outbits := 204;
                                    when 4 => outbits := 44;
                                    when 5 => outbits := 172;
                                    when 6 => outbits := 108;
                                    when 7 => outbits := 236;
                                    when 8 => outbits := 28;
                                    when 9 => outbits := 156;
                                    when 10 => outbits := 92;
                                    when 11 => outbits := 220;
                                    when 12 => outbits := 60;
                                    when 13 => outbits := 188;
                                    when 14 => outbits := 124;
                                    when 15 => outbits := 252;
                                    when 16 => outbits := 2;
                                    when 17 => outbits := 130;
                                    when 18 => outbits := 66;
                                    when 19 => outbits := 194;
                                    when 20 => outbits := 34;
                                    when 21 => outbits := 162;
                                    when 22 => outbits := 98;
                                    when 23 => outbits := 226;
                                    when 24 => outbits := 18;
                                    when 25 => outbits := 146;
                                    when 26 => outbits := 82;
                                    when 27 => outbits := 210;
                                    when 28 => outbits := 50;
                                    when 29 => outbits := 178;
                                    when 30 => outbits := 114;
                                    when 31 => outbits := 242;
                                    when 32 => outbits := 10;
                                    when 33 => outbits := 138;
                                    when 34 => outbits := 74;
                                    when 35 => outbits := 202;
                                    when 36 => outbits := 42;
                                    when 37 => outbits := 170;
                                    when 38 => outbits := 106;
                                    when 39 => outbits := 234;
                                    when 40 => outbits := 26;
                                    when 41 => outbits := 154;
                                    when 42 => outbits := 90;
                                    when 43 => outbits := 218;
                                    when 44 => outbits := 58;
                                    when 45 => outbits := 186;
                                    when 46 => outbits := 122;
                                    when 47 => outbits := 250;
                                    when 48 => outbits := 6;
                                    when 49 => outbits := 134;
                                    when 50 => outbits := 70;
                                    when 51 => outbits := 198;
                                    when 52 => outbits := 38;
                                    when 53 => outbits := 166;
                                    when 54 => outbits := 102;
                                    when 55 => outbits := 230;
                                    when 56 => outbits := 22;
                                    when 57 => outbits := 150;
                                    when 58 => outbits := 86;
                                    when 59 => outbits := 214;
                                    when 60 => outbits := 54;
                                    when 61 => outbits := 182;
                                    when 62 => outbits := 118;
                                    when 63 => outbits := 246;
                                    when 64 => outbits := 14;
                                    when 65 => outbits := 142;
                                    when 66 => outbits := 78;
                                    when 67 => outbits := 206;
                                    when 68 => outbits := 46;
                                    when 69 => outbits := 174;
                                    when 70 => outbits := 110;
                                    when 71 => outbits := 238;
                                    when 72 => outbits := 30;
                                    when 73 => outbits := 158;
                                    when 74 => outbits := 94;
                                    when 75 => outbits := 222;
                                    when 76 => outbits := 62;
                                    when 77 => outbits := 190;
                                    when 78 => outbits := 126;
                                    when 79 => outbits := 254;
                                    when 80 => outbits := 1;
                                    when 81 => outbits := 129;
                                    when 82 => outbits := 65;
                                    when 83 => outbits := 193;
                                    when 84 => outbits := 33;
                                    when 85 => outbits := 161;
                                    when 86 => outbits := 97;
                                    when 87 => outbits := 225;
                                    when 88 => outbits := 17;
                                    when 89 => outbits := 145;
                                    when 90 => outbits := 81;
                                    when 91 => outbits := 209;
                                    when 92 => outbits := 49;
                                    when 93 => outbits := 177;
                                    when 94 => outbits := 113;
                                    when 95 => outbits := 241;
                                    when 96 => outbits := 9;
                                    when 97 => outbits := 137;
                                    when 98 => outbits := 73;
                                    when 99 => outbits := 201;
                                    when 100 => outbits := 41;
                                    when 101 => outbits := 169;
                                    when 102 => outbits := 105;
                                    when 103 => outbits := 233;
                                    when 104 => outbits := 25;
                                    when 105 => outbits := 153;
                                    when 106 => outbits := 89;
                                    when 107 => outbits := 217;
                                    when 108 => outbits := 57;
                                    when 109 => outbits := 185;
                                    when 110 => outbits := 121;
                                    when 111 => outbits := 249;
                                    when 112 => outbits := 5;
                                    when 113 => outbits := 133;
                                    when 114 => outbits := 69;
                                    when 115 => outbits := 197;
                                    when 116 => outbits := 37;
                                    when 117 => outbits := 165;
                                    when 118 => outbits := 101;
                                    when 119 => outbits := 229;
                                    when 120 => outbits := 21;
                                    when 121 => outbits := 149;
                                    when 122 => outbits := 85;
                                    when 123 => outbits := 213;
                                    when 124 => outbits := 53;
                                    when 125 => outbits := 181;
                                    when 126 => outbits := 117;
                                    when 127 => outbits := 245;
                                    when 128 => outbits := 13;
                                    when 129 => outbits := 141;
                                    when 130 => outbits := 77;
                                    when 131 => outbits := 205;
                                    when 132 => outbits := 45;
                                    when 133 => outbits := 173;
                                    when 134 => outbits := 109;
                                    when 135 => outbits := 237;
                                    when 136 => outbits := 29;
                                    when 137 => outbits := 157;
                                    when 138 => outbits := 93;
                                    when 139 => outbits := 221;
                                    when 140 => outbits := 61;
                                    when 141 => outbits := 189;
                                    when 142 => outbits := 125;
                                    when 143 => outbits := 253;
                                    when 144 => outbits := 19;
                                    when 145 => outbits := 275;
                                    when 146 => outbits := 147;
                                    when 147 => outbits := 403;
                                    when 148 => outbits := 83;
                                    when 149 => outbits := 339;
                                    when 150 => outbits := 211;
                                    when 151 => outbits := 467;
                                    when 152 => outbits := 51;
                                    when 153 => outbits := 307;
                                    when 154 => outbits := 179;
                                    when 155 => outbits := 435;
                                    when 156 => outbits := 115;
                                    when 157 => outbits := 371;
                                    when 158 => outbits := 243;
                                    when 159 => outbits := 499;
                                    when 160 => outbits := 11;
                                    when 161 => outbits := 267;
                                    when 162 => outbits := 139;
                                    when 163 => outbits := 395;
                                    when 164 => outbits := 75;
                                    when 165 => outbits := 331;
                                    when 166 => outbits := 203;
                                    when 167 => outbits := 459;
                                    when 168 => outbits := 43;
                                    when 169 => outbits := 299;
                                    when 170 => outbits := 171;
                                    when 171 => outbits := 427;
                                    when 172 => outbits := 107;
                                    when 173 => outbits := 363;
                                    when 174 => outbits := 235;
                                    when 175 => outbits := 491;
                                    when 176 => outbits := 27;
                                    when 177 => outbits := 283;
                                    when 178 => outbits := 155;
                                    when 179 => outbits := 411;
                                    when 180 => outbits := 91;
                                    when 181 => outbits := 347;
                                    when 182 => outbits := 219;
                                    when 183 => outbits := 475;
                                    when 184 => outbits := 59;
                                    when 185 => outbits := 315;
                                    when 186 => outbits := 187;
                                    when 187 => outbits := 443;
                                    when 188 => outbits := 123;
                                    when 189 => outbits := 379;
                                    when 190 => outbits := 251;
                                    when 191 => outbits := 507;
                                    when 192 => outbits := 7;
                                    when 193 => outbits := 263;
                                    when 194 => outbits := 135;
                                    when 195 => outbits := 391;
                                    when 196 => outbits := 71;
                                    when 197 => outbits := 327;
                                    when 198 => outbits := 199;
                                    when 199 => outbits := 455;
                                    when 200 => outbits := 39;
                                    when 201 => outbits := 295;
                                    when 202 => outbits := 167;
                                    when 203 => outbits := 423;
                                    when 204 => outbits := 103;
                                    when 205 => outbits := 359;
                                    when 206 => outbits := 231;
                                    when 207 => outbits := 487;
                                    when 208 => outbits := 23;
                                    when 209 => outbits := 279;
                                    when 210 => outbits := 151;
                                    when 211 => outbits := 407;
                                    when 212 => outbits := 87;
                                    when 213 => outbits := 343;
                                    when 214 => outbits := 215;
                                    when 215 => outbits := 471;
                                    when 216 => outbits := 55;
                                    when 217 => outbits := 311;
                                    when 218 => outbits := 183;
                                    when 219 => outbits := 439;
                                    when 220 => outbits := 119;
                                    when 221 => outbits := 375;
                                    when 222 => outbits := 247;
                                    when 223 => outbits := 503;
                                    when 224 => outbits := 15;
                                    when 225 => outbits := 271;
                                    when 226 => outbits := 143;
                                    when 227 => outbits := 399;
                                    when 228 => outbits := 79;
                                    when 229 => outbits := 335;
                                    when 230 => outbits := 207;
                                    when 231 => outbits := 463;
                                    when 232 => outbits := 47;
                                    when 233 => outbits := 303;
                                    when 234 => outbits := 175;
                                    when 235 => outbits := 431;
                                    when 236 => outbits := 111;
                                    when 237 => outbits := 367;
                                    when 238 => outbits := 239;
                                    when 239 => outbits := 495;
                                    when 240 => outbits := 31;
                                    when 241 => outbits := 287;
                                    when 242 => outbits := 159;
                                    when 243 => outbits := 415;
                                    when 244 => outbits := 95;
                                    when 245 => outbits := 351;
                                    when 246 => outbits := 223;
                                    when 247 => outbits := 479;
                                    when 248 => outbits := 63;
                                    when 249 => outbits := 319;
                                    when 250 => outbits := 191;
                                    when 251 => outbits := 447;
                                    when 252 => outbits := 127;
                                    when 253 => outbits := 383;
                                    when 254 => outbits := 255;
                                    when 255 => outbits := 511;
                                    when 256 => outbits := 0;
                                    when 257 => outbits := 64;
                                    when 258 => outbits := 32;
                                    when 259 => outbits := 96;
                                    when 260 => outbits := 16;
                                    when 261 => outbits := 80;
                                    when 262 => outbits := 48;
                                    when 263 => outbits := 112;
                                    when 264 => outbits := 8;
                                    when 265 => outbits := 72;
                                    when 266 => outbits := 40;
                                    when 267 => outbits := 104;
                                    when 268 => outbits := 24;
                                    when 269 => outbits := 88;
                                    when 270 => outbits := 56;
                                    when 271 => outbits := 120;
                                    when 272 => outbits := 4;
                                    when 273 => outbits := 68;
                                    when 274 => outbits := 36;
                                    when 275 => outbits := 100;
                                    when 276 => outbits := 20;
                                    when 277 => outbits := 84;
                                    when 278 => outbits := 52;
                                    when 279 => outbits := 116;
                                    when 280 => outbits := 3;
                                    when 281 => outbits := 131;
                                    when 282 => outbits := 67;
                                    when 283 => outbits := 195;
                                    when 284 => outbits := 35;
                                    when 285 => outbits := 163;
                                    when 286 => outbits := 99;
                                    when others => outbits := 227;
                                end case;
                                write(L, string'("EOF BITS:"));
                                write(L, string'(" "));
                                write(L, to_string(cs_i));
                                write(L, string'(" "));
                                write(L, to_hstring(outlen));
                                write(L, string'(" "));
                                write(L, to_string(outbits));
                                writeline(output, L);
                                MYHDL212_put(outbits, outlen);
                            when "0100" =>
                                cur_cstatic <= to_unsigned(5, 4);
                                write(L, string'("calc end adler"));
                                writeline(output, L);
                                adler2 <= ((adler2 + ladler1) mod 65521);
                                if (doo /= 0) then
                                    oaddr <= resize(do, 9);
                                    obyte <= ob1;
                                    do <= (do + 1);
                                end if;
                            when "0101" =>
                                cur_cstatic <= to_unsigned(6, 4);
                                write(L, string'("c1"));
                                write(L, string'(" "));
                                write(L, to_hstring(adler2));
                                writeline(output, L);
                                oaddr <= resize(do, 9);
                                obyte <= resize(shift_right(adler2, 8), 8);
                                do <= (do + 1);
                                o_oprogress <= (do + 1);
                            when "0110" =>
                                cur_cstatic <= to_unsigned(7, 4);
                                write(L, string'("c2"));
                                writeline(output, L);
                                oaddr <= resize(do, 9);
                                obyte <= resize((adler2 and to_unsigned(255, 16)), 8);
                                do <= (do + 1);
                                o_oprogress <= (do + 1);
                            when "0111" =>
                                cur_cstatic <= to_unsigned(8, 4);
                                write(L, string'("c3"));
                                write(L, string'(" "));
                                write(L, to_hstring(adler1));
                                writeline(output, L);
                                oaddr <= resize(do, 9);
                                obyte <= resize(shift_right(adler1, 8), 8);
                                do <= (do + 1);
                                o_oprogress <= (do + 1);
                            when "1000" =>
                                cur_cstatic <= to_unsigned(9, 4);
                                write(L, string'("c4"));
                                writeline(output, L);
                                oaddr <= resize(do, 9);
                                obyte <= resize((adler1 and to_unsigned(255, 16)), 8);
                                o_oprogress <= (do + 1);
                            when "1001" =>
                                cur_cstatic <= to_unsigned(10, 4);
                                write(L, string'("EOF finish"));
                                write(L, string'(" "));
                                write(L, to_hstring(do));
                                writeline(output, L);
                                o_done <= '1';
                                state <= IDLE;
                            when others =>
                                write(L, to_hstring(cur_cstatic));
                                write(L, string'(" "));
                                write(L, to_hstring(isize));
                                writeline(output, L);
                                assert False report "End of Simulation" severity Failure;
                        end case;
                    else
                        bdata := iram(to_integer((di and to_unsigned(511, 24))));
                        o_iprogress <= di;
                        adler1_next := to_integer((adler1 + bdata) mod 65521);
                        adler1 <= to_unsigned(adler1_next, 16);
                        adler2 <= ((adler2 + ladler1) mod 65521);
                        ladler1 <= to_unsigned(adler1_next, 16);
                        state <= SEARCH;
                        cur_search <= signed(resize(di, 25) - 1);
                    end if;
                when DISTANCE =>
                    if (not True) then
                        null;
                    elsif bool(flush) then
                        ;
                    elsif bool(do_init) then
                        do_init <= '0';
                        outcarrybits <= to_unsigned(0, 4);
                        lencode := to_integer(mlength + 254);
                        outlen := codeLength(lencode);
                        case lencode is
                            when 0 => outbits := 12;
                            when 1 => outbits := 140;
                            when 2 => outbits := 76;
                            when 3 => outbits := 204;
                            when 4 => outbits := 44;
                            when 5 => outbits := 172;
                            when 6 => outbits := 108;
                            when 7 => outbits := 236;
                            when 8 => outbits := 28;
                            when 9 => outbits := 156;
                            when 10 => outbits := 92;
                            when 11 => outbits := 220;
                            when 12 => outbits := 60;
                            when 13 => outbits := 188;
                            when 14 => outbits := 124;
                            when 15 => outbits := 252;
                            when 16 => outbits := 2;
                            when 17 => outbits := 130;
                            when 18 => outbits := 66;
                            when 19 => outbits := 194;
                            when 20 => outbits := 34;
                            when 21 => outbits := 162;
                            when 22 => outbits := 98;
                            when 23 => outbits := 226;
                            when 24 => outbits := 18;
                            when 25 => outbits := 146;
                            when 26 => outbits := 82;
                            when 27 => outbits := 210;
                            when 28 => outbits := 50;
                            when 29 => outbits := 178;
                            when 30 => outbits := 114;
                            when 31 => outbits := 242;
                            when 32 => outbits := 10;
                            when 33 => outbits := 138;
                            when 34 => outbits := 74;
                            when 35 => outbits := 202;
                            when 36 => outbits := 42;
                            when 37 => outbits := 170;
                            when 38 => outbits := 106;
                            when 39 => outbits := 234;
                            when 40 => outbits := 26;
                            when 41 => outbits := 154;
                            when 42 => outbits := 90;
                            when 43 => outbits := 218;
                            when 44 => outbits := 58;
                            when 45 => outbits := 186;
                            when 46 => outbits := 122;
                            when 47 => outbits := 250;
                            when 48 => outbits := 6;
                            when 49 => outbits := 134;
                            when 50 => outbits := 70;
                            when 51 => outbits := 198;
                            when 52 => outbits := 38;
                            when 53 => outbits := 166;
                            when 54 => outbits := 102;
                            when 55 => outbits := 230;
                            when 56 => outbits := 22;
                            when 57 => outbits := 150;
                            when 58 => outbits := 86;
                            when 59 => outbits := 214;
                            when 60 => outbits := 54;
                            when 61 => outbits := 182;
                            when 62 => outbits := 118;
                            when 63 => outbits := 246;
                            when 64 => outbits := 14;
                            when 65 => outbits := 142;
                            when 66 => outbits := 78;
                            when 67 => outbits := 206;
                            when 68 => outbits := 46;
                            when 69 => outbits := 174;
                            when 70 => outbits := 110;
                            when 71 => outbits := 238;
                            when 72 => outbits := 30;
                            when 73 => outbits := 158;
                            when 74 => outbits := 94;
                            when 75 => outbits := 222;
                            when 76 => outbits := 62;
                            when 77 => outbits := 190;
                            when 78 => outbits := 126;
                            when 79 => outbits := 254;
                            when 80 => outbits := 1;
                            when 81 => outbits := 129;
                            when 82 => outbits := 65;
                            when 83 => outbits := 193;
                            when 84 => outbits := 33;
                            when 85 => outbits := 161;
                            when 86 => outbits := 97;
                            when 87 => outbits := 225;
                            when 88 => outbits := 17;
                            when 89 => outbits := 145;
                            when 90 => outbits := 81;
                            when 91 => outbits := 209;
                            when 92 => outbits := 49;
                            when 93 => outbits := 177;
                            when 94 => outbits := 113;
                            when 95 => outbits := 241;
                            when 96 => outbits := 9;
                            when 97 => outbits := 137;
                            when 98 => outbits := 73;
                            when 99 => outbits := 201;
                            when 100 => outbits := 41;
                            when 101 => outbits := 169;
                            when 102 => outbits := 105;
                            when 103 => outbits := 233;
                            when 104 => outbits := 25;
                            when 105 => outbits := 153;
                            when 106 => outbits := 89;
                            when 107 => outbits := 217;
                            when 108 => outbits := 57;
                            when 109 => outbits := 185;
                            when 110 => outbits := 121;
                            when 111 => outbits := 249;
                            when 112 => outbits := 5;
                            when 113 => outbits := 133;
                            when 114 => outbits := 69;
                            when 115 => outbits := 197;
                            when 116 => outbits := 37;
                            when 117 => outbits := 165;
                            when 118 => outbits := 101;
                            when 119 => outbits := 229;
                            when 120 => outbits := 21;
                            when 121 => outbits := 149;
                            when 122 => outbits := 85;
                            when 123 => outbits := 213;
                            when 124 => outbits := 53;
                            when 125 => outbits := 181;
                            when 126 => outbits := 117;
                            when 127 => outbits := 245;
                            when 128 => outbits := 13;
                            when 129 => outbits := 141;
                            when 130 => outbits := 77;
                            when 131 => outbits := 205;
                            when 132 => outbits := 45;
                            when 133 => outbits := 173;
                            when 134 => outbits := 109;
                            when 135 => outbits := 237;
                            when 136 => outbits := 29;
                            when 137 => outbits := 157;
                            when 138 => outbits := 93;
                            when 139 => outbits := 221;
                            when 140 => outbits := 61;
                            when 141 => outbits := 189;
                            when 142 => outbits := 125;
                            when 143 => outbits := 253;
                            when 144 => outbits := 19;
                            when 145 => outbits := 275;
                            when 146 => outbits := 147;
                            when 147 => outbits := 403;
                            when 148 => outbits := 83;
                            when 149 => outbits := 339;
                            when 150 => outbits := 211;
                            when 151 => outbits := 467;
                            when 152 => outbits := 51;
                            when 153 => outbits := 307;
                            when 154 => outbits := 179;
                            when 155 => outbits := 435;
                            when 156 => outbits := 115;
                            when 157 => outbits := 371;
                            when 158 => outbits := 243;
                            when 159 => outbits := 499;
                            when 160 => outbits := 11;
                            when 161 => outbits := 267;
                            when 162 => outbits := 139;
                            when 163 => outbits := 395;
                            when 164 => outbits := 75;
                            when 165 => outbits := 331;
                            when 166 => outbits := 203;
                            when 167 => outbits := 459;
                            when 168 => outbits := 43;
                            when 169 => outbits := 299;
                            when 170 => outbits := 171;
                            when 171 => outbits := 427;
                            when 172 => outbits := 107;
                            when 173 => outbits := 363;
                            when 174 => outbits := 235;
                            when 175 => outbits := 491;
                            when 176 => outbits := 27;
                            when 177 => outbits := 283;
                            when 178 => outbits := 155;
                            when 179 => outbits := 411;
                            when 180 => outbits := 91;
                            when 181 => outbits := 347;
                            when 182 => outbits := 219;
                            when 183 => outbits := 475;
                            when 184 => outbits := 59;
                            when 185 => outbits := 315;
                            when 186 => outbits := 187;
                            when 187 => outbits := 443;
                            when 188 => outbits := 123;
                            when 189 => outbits := 379;
                            when 190 => outbits := 251;
                            when 191 => outbits := 507;
                            when 192 => outbits := 7;
                            when 193 => outbits := 263;
                            when 194 => outbits := 135;
                            when 195 => outbits := 391;
                            when 196 => outbits := 71;
                            when 197 => outbits := 327;
                            when 198 => outbits := 199;
                            when 199 => outbits := 455;
                            when 200 => outbits := 39;
                            when 201 => outbits := 295;
                            when 202 => outbits := 167;
                            when 203 => outbits := 423;
                            when 204 => outbits := 103;
                            when 205 => outbits := 359;
                            when 206 => outbits := 231;
                            when 207 => outbits := 487;
                            when 208 => outbits := 23;
                            when 209 => outbits := 279;
                            when 210 => outbits := 151;
                            when 211 => outbits := 407;
                            when 212 => outbits := 87;
                            when 213 => outbits := 343;
                            when 214 => outbits := 215;
                            when 215 => outbits := 471;
                            when 216 => outbits := 55;
                            when 217 => outbits := 311;
                            when 218 => outbits := 183;
                            when 219 => outbits := 439;
                            when 220 => outbits := 119;
                            when 221 => outbits := 375;
                            when 222 => outbits := 247;
                            when 223 => outbits := 503;
                            when 224 => outbits := 15;
                            when 225 => outbits := 271;
                            when 226 => outbits := 143;
                            when 227 => outbits := 399;
                            when 228 => outbits := 79;
                            when 229 => outbits := 335;
                            when 230 => outbits := 207;
                            when 231 => outbits := 463;
                            when 232 => outbits := 47;
                            when 233 => outbits := 303;
                            when 234 => outbits := 175;
                            when 235 => outbits := 431;
                            when 236 => outbits := 111;
                            when 237 => outbits := 367;
                            when 238 => outbits := 239;
                            when 239 => outbits := 495;
                            when 240 => outbits := 31;
                            when 241 => outbits := 287;
                            when 242 => outbits := 159;
                            when 243 => outbits := 415;
                            when 244 => outbits := 95;
                            when 245 => outbits := 351;
                            when 246 => outbits := 223;
                            when 247 => outbits := 479;
                            when 248 => outbits := 63;
                            when 249 => outbits := 319;
                            when 250 => outbits := 191;
                            when 251 => outbits := 447;
                            when 252 => outbits := 127;
                            when 253 => outbits := 383;
                            when 254 => outbits := 255;
                            when 255 => outbits := 511;
                            when 256 => outbits := 0;
                            when 257 => outbits := 64;
                            when 258 => outbits := 32;
                            when 259 => outbits := 96;
                            when 260 => outbits := 16;
                            when 261 => outbits := 80;
                            when 262 => outbits := 48;
                            when 263 => outbits := 112;
                            when 264 => outbits := 8;
                            when 265 => outbits := 72;
                            when 266 => outbits := 40;
                            when 267 => outbits := 104;
                            when 268 => outbits := 24;
                            when 269 => outbits := 88;
                            when 270 => outbits := 56;
                            when 271 => outbits := 120;
                            when 272 => outbits := 4;
                            when 273 => outbits := 68;
                            when 274 => outbits := 36;
                            when 275 => outbits := 100;
                            when 276 => outbits := 20;
                            when 277 => outbits := 84;
                            when 278 => outbits := 52;
                            when 279 => outbits := 116;
                            when 280 => outbits := 3;
                            when 281 => outbits := 131;
                            when 282 => outbits := 67;
                            when 283 => outbits := 195;
                            when 284 => outbits := 35;
                            when 285 => outbits := 163;
                            when 286 => outbits := 99;
                            when others => outbits := 227;
                        end case;
                        MYHDL214_put(outbits, outlen);
                        cur_i <= to_unsigned(0, 24);
                    elsif bool(outcarrybits) then
                        MYHDL215_put(outcarry, outcarrybits);
                        state <= CHECKSUM;
                    else
                        case to_integer(cur_i + 1) is
                            when 0 => nextdist := 1;
                            when 1 => nextdist := 2;
                            when 2 => nextdist := 3;
                            when 3 => nextdist := 4;
                            when 4 => nextdist := 5;
                            when 5 => nextdist := 7;
                            when 6 => nextdist := 9;
                            when 7 => nextdist := 13;
                            when 8 => nextdist := 17;
                            when 9 => nextdist := 25;
                            when 10 => nextdist := 33;
                            when 11 => nextdist := 49;
                            when 12 => nextdist := 65;
                            when 13 => nextdist := 97;
                            when 14 => nextdist := 129;
                            when 15 => nextdist := 193;
                            when 16 => nextdist := 257;
                            when 17 => nextdist := 385;
                            when 18 => nextdist := 513;
                            when 19 => nextdist := 769;
                            when 20 => nextdist := 1025;
                            when 21 => nextdist := 1537;
                            when 22 => nextdist := 2049;
                            when 23 => nextdist := 3073;
                            when 24 => nextdist := 4097;
                            when 25 => nextdist := 6145;
                            when 26 => nextdist := 8193;
                            when 27 => nextdist := 12289;
                            when 28 => nextdist := 16385;
                            when others => nextdist := 24577;
                        end case;
                        if (nextdist > cur_dist) then
                            case to_integer(cur_i) is
                                when 0 => copydist := 1;
                                when 1 => copydist := 2;
                                when 2 => copydist := 3;
                                when 3 => copydist := 4;
                                when 4 => copydist := 5;
                                when 5 => copydist := 7;
                                when 6 => copydist := 9;
                                when 7 => copydist := 13;
                                when 8 => copydist := 17;
                                when 9 => copydist := 25;
                                when 10 => copydist := 33;
                                when 11 => copydist := 49;
                                when 12 => copydist := 65;
                                when 13 => copydist := 97;
                                when 14 => copydist := 129;
                                when 15 => copydist := 193;
                                when 16 => copydist := 257;
                                when 17 => copydist := 385;
                                when 18 => copydist := 513;
                                when 19 => copydist := 769;
                                when 20 => copydist := 1025;
                                when 21 => copydist := 1537;
                                when 22 => copydist := 2049;
                                when 23 => copydist := 3073;
                                when 24 => copydist := 4097;
                                when 25 => copydist := 6145;
                                when 26 => copydist := 8193;
                                when 27 => copydist := 12289;
                                when 28 => copydist := 16385;
                                when others => copydist := 24577;
                            end case;
                            extra_dist := to_integer(cur_dist - copydist);
                            case to_integer(cur_i / 2) is
                                when 0 => extra_bits := 0;
                                when 1 => extra_bits := 0;
                                when 2 => extra_bits := 1;
                                when 3 => extra_bits := 2;
                                when 4 => extra_bits := 3;
                                when 5 => extra_bits := 4;
                                when 6 => extra_bits := 5;
                                when 7 => extra_bits := 6;
                                when 8 => extra_bits := 7;
                                when 9 => extra_bits := 8;
                                when 10 => extra_bits := 9;
                                when 11 => extra_bits := 10;
                                when 12 => extra_bits := 11;
                                when 13 => extra_bits := 12;
                                when others => extra_bits := 13;
                            end case;
                            if (extra_dist > (shift_left(1, extra_bits) - 1)) then
                                assert False report "End of Simulation" severity Failure;
                            end if;
                            cur_i <= resize(unsigned((signed(resize(di, 25)) - signed(resize(mlength, 5))) + 1), 24);
                            outcode := (MYHDL216_rev_bits(cur_i, 5) or shift_left(extra_dist, 5));
                            if (extra_bits <= 4) then
                                MYHDL217_put(outcode, (5 + extra_bits));
                                state <= CHECKSUM;
                            else
                                outcarry <= to_unsigned(shift_right(outcode, 8), 9);
                                outcarrybits <= to_unsigned(extra_bits - 3, 4);
                                outcode := (outcode and 255);
                                MYHDL218_put(outcode, 8);
                            end if;
                        else
                            cur_i <= (cur_i + 1);
                        end if;
                    end if;
                when CHECKSUM =>
                    if (not True) then
                        null;
                    elsif (cur_i < di) then
                        bdata := iram(to_integer((cur_i and to_unsigned(511, 24))));
                        adler1_next := to_integer((adler1 + bdata) mod 65521);
                        adler1 <= to_unsigned(adler1_next, 16);
                        adler2 <= ((adler2 + ladler1) mod 65521);
                        ladler1 <= to_unsigned(adler1_next, 16);
                        cur_i <= (cur_i + 1);
                    else
                        state <= CSTATIC;
                    end if;
                when SEARCHF =>
                    if (not (True and True)) then
                        null;
                    else
                        lfmatch := dlength;
                        distance := to_integer(lfmatch + 1);
                        fmatch2 := to_integer((signed(resize(di, 25)) - signed(resize(lfmatch, 11))) + 2);
                        match := 3;
                        mdone := '1';
                        if ((signed(resize(di, 25)) < (signed(resize(isize, 25)) - 4)) and (iram((fmatch2 and 511)) = b4)) then
                            match := 4;
                            if (fcount < 5) then
                                mdone := '0';
                            elsif ((signed(resize(di, 25)) < (signed(resize(isize, 25)) - 5)) and (iram(((fmatch2 + 1) and 511)) = b5)) then
                                match := 5;
                                if True then
                                    if (fcount < 6) then
                                        mdone := '0';
                                    elsif ((signed(resize(di, 25)) < (signed(resize(isize, 25)) - 6)) and (iram(((fmatch2 + 2) and 511)) = b6)) then
                                        match := 6;
                                        if (fcount < 7) then
                                            mdone := '0';
                                        elsif ((signed(resize(di, 25)) < (signed(resize(isize, 25)) - 7)) and (iram(((fmatch2 + 3) and 511)) = b7)) then
                                            match := 7;
                                            if (fcount < 8) then
                                                mdone := '0';
                                            elsif ((signed(resize(di, 25)) < (signed(resize(isize, 25)) - 8)) and (iram(((fmatch2 + 4) and 511)) = b8)) then
                                                match := 8;
                                                if (fcount < 9) then
                                                    mdone := '0';
                                                elsif ((signed(resize(di, 25)) < (signed(resize(isize, 25)) - 9)) and (iram(((fmatch2 + 5) and 511)) = b9)) then
                                                    match := 9;
                                                    if (fcount < 10) then
                                                        mdone := '0';
                                                    elsif ((signed(resize(di, 25)) < (signed(resize(isize, 25)) - 10)) and (iram(((fmatch2 + 6) and 511)) = b10)) then
                                                        match := 10;
                                                    end if;
                                                end if;
                                            end if;
                                        end if;
                                    end if;
                                end if;
                            end if;
                        end if;
                        if bool(mdone) then
                            cur_dist <= to_signed(distance, 10);
                            do_init <= '1';
                            di <= (di + match);
                            if (not True) then
                                filled <= '0';
                            end if;
                            mlength <= to_unsigned(match, 4);
                            state <= DISTANCE;
                        end if;
                    end if;
                when SEARCH =>
                    if (not True) then
                        null;
                    elsif (False and (fcount < 3)) then
                        null;
                    else
                        if ((cur_search >= 0) and (cur_search >= (signed(resize(di, 25)) - 32)) and (signed(resize(di, 25)) < (signed(resize(isize, 25)) - 3))) then
                            if True then
                                found := '0';
                                fmatch := 0;
                                for si in 0 to 32-1 loop
                                    if bool(smatch(si)) then
                                        fmatch := si;
                                        found := '1';
                                        exit;
                                    end if;
                                end loop;
                                if ((not bool(found)) or (((signed(resize(di, 25)) - fmatch) - 1) < 0)) then
                                    cur_search <= to_signed(-1, 25);
                                else
                                    dlength <= to_unsigned(fmatch, 10);
                                    state <= SEARCHF;
                                end if;
                            elsif ((iram(to_integer((cur_search and to_signed(511, 25)))) = b1) and (iram(to_integer(((cur_search + 1) and to_signed(511, 25)))) = b2) and (iram(to_integer(((cur_search + 2) and to_signed(511, 25)))) = b3)) then
                                more <= to_unsigned(4, 4);
                                state <= SEARCH10;
                            else
                                cur_search <= (cur_search - 1);
                            end if;
                        else
                            bdata := b1;
                            di <= (di + 1);
                            if (not True) then
                                filled <= '0';
                            end if;
                            outlen := codeLength(to_integer(bdata));
                            case to_integer(bdata) is
                                when 0 => outbits := 12;
                                when 1 => outbits := 140;
                                when 2 => outbits := 76;
                                when 3 => outbits := 204;
                                when 4 => outbits := 44;
                                when 5 => outbits := 172;
                                when 6 => outbits := 108;
                                when 7 => outbits := 236;
                                when 8 => outbits := 28;
                                when 9 => outbits := 156;
                                when 10 => outbits := 92;
                                when 11 => outbits := 220;
                                when 12 => outbits := 60;
                                when 13 => outbits := 188;
                                when 14 => outbits := 124;
                                when 15 => outbits := 252;
                                when 16 => outbits := 2;
                                when 17 => outbits := 130;
                                when 18 => outbits := 66;
                                when 19 => outbits := 194;
                                when 20 => outbits := 34;
                                when 21 => outbits := 162;
                                when 22 => outbits := 98;
                                when 23 => outbits := 226;
                                when 24 => outbits := 18;
                                when 25 => outbits := 146;
                                when 26 => outbits := 82;
                                when 27 => outbits := 210;
                                when 28 => outbits := 50;
                                when 29 => outbits := 178;
                                when 30 => outbits := 114;
                                when 31 => outbits := 242;
                                when 32 => outbits := 10;
                                when 33 => outbits := 138;
                                when 34 => outbits := 74;
                                when 35 => outbits := 202;
                                when 36 => outbits := 42;
                                when 37 => outbits := 170;
                                when 38 => outbits := 106;
                                when 39 => outbits := 234;
                                when 40 => outbits := 26;
                                when 41 => outbits := 154;
                                when 42 => outbits := 90;
                                when 43 => outbits := 218;
                                when 44 => outbits := 58;
                                when 45 => outbits := 186;
                                when 46 => outbits := 122;
                                when 47 => outbits := 250;
                                when 48 => outbits := 6;
                                when 49 => outbits := 134;
                                when 50 => outbits := 70;
                                when 51 => outbits := 198;
                                when 52 => outbits := 38;
                                when 53 => outbits := 166;
                                when 54 => outbits := 102;
                                when 55 => outbits := 230;
                                when 56 => outbits := 22;
                                when 57 => outbits := 150;
                                when 58 => outbits := 86;
                                when 59 => outbits := 214;
                                when 60 => outbits := 54;
                                when 61 => outbits := 182;
                                when 62 => outbits := 118;
                                when 63 => outbits := 246;
                                when 64 => outbits := 14;
                                when 65 => outbits := 142;
                                when 66 => outbits := 78;
                                when 67 => outbits := 206;
                                when 68 => outbits := 46;
                                when 69 => outbits := 174;
                                when 70 => outbits := 110;
                                when 71 => outbits := 238;
                                when 72 => outbits := 30;
                                when 73 => outbits := 158;
                                when 74 => outbits := 94;
                                when 75 => outbits := 222;
                                when 76 => outbits := 62;
                                when 77 => outbits := 190;
                                when 78 => outbits := 126;
                                when 79 => outbits := 254;
                                when 80 => outbits := 1;
                                when 81 => outbits := 129;
                                when 82 => outbits := 65;
                                when 83 => outbits := 193;
                                when 84 => outbits := 33;
                                when 85 => outbits := 161;
                                when 86 => outbits := 97;
                                when 87 => outbits := 225;
                                when 88 => outbits := 17;
                                when 89 => outbits := 145;
                                when 90 => outbits := 81;
                                when 91 => outbits := 209;
                                when 92 => outbits := 49;
                                when 93 => outbits := 177;
                                when 94 => outbits := 113;
                                when 95 => outbits := 241;
                                when 96 => outbits := 9;
                                when 97 => outbits := 137;
                                when 98 => outbits := 73;
                                when 99 => outbits := 201;
                                when 100 => outbits := 41;
                                when 101 => outbits := 169;
                                when 102 => outbits := 105;
                                when 103 => outbits := 233;
                                when 104 => outbits := 25;
                                when 105 => outbits := 153;
                                when 106 => outbits := 89;
                                when 107 => outbits := 217;
                                when 108 => outbits := 57;
                                when 109 => outbits := 185;
                                when 110 => outbits := 121;
                                when 111 => outbits := 249;
                                when 112 => outbits := 5;
                                when 113 => outbits := 133;
                                when 114 => outbits := 69;
                                when 115 => outbits := 197;
                                when 116 => outbits := 37;
                                when 117 => outbits := 165;
                                when 118 => outbits := 101;
                                when 119 => outbits := 229;
                                when 120 => outbits := 21;
                                when 121 => outbits := 149;
                                when 122 => outbits := 85;
                                when 123 => outbits := 213;
                                when 124 => outbits := 53;
                                when 125 => outbits := 181;
                                when 126 => outbits := 117;
                                when 127 => outbits := 245;
                                when 128 => outbits := 13;
                                when 129 => outbits := 141;
                                when 130 => outbits := 77;
                                when 131 => outbits := 205;
                                when 132 => outbits := 45;
                                when 133 => outbits := 173;
                                when 134 => outbits := 109;
                                when 135 => outbits := 237;
                                when 136 => outbits := 29;
                                when 137 => outbits := 157;
                                when 138 => outbits := 93;
                                when 139 => outbits := 221;
                                when 140 => outbits := 61;
                                when 141 => outbits := 189;
                                when 142 => outbits := 125;
                                when 143 => outbits := 253;
                                when 144 => outbits := 19;
                                when 145 => outbits := 275;
                                when 146 => outbits := 147;
                                when 147 => outbits := 403;
                                when 148 => outbits := 83;
                                when 149 => outbits := 339;
                                when 150 => outbits := 211;
                                when 151 => outbits := 467;
                                when 152 => outbits := 51;
                                when 153 => outbits := 307;
                                when 154 => outbits := 179;
                                when 155 => outbits := 435;
                                when 156 => outbits := 115;
                                when 157 => outbits := 371;
                                when 158 => outbits := 243;
                                when 159 => outbits := 499;
                                when 160 => outbits := 11;
                                when 161 => outbits := 267;
                                when 162 => outbits := 139;
                                when 163 => outbits := 395;
                                when 164 => outbits := 75;
                                when 165 => outbits := 331;
                                when 166 => outbits := 203;
                                when 167 => outbits := 459;
                                when 168 => outbits := 43;
                                when 169 => outbits := 299;
                                when 170 => outbits := 171;
                                when 171 => outbits := 427;
                                when 172 => outbits := 107;
                                when 173 => outbits := 363;
                                when 174 => outbits := 235;
                                when 175 => outbits := 491;
                                when 176 => outbits := 27;
                                when 177 => outbits := 283;
                                when 178 => outbits := 155;
                                when 179 => outbits := 411;
                                when 180 => outbits := 91;
                                when 181 => outbits := 347;
                                when 182 => outbits := 219;
                                when 183 => outbits := 475;
                                when 184 => outbits := 59;
                                when 185 => outbits := 315;
                                when 186 => outbits := 187;
                                when 187 => outbits := 443;
                                when 188 => outbits := 123;
                                when 189 => outbits := 379;
                                when 190 => outbits := 251;
                                when 191 => outbits := 507;
                                when 192 => outbits := 7;
                                when 193 => outbits := 263;
                                when 194 => outbits := 135;
                                when 195 => outbits := 391;
                                when 196 => outbits := 71;
                                when 197 => outbits := 327;
                                when 198 => outbits := 199;
                                when 199 => outbits := 455;
                                when 200 => outbits := 39;
                                when 201 => outbits := 295;
                                when 202 => outbits := 167;
                                when 203 => outbits := 423;
                                when 204 => outbits := 103;
                                when 205 => outbits := 359;
                                when 206 => outbits := 231;
                                when 207 => outbits := 487;
                                when 208 => outbits := 23;
                                when 209 => outbits := 279;
                                when 210 => outbits := 151;
                                when 211 => outbits := 407;
                                when 212 => outbits := 87;
                                when 213 => outbits := 343;
                                when 214 => outbits := 215;
                                when 215 => outbits := 471;
                                when 216 => outbits := 55;
                                when 217 => outbits := 311;
                                when 218 => outbits := 183;
                                when 219 => outbits := 439;
                                when 220 => outbits := 119;
                                when 221 => outbits := 375;
                                when 222 => outbits := 247;
                                when 223 => outbits := 503;
                                when 224 => outbits := 15;
                                when 225 => outbits := 271;
                                when 226 => outbits := 143;
                                when 227 => outbits := 399;
                                when 228 => outbits := 79;
                                when 229 => outbits := 335;
                                when 230 => outbits := 207;
                                when 231 => outbits := 463;
                                when 232 => outbits := 47;
                                when 233 => outbits := 303;
                                when 234 => outbits := 175;
                                when 235 => outbits := 431;
                                when 236 => outbits := 111;
                                when 237 => outbits := 367;
                                when 238 => outbits := 239;
                                when 239 => outbits := 495;
                                when 240 => outbits := 31;
                                when 241 => outbits := 287;
                                when 242 => outbits := 159;
                                when 243 => outbits := 415;
                                when 244 => outbits := 95;
                                when 245 => outbits := 351;
                                when 246 => outbits := 223;
                                when 247 => outbits := 479;
                                when 248 => outbits := 63;
                                when 249 => outbits := 319;
                                when 250 => outbits := 191;
                                when 251 => outbits := 447;
                                when 252 => outbits := 127;
                                when 253 => outbits := 383;
                                when 254 => outbits := 255;
                                when 255 => outbits := 511;
                                when 256 => outbits := 0;
                                when 257 => outbits := 64;
                                when 258 => outbits := 32;
                                when 259 => outbits := 96;
                                when 260 => outbits := 16;
                                when 261 => outbits := 80;
                                when 262 => outbits := 48;
                                when 263 => outbits := 112;
                                when 264 => outbits := 8;
                                when 265 => outbits := 72;
                                when 266 => outbits := 40;
                                when 267 => outbits := 104;
                                when 268 => outbits := 24;
                                when 269 => outbits := 88;
                                when 270 => outbits := 56;
                                when 271 => outbits := 120;
                                when 272 => outbits := 4;
                                when 273 => outbits := 68;
                                when 274 => outbits := 36;
                                when 275 => outbits := 100;
                                when 276 => outbits := 20;
                                when 277 => outbits := 84;
                                when 278 => outbits := 52;
                                when 279 => outbits := 116;
                                when 280 => outbits := 3;
                                when 281 => outbits := 131;
                                when 282 => outbits := 67;
                                when 283 => outbits := 195;
                                when 284 => outbits := 35;
                                when 285 => outbits := 163;
                                when 286 => outbits := 99;
                                when others => outbits := 227;
                            end case;
                            MYHDL221_put(outbits, outlen);
                            state <= CSTATIC;
                        end if;
                    end if;
                when SEARCH10 =>
                    if ((not True) or True) then
                        null;
                    else
                        mdone := '1';
                        mlimit := 5;
                        if True then
                            mlimit := 10;
                        end if;
                        if (more <= mlimit) then
                            cbyte := b4;
                            if (more = 5) then
                                cbyte := b5;
                            elsif True then
                                if (more = 6) then
                                    cbyte := b6;
                                elsif (more = 7) then
                                    cbyte := b7;
                                elsif (more = 8) then
                                    cbyte := b8;
                                elsif (more = 9) then
                                    cbyte := b9;
                                elsif (more = 10) then
                                    cbyte := b10;
                                end if;
                            end if;
                            if ((signed(resize(di, 25)) < (signed(resize(isize, 25)) - signed(resize(more, 5)))) and (iram(to_integer((((cur_search + signed(resize(more, 5))) - 1) and to_signed(511, 25)))) = cbyte)) then
                                more <= (more + 1);
                                mdone := '0';
                            end if;
                        end if;
                        if bool(mdone) then
                            match := to_integer(more - 1);
                            distance := to_integer(signed(resize(di, 25)) - cur_search);
                            cur_dist <= to_signed(distance, 10);
                            do_init <= '1';
                            di <= (di + match);
                            if (not True) then
                                filled <= '0';
                            end if;
                            mlength <= to_unsigned(match, 4);
                            state <= DISTANCE;
                        end if;
                    end if;
                when STATIC =>
                    for stat_i in 0 to 144-1 loop
                        codeLength(stat_i) <= to_unsigned(8, 4);
                    end loop;
                    for stat_i in 144 to 256-1 loop
                        codeLength(stat_i) <= to_unsigned(9, 4);
                    end loop;
                    for stat_i in 256 to 280-1 loop
                        codeLength(stat_i) <= to_unsigned(7, 4);
                    end loop;
                    for stat_i in 280 to 288-1 loop
                        codeLength(stat_i) <= to_unsigned(8, 4);
                    end loop;
                    numCodeLength <= to_unsigned(288, 9);
                    if (True and bool(do_compress)) then
                        state <= CSTATIC;
                    elsif True then
                        cur_HF1 <= to_unsigned(0, 16);
                        state <= HF1;
                    else
                        cur_next <= to_unsigned(0, 5);
                        state <= NEXT;
                    end if;
                when BL =>
                    if ((not True) or (not True)) then
                        null;
                    elsif (not bool(filled)) then
                        filled <= '1';
                    elsif (numLiterals = 0) then
                        write(L, to_hstring(di));
                        write(L, string'(" "));
                        write(L, to_hstring(isize));
                        writeline(output, L);
                        numLiterals <= to_unsigned(257 + MYHDL230_get4(0, 5), 9);
                        write(L, string'("NL:"));
                        write(L, string'(" "));
                        write(L, to_string((257 + MYHDL231_get4(0, 5))));
                        writeline(output, L);
                        numDistance <= to_unsigned(1 + MYHDL232_get4(5, 5), 6);
                        write(L, string'("ND:"));
                        write(L, string'(" "));
                        write(L, to_string((1 + MYHDL233_get4(5, 5))));
                        writeline(output, L);
                        b_numCodeLength <= to_unsigned(4 + MYHDL234_get4(10, 4), 9);
                        write(L, string'("NCL:"));
                        write(L, string'(" "));
                        write(L, to_string((4 + MYHDL235_get4(10, 4))));
                        writeline(output, L);
                        numCodeLength <= to_unsigned(0, 9);
                        MYHDL236_adv(14);
                    else
                        if (numCodeLength < 19) then
                            case to_integer(numCodeLength) is
                                when 0 => clo_i := 16;
                                when 1 => clo_i := 17;
                                when 2 => clo_i := 18;
                                when 3 => clo_i := 0;
                                when 4 => clo_i := 8;
                                when 5 => clo_i := 7;
                                when 6 => clo_i := 9;
                                when 7 => clo_i := 6;
                                when 8 => clo_i := 10;
                                when 9 => clo_i := 5;
                                when 10 => clo_i := 11;
                                when 11 => clo_i := 4;
                                when 12 => clo_i := 12;
                                when 13 => clo_i := 3;
                                when 14 => clo_i := 13;
                                when 15 => clo_i := 2;
                                when 16 => clo_i := 14;
                                when 17 => clo_i := 1;
                                when others => clo_i := 15;
                            end case;
                            if (numCodeLength < b_numCodeLength) then
                                codeLength(clo_i) <= to_unsigned(MYHDL237_get4(0, 3), 4);
                                MYHDL238_adv(3);
                            else
                                codeLength(clo_i) <= to_unsigned(0, 4);
                            end if;
                            numCodeLength <= (numCodeLength + 1);
                        else
                            numCodeLength <= to_unsigned(19, 9);
                            cur_HF1 <= to_unsigned(0, 16);
                            state <= HF1;
                        end if;
                    end if;
                when READBL =>
                    if ((not True) or (not True)) then
                        null;
                    elsif (not bool(filled)) then
                        filled <= '1';
                    elsif (numCodeLength < (numLiterals + numDistance)) then
                        n_adv := 0;
                        if (code < 16) then
                            howOften <= to_unsigned(1, 9);
                            lastToken <= resize(code, 9);
                        elsif (code = 16) then
                            howOften <= to_unsigned(3 + MYHDL239_get4(0, 2), 9);
                            n_adv := 2;
                        elsif (code = 17) then
                            howOften <= to_unsigned(3 + MYHDL240_get4(0, 3), 9);
                            lastToken <= to_unsigned(0, 9);
                            n_adv := 3;
                        elsif (code = 18) then
                            howOften <= to_unsigned(11 + MYHDL241_get4(0, 7), 9);
                            lastToken <= to_unsigned(0, 9);
                            n_adv := 7;
                        else
                            assert False report "End of Simulation" severity Failure;
                        end if;
                        if (n_adv /= 0) then
                            MYHDL242_adv(n_adv);
                        end if;
                        state <= REPEAT;
                        spread_i <= to_unsigned(0, 9);
                    elsif (spread_i < 32) then
                        if (spread_i = 0) then
                            write(L, string'("FILL UP"));
                            writeline(output, L);
                        end if;
                        dbl := 0;
                        if ((spread_i + numLiterals) < numCodeLength) then
                            dbl := to_integer(codeLength(to_integer(spread_i + numLiterals)));
                        end if;
                        distanceLength(to_integer(spread_i)) <= to_unsigned(dbl, 4);
                        spread_i <= (spread_i + 1);
                    else
                        cur_i <= resize(numLiterals, 24);
                        state <= INIT3;
                    end if;
                when INIT3 =>
                    if ((not True) or (not True)) then
                        null;
                    elsif (signed(resize(cur_i, 25)) < 320) then
                        codeLength(to_integer(cur_i)) <= to_unsigned(0, 4);
                        cur_i <= (cur_i + 1);
                    else
                        method <= to_unsigned(3, 3);
                        cur_HF1 <= to_unsigned(0, 16);
                        state <= HF1;
                    end if;
                when DISTTREE =>
                    if (True and True) then
                        write(L, string'("DISTTREE"));
                        writeline(output, L);
                        for dist_i in 0 to 32-1 loop
                            codeLength(dist_i) <= distanceLength(dist_i);
                        end loop;
                        numCodeLength <= to_unsigned(32, 9);
                        method <= to_unsigned(4, 3);
                        cur_HF1 <= to_unsigned(0, 16);
                        state <= HF1;
                    end if;
                when REPEAT =>
                    if ((not True) or (not True)) then
                        null;
                    elsif (howOften /= 0) then
                        codeLength(to_integer(numCodeLength)) <= resize(lastToken, 4);
                        howOften <= (howOften - 1);
                        numCodeLength <= (numCodeLength + 1);
                    elsif (numCodeLength < (numLiterals + numDistance)) then
                        cur_next <= to_unsigned(0, 5);
                        state <= NEXT;
                    else
                        state <= READBL;
                    end if;
                when HF1 =>
                    if (True and True) then
                        if (signed(resize(cur_HF1, 17)) < 16) then
                            bitLengthCount(to_integer(cur_HF1)) <= to_unsigned(0, 9);
                        end if;
                        if ((signed(resize(cur_HF1, 17)) < 4096) and True) then
                            dlwaddr <= resize(cur_HF1, 15);
                            dwleaf <= to_unsigned(0, 19);
                        end if;
                        if ((method /= 4) and (signed(resize(cur_HF1, 17)) < 32768)) then
                            lwaddr <= resize(cur_HF1, 15);
                            wleaf <= to_unsigned(0, 19);
                        end if;
                        limit := 32768;
                        if ((method = 4) and True) then
                            limit := 4096;
                        end if;
                        if (cur_HF1 < limit) then
                            cur_HF1 <= (cur_HF1 + 1);
                        else
                            write(L, string'("DID HF1 INIT"));
                            writeline(output, L);
                            cur_i <= to_unsigned(0, 24);
                            state <= HF1INIT;
                        end if;
                    end if;
                when HF1INIT =>
                    if ((not True) or (not True)) then
                        null;
                    elsif (cur_i < numCodeLength) then
                        j := codeLength(to_integer(cur_i));
                        bitLengthCount(to_integer(j)) <= (bitLengthCount(to_integer(j)) + 1);
                        cur_i <= (cur_i + 1);
                    else
                        bitLengthCount(0) <= to_unsigned(0, 9);
                        state <= HF2;
                        cur_i <= to_unsigned(1, 24);
                        if (True and (method = 4)) then
                            d_maxBits <= to_unsigned(0, 4);
                        else
                            maxBits <= to_unsigned(0, 4);
                        end if;
                        minBits <= to_unsigned(15, 4);
                    end if;
                when HF2 =>
                    if ((not True) or (not True)) then
                        null;
                    elsif (cur_i <= 15) then
                        if (bitLengthCount(to_integer(cur_i)) /= 0) then
                            if (cur_i < minBits) then
                                minBits <= resize(cur_i, 4);
                            end if;
                            if (True and (method = 4)) then
                                if (cur_i > d_maxBits) then
                                    d_maxBits <= resize(cur_i, 4);
                                end if;
                            else
                                if (cur_i > maxBits) then
                                    maxBits <= resize(cur_i, 4);
                                end if;
                            end if;
                        end if;
                        cur_i <= (cur_i + 1);
                    else
                        write(L, to_hstring(minBits));
                        write(L, string'(" "));
                        write(L, to_hstring(maxBits));
                        writeline(output, L);
                        t := 10;
                        if (True and (method = 4)) then
                            if (t > to_integer(d_maxBits)) then
                                t := to_integer(d_maxBits);
                            end if;
                            d_instantMaxBit <= to_unsigned(t, 4);
                            d_instantMask <= to_unsigned(shift_left(1, t) - 1, 15);
                        else
                            if (t > to_integer(maxBits)) then
                                t := to_integer(maxBits);
                            end if;
                            instantMaxBit <= to_unsigned(t, 4);
                            instantMask <= to_unsigned(shift_left(1, t) - 1, 15);
                        end if;
                        write(L, to_string((shift_left(1, t) - 1)));
                        writeline(output, L);
                        state <= HF3;
                        cur_i <= resize(minBits, 24);
                        code <= to_unsigned(0, 15);
                        for hf2_i in 0 to 16-1 loop
                            nextCode(hf2_i) <= to_unsigned(0, 16);
                        end loop;
                        write(L, string'("to HF3"));
                        writeline(output, L);
                    end if;
                when HF3 =>
                    if (True and True) then
                        amb := maxBits;
                        if (True and (method = 4)) then
                            amb := d_maxBits;
                        end if;
                        if (cur_i <= amb) then
                            ncode := to_integer(shift_left((code + bitLengthCount(to_integer(signed(resize(cur_i, 25)) - 1))), 1));
                            code <= to_unsigned(ncode, 15);
                            nextCode(to_integer(cur_i)) <= to_unsigned(ncode, 16);
                            cur_i <= (cur_i + 1);
                        else
                            state <= HF4;
                            cur_i <= to_unsigned(0, 24);
                            spread_i <= to_unsigned(0, 9);
                            write(L, string'("to HF4"));
                            writeline(output, L);
                        end if;
                    end if;
                when HF4_2 =>
                    if (True and True) then
                        canonical := nextCode(to_integer(bits));
                        nextCode(to_integer(bits)) <= (nextCode(to_integer(bits)) + 1);
                        if (bits > 15) then
                            assert False report "End of Simulation" severity Failure;
                        end if;
                        reverse <= to_unsigned(MYHDL247_rev_bits(canonical, bits), 15);
                        leaf <= to_unsigned(MYHDL248_makeLeaf(spread_i, bits), 19);
                        state <= HF4_3;
                    end if;
                when HF4_3 =>
                    if ((not True) or (not True)) then
                        null;
                    elsif (True and (method = 4)) then
                        dwleaf <= leaf;
                        dlwaddr <= reverse;
                        if (bits <= d_instantMaxBit) then
                            if ((reverse + shift_left(1, to_integer(bits))) <= d_instantMask) then
                                step <= to_unsigned(shift_left(1, to_integer(bits)), 10);
                                spread <= resize(reverse + shift_left(1, to_integer(bits)), 10);
                                state <= SPREAD;
                            else
                                spread_i <= (spread_i + 1);
                                state <= HF4;
                            end if;
                        else
                            state <= HF4;
                            spread_i <= (spread_i + 1);
                        end if;
                    else
                        wleaf <= leaf;
                        lwaddr <= reverse;
                        if (bits <= instantMaxBit) then
                            if ((reverse + shift_left(1, to_integer(bits))) <= instantMask) then
                                step <= to_unsigned(shift_left(1, to_integer(bits)), 10);
                                spread <= resize(reverse + shift_left(1, to_integer(bits)), 10);
                                state <= SPREAD;
                            else
                                spread_i <= (spread_i + 1);
                                state <= HF4;
                            end if;
                        else
                            spread_i <= (spread_i + 1);
                            state <= HF4;
                        end if;
                    end if;
                when HF4 =>
                    if ((not True) or (not True)) then
                        null;
                    elsif (spread_i < numCodeLength) then
                        bits_next := codeLength(to_integer(spread_i));
                        if (bits_next /= 0) then
                            bits <= bits_next;
                            state <= HF4_2;
                        else
                            spread_i <= (spread_i + 1);
                        end if;
                    else
                        if ((method = 3) and True) then
                            state <= DISTTREE;
                        elsif ((method = 4) and True) then
                            write(L, string'("DEFLATE m2!"));
                            writeline(output, L);
                            state <= NEXT;
                        elsif ((method = 2) and True) then
                            numCodeLength <= to_unsigned(0, 9);
                            state <= NEXT;
                        else
                            state <= NEXT;
                        end if;
                        cur_next <= to_unsigned(0, 5);
                        cur_i <= to_unsigned(0, 24);
                    end if;
                when SPREAD =>
                    if (True and True) then
                        if ((method = 4) and True) then
                            dlwaddr <= resize(spread, 15);
                            dwleaf <= to_unsigned(MYHDL249_makeLeaf(spread_i, codeLength(to_integer(spread_i))), 19);
                        else
                            lwaddr <= resize(spread, 15);
                            wleaf <= to_unsigned(MYHDL250_makeLeaf(spread_i, codeLength(to_integer(spread_i))), 19);
                        end if;
                        aim := instantMask;
                        if ((method = 4) and True) then
                            aim := d_instantMask;
                        end if;
                        if (signed(resize(spread, 11)) > (signed(resize(aim, 16)) - signed(resize(step, 11)))) then
                            spread_i <= (spread_i + 1);
                            state <= HF4;
                        else
                            spread <= (spread + step);
                        end if;
                    end if;
                when NEXT =>
                    if (not True) then
                        null;
                    elsif (not bool(filled)) then
                        filled <= '1';
                    elsif (cur_next = 0) then
                        cto := MYHDL251_get4(0, maxBits);
                        mask := (shift_left(1, to_integer(instantMaxBit)) - 1);
                        if True then
                            lraddr <= to_unsigned((cto and mask), 15);
                            filled <= '0';
                        else
                            case (cto and mask) is
                                when 0 => stat_leaf <= "0000001000000000111";
                                when 1 => stat_leaf <= "0000000010100001000";
                                when 2 => stat_leaf <= "0000000000100001000";
                                when 3 => stat_leaf <= "0000001000110001000";
                                when 4 => stat_leaf <= "0000001000100000111";
                                when 5 => stat_leaf <= "0000000011100001000";
                                when 6 => stat_leaf <= "0000000001100001000";
                                when 7 => stat_leaf <= "0000000110000001001";
                                when 8 => stat_leaf <= "0000001000010000111";
                                when 9 => stat_leaf <= "0000000011000001000";
                                when 10 => stat_leaf <= "0000000001000001000";
                                when 11 => stat_leaf <= "0000000101000001001";
                                when 12 => stat_leaf <= "0000000000000001000";
                                when 13 => stat_leaf <= "0000000100000001000";
                                when 14 => stat_leaf <= "0000000010000001000";
                                when 15 => stat_leaf <= "0000000111000001001";
                                when 16 => stat_leaf <= "0000001000001000111";
                                when 17 => stat_leaf <= "0000000010110001000";
                                when 18 => stat_leaf <= "0000000000110001000";
                                when 19 => stat_leaf <= "0000000100100001001";
                                when 20 => stat_leaf <= "0000001000101000111";
                                when 21 => stat_leaf <= "0000000011110001000";
                                when 22 => stat_leaf <= "0000000001110001000";
                                when 23 => stat_leaf <= "0000000110100001001";
                                when 24 => stat_leaf <= "0000001000011000111";
                                when 25 => stat_leaf <= "0000000011010001000";
                                when 26 => stat_leaf <= "0000000001010001000";
                                when 27 => stat_leaf <= "0000000101100001001";
                                when 28 => stat_leaf <= "0000000000010001000";
                                when 29 => stat_leaf <= "0000000100010001000";
                                when 30 => stat_leaf <= "0000000010010001000";
                                when 31 => stat_leaf <= "0000000111100001001";
                                when 32 => stat_leaf <= "0000001000000100111";
                                when 33 => stat_leaf <= "0000000010101001000";
                                when 34 => stat_leaf <= "0000000000101001000";
                                when 35 => stat_leaf <= "0000001000111001000";
                                when 36 => stat_leaf <= "0000001000100100111";
                                when 37 => stat_leaf <= "0000000011101001000";
                                when 38 => stat_leaf <= "0000000001101001000";
                                when 39 => stat_leaf <= "0000000110010001001";
                                when 40 => stat_leaf <= "0000001000010100111";
                                when 41 => stat_leaf <= "0000000011001001000";
                                when 42 => stat_leaf <= "0000000001001001000";
                                when 43 => stat_leaf <= "0000000101010001001";
                                when 44 => stat_leaf <= "0000000000001001000";
                                when 45 => stat_leaf <= "0000000100001001000";
                                when 46 => stat_leaf <= "0000000010001001000";
                                when 47 => stat_leaf <= "0000000111010001001";
                                when 48 => stat_leaf <= "0000001000001100111";
                                when 49 => stat_leaf <= "0000000010111001000";
                                when 50 => stat_leaf <= "0000000000111001000";
                                when 51 => stat_leaf <= "0000000100110001001";
                                when 52 => stat_leaf <= "0000001000101100111";
                                when 53 => stat_leaf <= "0000000011111001000";
                                when 54 => stat_leaf <= "0000000001111001000";
                                when 55 => stat_leaf <= "0000000110110001001";
                                when 56 => stat_leaf <= "0000001000011100111";
                                when 57 => stat_leaf <= "0000000011011001000";
                                when 58 => stat_leaf <= "0000000001011001000";
                                when 59 => stat_leaf <= "0000000101110001001";
                                when 60 => stat_leaf <= "0000000000011001000";
                                when 61 => stat_leaf <= "0000000100011001000";
                                when 62 => stat_leaf <= "0000000010011001000";
                                when 63 => stat_leaf <= "0000000111110001001";
                                when 64 => stat_leaf <= "0000001000000010111";
                                when 65 => stat_leaf <= "0000000010100101000";
                                when 66 => stat_leaf <= "0000000000100101000";
                                when 67 => stat_leaf <= "0000001000110101000";
                                when 68 => stat_leaf <= "0000001000100010111";
                                when 69 => stat_leaf <= "0000000011100101000";
                                when 70 => stat_leaf <= "0000000001100101000";
                                when 71 => stat_leaf <= "0000000110001001001";
                                when 72 => stat_leaf <= "0000001000010010111";
                                when 73 => stat_leaf <= "0000000011000101000";
                                when 74 => stat_leaf <= "0000000001000101000";
                                when 75 => stat_leaf <= "0000000101001001001";
                                when 76 => stat_leaf <= "0000000000000101000";
                                when 77 => stat_leaf <= "0000000100000101000";
                                when 78 => stat_leaf <= "0000000010000101000";
                                when 79 => stat_leaf <= "0000000111001001001";
                                when 80 => stat_leaf <= "0000001000001010111";
                                when 81 => stat_leaf <= "0000000010110101000";
                                when 82 => stat_leaf <= "0000000000110101000";
                                when 83 => stat_leaf <= "0000000100101001001";
                                when 84 => stat_leaf <= "0000001000101010111";
                                when 85 => stat_leaf <= "0000000011110101000";
                                when 86 => stat_leaf <= "0000000001110101000";
                                when 87 => stat_leaf <= "0000000110101001001";
                                when 88 => stat_leaf <= "0000001000011010111";
                                when 89 => stat_leaf <= "0000000011010101000";
                                when 90 => stat_leaf <= "0000000001010101000";
                                when 91 => stat_leaf <= "0000000101101001001";
                                when 92 => stat_leaf <= "0000000000010101000";
                                when 93 => stat_leaf <= "0000000100010101000";
                                when 94 => stat_leaf <= "0000000010010101000";
                                when 95 => stat_leaf <= "0000000111101001001";
                                when 96 => stat_leaf <= "0000001000000110111";
                                when 97 => stat_leaf <= "0000000010101101000";
                                when 98 => stat_leaf <= "0000000000101101000";
                                when 99 => stat_leaf <= "0000001000111101000";
                                when 100 => stat_leaf <= "0000001000100110111";
                                when 101 => stat_leaf <= "0000000011101101000";
                                when 102 => stat_leaf <= "0000000001101101000";
                                when 103 => stat_leaf <= "0000000110011001001";
                                when 104 => stat_leaf <= "0000001000010110111";
                                when 105 => stat_leaf <= "0000000011001101000";
                                when 106 => stat_leaf <= "0000000001001101000";
                                when 107 => stat_leaf <= "0000000101011001001";
                                when 108 => stat_leaf <= "0000000000001101000";
                                when 109 => stat_leaf <= "0000000100001101000";
                                when 110 => stat_leaf <= "0000000010001101000";
                                when 111 => stat_leaf <= "0000000111011001001";
                                when 112 => stat_leaf <= "0000001000001110111";
                                when 113 => stat_leaf <= "0000000010111101000";
                                when 114 => stat_leaf <= "0000000000111101000";
                                when 115 => stat_leaf <= "0000000100111001001";
                                when 116 => stat_leaf <= "0000001000101110111";
                                when 117 => stat_leaf <= "0000000011111101000";
                                when 118 => stat_leaf <= "0000000001111101000";
                                when 119 => stat_leaf <= "0000000110111001001";
                                when 120 => stat_leaf <= "0000001000011110111";
                                when 121 => stat_leaf <= "0000000011011101000";
                                when 122 => stat_leaf <= "0000000001011101000";
                                when 123 => stat_leaf <= "0000000101111001001";
                                when 124 => stat_leaf <= "0000000000011101000";
                                when 125 => stat_leaf <= "0000000100011101000";
                                when 126 => stat_leaf <= "0000000010011101000";
                                when 127 => stat_leaf <= "0000000111111001001";
                                when 128 => stat_leaf <= "0000001000000000111";
                                when 129 => stat_leaf <= "0000000010100011000";
                                when 130 => stat_leaf <= "0000000000100011000";
                                when 131 => stat_leaf <= "0000001000110011000";
                                when 132 => stat_leaf <= "0000001000100000111";
                                when 133 => stat_leaf <= "0000000011100011000";
                                when 134 => stat_leaf <= "0000000001100011000";
                                when 135 => stat_leaf <= "0000000110000101001";
                                when 136 => stat_leaf <= "0000001000010000111";
                                when 137 => stat_leaf <= "0000000011000011000";
                                when 138 => stat_leaf <= "0000000001000011000";
                                when 139 => stat_leaf <= "0000000101000101001";
                                when 140 => stat_leaf <= "0000000000000011000";
                                when 141 => stat_leaf <= "0000000100000011000";
                                when 142 => stat_leaf <= "0000000010000011000";
                                when 143 => stat_leaf <= "0000000111000101001";
                                when 144 => stat_leaf <= "0000001000001000111";
                                when 145 => stat_leaf <= "0000000010110011000";
                                when 146 => stat_leaf <= "0000000000110011000";
                                when 147 => stat_leaf <= "0000000100100101001";
                                when 148 => stat_leaf <= "0000001000101000111";
                                when 149 => stat_leaf <= "0000000011110011000";
                                when 150 => stat_leaf <= "0000000001110011000";
                                when 151 => stat_leaf <= "0000000110100101001";
                                when 152 => stat_leaf <= "0000001000011000111";
                                when 153 => stat_leaf <= "0000000011010011000";
                                when 154 => stat_leaf <= "0000000001010011000";
                                when 155 => stat_leaf <= "0000000101100101001";
                                when 156 => stat_leaf <= "0000000000010011000";
                                when 157 => stat_leaf <= "0000000100010011000";
                                when 158 => stat_leaf <= "0000000010010011000";
                                when 159 => stat_leaf <= "0000000111100101001";
                                when 160 => stat_leaf <= "0000001000000100111";
                                when 161 => stat_leaf <= "0000000010101011000";
                                when 162 => stat_leaf <= "0000000000101011000";
                                when 163 => stat_leaf <= "0000001000111011000";
                                when 164 => stat_leaf <= "0000001000100100111";
                                when 165 => stat_leaf <= "0000000011101011000";
                                when 166 => stat_leaf <= "0000000001101011000";
                                when 167 => stat_leaf <= "0000000110010101001";
                                when 168 => stat_leaf <= "0000001000010100111";
                                when 169 => stat_leaf <= "0000000011001011000";
                                when 170 => stat_leaf <= "0000000001001011000";
                                when 171 => stat_leaf <= "0000000101010101001";
                                when 172 => stat_leaf <= "0000000000001011000";
                                when 173 => stat_leaf <= "0000000100001011000";
                                when 174 => stat_leaf <= "0000000010001011000";
                                when 175 => stat_leaf <= "0000000111010101001";
                                when 176 => stat_leaf <= "0000001000001100111";
                                when 177 => stat_leaf <= "0000000010111011000";
                                when 178 => stat_leaf <= "0000000000111011000";
                                when 179 => stat_leaf <= "0000000100110101001";
                                when 180 => stat_leaf <= "0000001000101100111";
                                when 181 => stat_leaf <= "0000000011111011000";
                                when 182 => stat_leaf <= "0000000001111011000";
                                when 183 => stat_leaf <= "0000000110110101001";
                                when 184 => stat_leaf <= "0000001000011100111";
                                when 185 => stat_leaf <= "0000000011011011000";
                                when 186 => stat_leaf <= "0000000001011011000";
                                when 187 => stat_leaf <= "0000000101110101001";
                                when 188 => stat_leaf <= "0000000000011011000";
                                when 189 => stat_leaf <= "0000000100011011000";
                                when 190 => stat_leaf <= "0000000010011011000";
                                when 191 => stat_leaf <= "0000000111110101001";
                                when 192 => stat_leaf <= "0000001000000010111";
                                when 193 => stat_leaf <= "0000000010100111000";
                                when 194 => stat_leaf <= "0000000000100111000";
                                when 195 => stat_leaf <= "0000001000110111000";
                                when 196 => stat_leaf <= "0000001000100010111";
                                when 197 => stat_leaf <= "0000000011100111000";
                                when 198 => stat_leaf <= "0000000001100111000";
                                when 199 => stat_leaf <= "0000000110001101001";
                                when 200 => stat_leaf <= "0000001000010010111";
                                when 201 => stat_leaf <= "0000000011000111000";
                                when 202 => stat_leaf <= "0000000001000111000";
                                when 203 => stat_leaf <= "0000000101001101001";
                                when 204 => stat_leaf <= "0000000000000111000";
                                when 205 => stat_leaf <= "0000000100000111000";
                                when 206 => stat_leaf <= "0000000010000111000";
                                when 207 => stat_leaf <= "0000000111001101001";
                                when 208 => stat_leaf <= "0000001000001010111";
                                when 209 => stat_leaf <= "0000000010110111000";
                                when 210 => stat_leaf <= "0000000000110111000";
                                when 211 => stat_leaf <= "0000000100101101001";
                                when 212 => stat_leaf <= "0000001000101010111";
                                when 213 => stat_leaf <= "0000000011110111000";
                                when 214 => stat_leaf <= "0000000001110111000";
                                when 215 => stat_leaf <= "0000000110101101001";
                                when 216 => stat_leaf <= "0000001000011010111";
                                when 217 => stat_leaf <= "0000000011010111000";
                                when 218 => stat_leaf <= "0000000001010111000";
                                when 219 => stat_leaf <= "0000000101101101001";
                                when 220 => stat_leaf <= "0000000000010111000";
                                when 221 => stat_leaf <= "0000000100010111000";
                                when 222 => stat_leaf <= "0000000010010111000";
                                when 223 => stat_leaf <= "0000000111101101001";
                                when 224 => stat_leaf <= "0000001000000110111";
                                when 225 => stat_leaf <= "0000000010101111000";
                                when 226 => stat_leaf <= "0000000000101111000";
                                when 227 => stat_leaf <= "0000001000111111000";
                                when 228 => stat_leaf <= "0000001000100110111";
                                when 229 => stat_leaf <= "0000000011101111000";
                                when 230 => stat_leaf <= "0000000001101111000";
                                when 231 => stat_leaf <= "0000000110011101001";
                                when 232 => stat_leaf <= "0000001000010110111";
                                when 233 => stat_leaf <= "0000000011001111000";
                                when 234 => stat_leaf <= "0000000001001111000";
                                when 235 => stat_leaf <= "0000000101011101001";
                                when 236 => stat_leaf <= "0000000000001111000";
                                when 237 => stat_leaf <= "0000000100001111000";
                                when 238 => stat_leaf <= "0000000010001111000";
                                when 239 => stat_leaf <= "0000000111011101001";
                                when 240 => stat_leaf <= "0000001000001110111";
                                when 241 => stat_leaf <= "0000000010111111000";
                                when 242 => stat_leaf <= "0000000000111111000";
                                when 243 => stat_leaf <= "0000000100111101001";
                                when 244 => stat_leaf <= "0000001000101110111";
                                when 245 => stat_leaf <= "0000000011111111000";
                                when 246 => stat_leaf <= "0000000001111111000";
                                when 247 => stat_leaf <= "0000000110111101001";
                                when 248 => stat_leaf <= "0000001000011110111";
                                when 249 => stat_leaf <= "0000000011011111000";
                                when 250 => stat_leaf <= "0000000001011111000";
                                when 251 => stat_leaf <= "0000000101111101001";
                                when 252 => stat_leaf <= "0000000000011111000";
                                when 253 => stat_leaf <= "0000000100011111000";
                                when 254 => stat_leaf <= "0000000010011111000";
                                when 255 => stat_leaf <= "0000000111111101001";
                                when 256 => stat_leaf <= "0000001000000000111";
                                when 257 => stat_leaf <= "0000000010100001000";
                                when 258 => stat_leaf <= "0000000000100001000";
                                when 259 => stat_leaf <= "0000001000110001000";
                                when 260 => stat_leaf <= "0000001000100000111";
                                when 261 => stat_leaf <= "0000000011100001000";
                                when 262 => stat_leaf <= "0000000001100001000";
                                when 263 => stat_leaf <= "0000000110000011001";
                                when 264 => stat_leaf <= "0000001000010000111";
                                when 265 => stat_leaf <= "0000000011000001000";
                                when 266 => stat_leaf <= "0000000001000001000";
                                when 267 => stat_leaf <= "0000000101000011001";
                                when 268 => stat_leaf <= "0000000000000001000";
                                when 269 => stat_leaf <= "0000000100000001000";
                                when 270 => stat_leaf <= "0000000010000001000";
                                when 271 => stat_leaf <= "0000000111000011001";
                                when 272 => stat_leaf <= "0000001000001000111";
                                when 273 => stat_leaf <= "0000000010110001000";
                                when 274 => stat_leaf <= "0000000000110001000";
                                when 275 => stat_leaf <= "0000000100100011001";
                                when 276 => stat_leaf <= "0000001000101000111";
                                when 277 => stat_leaf <= "0000000011110001000";
                                when 278 => stat_leaf <= "0000000001110001000";
                                when 279 => stat_leaf <= "0000000110100011001";
                                when 280 => stat_leaf <= "0000001000011000111";
                                when 281 => stat_leaf <= "0000000011010001000";
                                when 282 => stat_leaf <= "0000000001010001000";
                                when 283 => stat_leaf <= "0000000101100011001";
                                when 284 => stat_leaf <= "0000000000010001000";
                                when 285 => stat_leaf <= "0000000100010001000";
                                when 286 => stat_leaf <= "0000000010010001000";
                                when 287 => stat_leaf <= "0000000111100011001";
                                when 288 => stat_leaf <= "0000001000000100111";
                                when 289 => stat_leaf <= "0000000010101001000";
                                when 290 => stat_leaf <= "0000000000101001000";
                                when 291 => stat_leaf <= "0000001000111001000";
                                when 292 => stat_leaf <= "0000001000100100111";
                                when 293 => stat_leaf <= "0000000011101001000";
                                when 294 => stat_leaf <= "0000000001101001000";
                                when 295 => stat_leaf <= "0000000110010011001";
                                when 296 => stat_leaf <= "0000001000010100111";
                                when 297 => stat_leaf <= "0000000011001001000";
                                when 298 => stat_leaf <= "0000000001001001000";
                                when 299 => stat_leaf <= "0000000101010011001";
                                when 300 => stat_leaf <= "0000000000001001000";
                                when 301 => stat_leaf <= "0000000100001001000";
                                when 302 => stat_leaf <= "0000000010001001000";
                                when 303 => stat_leaf <= "0000000111010011001";
                                when 304 => stat_leaf <= "0000001000001100111";
                                when 305 => stat_leaf <= "0000000010111001000";
                                when 306 => stat_leaf <= "0000000000111001000";
                                when 307 => stat_leaf <= "0000000100110011001";
                                when 308 => stat_leaf <= "0000001000101100111";
                                when 309 => stat_leaf <= "0000000011111001000";
                                when 310 => stat_leaf <= "0000000001111001000";
                                when 311 => stat_leaf <= "0000000110110011001";
                                when 312 => stat_leaf <= "0000001000011100111";
                                when 313 => stat_leaf <= "0000000011011001000";
                                when 314 => stat_leaf <= "0000000001011001000";
                                when 315 => stat_leaf <= "0000000101110011001";
                                when 316 => stat_leaf <= "0000000000011001000";
                                when 317 => stat_leaf <= "0000000100011001000";
                                when 318 => stat_leaf <= "0000000010011001000";
                                when 319 => stat_leaf <= "0000000111110011001";
                                when 320 => stat_leaf <= "0000001000000010111";
                                when 321 => stat_leaf <= "0000000010100101000";
                                when 322 => stat_leaf <= "0000000000100101000";
                                when 323 => stat_leaf <= "0000001000110101000";
                                when 324 => stat_leaf <= "0000001000100010111";
                                when 325 => stat_leaf <= "0000000011100101000";
                                when 326 => stat_leaf <= "0000000001100101000";
                                when 327 => stat_leaf <= "0000000110001011001";
                                when 328 => stat_leaf <= "0000001000010010111";
                                when 329 => stat_leaf <= "0000000011000101000";
                                when 330 => stat_leaf <= "0000000001000101000";
                                when 331 => stat_leaf <= "0000000101001011001";
                                when 332 => stat_leaf <= "0000000000000101000";
                                when 333 => stat_leaf <= "0000000100000101000";
                                when 334 => stat_leaf <= "0000000010000101000";
                                when 335 => stat_leaf <= "0000000111001011001";
                                when 336 => stat_leaf <= "0000001000001010111";
                                when 337 => stat_leaf <= "0000000010110101000";
                                when 338 => stat_leaf <= "0000000000110101000";
                                when 339 => stat_leaf <= "0000000100101011001";
                                when 340 => stat_leaf <= "0000001000101010111";
                                when 341 => stat_leaf <= "0000000011110101000";
                                when 342 => stat_leaf <= "0000000001110101000";
                                when 343 => stat_leaf <= "0000000110101011001";
                                when 344 => stat_leaf <= "0000001000011010111";
                                when 345 => stat_leaf <= "0000000011010101000";
                                when 346 => stat_leaf <= "0000000001010101000";
                                when 347 => stat_leaf <= "0000000101101011001";
                                when 348 => stat_leaf <= "0000000000010101000";
                                when 349 => stat_leaf <= "0000000100010101000";
                                when 350 => stat_leaf <= "0000000010010101000";
                                when 351 => stat_leaf <= "0000000111101011001";
                                when 352 => stat_leaf <= "0000001000000110111";
                                when 353 => stat_leaf <= "0000000010101101000";
                                when 354 => stat_leaf <= "0000000000101101000";
                                when 355 => stat_leaf <= "0000001000111101000";
                                when 356 => stat_leaf <= "0000001000100110111";
                                when 357 => stat_leaf <= "0000000011101101000";
                                when 358 => stat_leaf <= "0000000001101101000";
                                when 359 => stat_leaf <= "0000000110011011001";
                                when 360 => stat_leaf <= "0000001000010110111";
                                when 361 => stat_leaf <= "0000000011001101000";
                                when 362 => stat_leaf <= "0000000001001101000";
                                when 363 => stat_leaf <= "0000000101011011001";
                                when 364 => stat_leaf <= "0000000000001101000";
                                when 365 => stat_leaf <= "0000000100001101000";
                                when 366 => stat_leaf <= "0000000010001101000";
                                when 367 => stat_leaf <= "0000000111011011001";
                                when 368 => stat_leaf <= "0000001000001110111";
                                when 369 => stat_leaf <= "0000000010111101000";
                                when 370 => stat_leaf <= "0000000000111101000";
                                when 371 => stat_leaf <= "0000000100111011001";
                                when 372 => stat_leaf <= "0000001000101110111";
                                when 373 => stat_leaf <= "0000000011111101000";
                                when 374 => stat_leaf <= "0000000001111101000";
                                when 375 => stat_leaf <= "0000000110111011001";
                                when 376 => stat_leaf <= "0000001000011110111";
                                when 377 => stat_leaf <= "0000000011011101000";
                                when 378 => stat_leaf <= "0000000001011101000";
                                when 379 => stat_leaf <= "0000000101111011001";
                                when 380 => stat_leaf <= "0000000000011101000";
                                when 381 => stat_leaf <= "0000000100011101000";
                                when 382 => stat_leaf <= "0000000010011101000";
                                when 383 => stat_leaf <= "0000000111111011001";
                                when 384 => stat_leaf <= "0000001000000000111";
                                when 385 => stat_leaf <= "0000000010100011000";
                                when 386 => stat_leaf <= "0000000000100011000";
                                when 387 => stat_leaf <= "0000001000110011000";
                                when 388 => stat_leaf <= "0000001000100000111";
                                when 389 => stat_leaf <= "0000000011100011000";
                                when 390 => stat_leaf <= "0000000001100011000";
                                when 391 => stat_leaf <= "0000000110000111001";
                                when 392 => stat_leaf <= "0000001000010000111";
                                when 393 => stat_leaf <= "0000000011000011000";
                                when 394 => stat_leaf <= "0000000001000011000";
                                when 395 => stat_leaf <= "0000000101000111001";
                                when 396 => stat_leaf <= "0000000000000011000";
                                when 397 => stat_leaf <= "0000000100000011000";
                                when 398 => stat_leaf <= "0000000010000011000";
                                when 399 => stat_leaf <= "0000000111000111001";
                                when 400 => stat_leaf <= "0000001000001000111";
                                when 401 => stat_leaf <= "0000000010110011000";
                                when 402 => stat_leaf <= "0000000000110011000";
                                when 403 => stat_leaf <= "0000000100100111001";
                                when 404 => stat_leaf <= "0000001000101000111";
                                when 405 => stat_leaf <= "0000000011110011000";
                                when 406 => stat_leaf <= "0000000001110011000";
                                when 407 => stat_leaf <= "0000000110100111001";
                                when 408 => stat_leaf <= "0000001000011000111";
                                when 409 => stat_leaf <= "0000000011010011000";
                                when 410 => stat_leaf <= "0000000001010011000";
                                when 411 => stat_leaf <= "0000000101100111001";
                                when 412 => stat_leaf <= "0000000000010011000";
                                when 413 => stat_leaf <= "0000000100010011000";
                                when 414 => stat_leaf <= "0000000010010011000";
                                when 415 => stat_leaf <= "0000000111100111001";
                                when 416 => stat_leaf <= "0000001000000100111";
                                when 417 => stat_leaf <= "0000000010101011000";
                                when 418 => stat_leaf <= "0000000000101011000";
                                when 419 => stat_leaf <= "0000001000111011000";
                                when 420 => stat_leaf <= "0000001000100100111";
                                when 421 => stat_leaf <= "0000000011101011000";
                                when 422 => stat_leaf <= "0000000001101011000";
                                when 423 => stat_leaf <= "0000000110010111001";
                                when 424 => stat_leaf <= "0000001000010100111";
                                when 425 => stat_leaf <= "0000000011001011000";
                                when 426 => stat_leaf <= "0000000001001011000";
                                when 427 => stat_leaf <= "0000000101010111001";
                                when 428 => stat_leaf <= "0000000000001011000";
                                when 429 => stat_leaf <= "0000000100001011000";
                                when 430 => stat_leaf <= "0000000010001011000";
                                when 431 => stat_leaf <= "0000000111010111001";
                                when 432 => stat_leaf <= "0000001000001100111";
                                when 433 => stat_leaf <= "0000000010111011000";
                                when 434 => stat_leaf <= "0000000000111011000";
                                when 435 => stat_leaf <= "0000000100110111001";
                                when 436 => stat_leaf <= "0000001000101100111";
                                when 437 => stat_leaf <= "0000000011111011000";
                                when 438 => stat_leaf <= "0000000001111011000";
                                when 439 => stat_leaf <= "0000000110110111001";
                                when 440 => stat_leaf <= "0000001000011100111";
                                when 441 => stat_leaf <= "0000000011011011000";
                                when 442 => stat_leaf <= "0000000001011011000";
                                when 443 => stat_leaf <= "0000000101110111001";
                                when 444 => stat_leaf <= "0000000000011011000";
                                when 445 => stat_leaf <= "0000000100011011000";
                                when 446 => stat_leaf <= "0000000010011011000";
                                when 447 => stat_leaf <= "0000000111110111001";
                                when 448 => stat_leaf <= "0000001000000010111";
                                when 449 => stat_leaf <= "0000000010100111000";
                                when 450 => stat_leaf <= "0000000000100111000";
                                when 451 => stat_leaf <= "0000001000110111000";
                                when 452 => stat_leaf <= "0000001000100010111";
                                when 453 => stat_leaf <= "0000000011100111000";
                                when 454 => stat_leaf <= "0000000001100111000";
                                when 455 => stat_leaf <= "0000000110001111001";
                                when 456 => stat_leaf <= "0000001000010010111";
                                when 457 => stat_leaf <= "0000000011000111000";
                                when 458 => stat_leaf <= "0000000001000111000";
                                when 459 => stat_leaf <= "0000000101001111001";
                                when 460 => stat_leaf <= "0000000000000111000";
                                when 461 => stat_leaf <= "0000000100000111000";
                                when 462 => stat_leaf <= "0000000010000111000";
                                when 463 => stat_leaf <= "0000000111001111001";
                                when 464 => stat_leaf <= "0000001000001010111";
                                when 465 => stat_leaf <= "0000000010110111000";
                                when 466 => stat_leaf <= "0000000000110111000";
                                when 467 => stat_leaf <= "0000000100101111001";
                                when 468 => stat_leaf <= "0000001000101010111";
                                when 469 => stat_leaf <= "0000000011110111000";
                                when 470 => stat_leaf <= "0000000001110111000";
                                when 471 => stat_leaf <= "0000000110101111001";
                                when 472 => stat_leaf <= "0000001000011010111";
                                when 473 => stat_leaf <= "0000000011010111000";
                                when 474 => stat_leaf <= "0000000001010111000";
                                when 475 => stat_leaf <= "0000000101101111001";
                                when 476 => stat_leaf <= "0000000000010111000";
                                when 477 => stat_leaf <= "0000000100010111000";
                                when 478 => stat_leaf <= "0000000010010111000";
                                when 479 => stat_leaf <= "0000000111101111001";
                                when 480 => stat_leaf <= "0000001000000110111";
                                when 481 => stat_leaf <= "0000000010101111000";
                                when 482 => stat_leaf <= "0000000000101111000";
                                when 483 => stat_leaf <= "0000000000000000000";
                                when 484 => stat_leaf <= "0000001000100110111";
                                when 485 => stat_leaf <= "0000000011101111000";
                                when 486 => stat_leaf <= "0000000001101111000";
                                when 487 => stat_leaf <= "0000000110011111001";
                                when 488 => stat_leaf <= "0000001000010110111";
                                when 489 => stat_leaf <= "0000000011001111000";
                                when 490 => stat_leaf <= "0000000001001111000";
                                when 491 => stat_leaf <= "0000000101011111001";
                                when 492 => stat_leaf <= "0000000000001111000";
                                when 493 => stat_leaf <= "0000000100001111000";
                                when 494 => stat_leaf <= "0000000010001111000";
                                when 495 => stat_leaf <= "0000000111011111001";
                                when 496 => stat_leaf <= "0000001000001110111";
                                when 497 => stat_leaf <= "0000000010111111000";
                                when 498 => stat_leaf <= "0000000000111111000";
                                when 499 => stat_leaf <= "0000000100111111001";
                                when 500 => stat_leaf <= "0000001000101110111";
                                when 501 => stat_leaf <= "0000000011111111000";
                                when 502 => stat_leaf <= "0000000001111111000";
                                when 503 => stat_leaf <= "0000000110111111001";
                                when 504 => stat_leaf <= "0000001000011110111";
                                when 505 => stat_leaf <= "0000000011011111000";
                                when 506 => stat_leaf <= "0000000001011111000";
                                when 507 => stat_leaf <= "0000000101111111001";
                                when 508 => stat_leaf <= "0000000000011111000";
                                when 509 => stat_leaf <= "0000000100011111000";
                                when 510 => stat_leaf <= "0000000010011111000";
                                when others => stat_leaf <= "0000000111111111001";
                            end case;
                        end if;
                        cur_next <= (resize(instantMaxBit, 5) + 1);
                    elsif (True and (MYHDL252_get_bits(rleaf) >= signed(resize(cur_next, 6)))) then
                        write(L, string'("CACHE MISS"));
                        write(L, string'(" "));
                        write(L, to_hstring(cur_next));
                        writeline(output, L);
                        cto := MYHDL253_get4(0, maxBits);
                        mask := (shift_left(1, to_integer(cur_next)) - 1);
                        lraddr <= to_unsigned((cto and mask), 15);
                        filled <= '0';
                        cur_next <= (cur_next + 1);
                    else
                        the_leaf := rleaf;
                        if (not True) then
                            the_leaf := stat_leaf;
                        end if;
                        if (MYHDL254_get_bits(the_leaf) < 1) then
                            write(L, string'("< 1 bits: "));
                            writeline(output, L);
                            assert False report "End of Simulation" severity Failure;
                        end if;
                        MYHDL256_adv(MYHDL255_get_bits(the_leaf));
                        code <= to_unsigned(MYHDL257_get_code(the_leaf), 15);
                        if (True and (method = 2)) then
                            state <= READBL;
                        else
                            state <= INFLATE;
                        end if;
                    end if;
                when D_NEXT =>
                    if ((not True) or (not True)) then
                        null;
                    elsif (not bool(filled)) then
                        filled <= '1';
                    elsif (cur_next = 0) then
                        if (d_instantMaxBit > 10) then
                            assert False report "End of Simulation" severity Failure;
                        end if;
                        token := to_integer(code - 257);
                        case token is
                            when 0 => extraLength := 0;
                            when 1 => extraLength := 0;
                            when 2 => extraLength := 0;
                            when 3 => extraLength := 0;
                            when 4 => extraLength := 0;
                            when 5 => extraLength := 0;
                            when 6 => extraLength := 0;
                            when 7 => extraLength := 0;
                            when 8 => extraLength := 1;
                            when 9 => extraLength := 1;
                            when 10 => extraLength := 1;
                            when 11 => extraLength := 1;
                            when 12 => extraLength := 2;
                            when 13 => extraLength := 2;
                            when 14 => extraLength := 2;
                            when 15 => extraLength := 2;
                            when 16 => extraLength := 3;
                            when 17 => extraLength := 3;
                            when 18 => extraLength := 3;
                            when 19 => extraLength := 3;
                            when 20 => extraLength := 4;
                            when 21 => extraLength := 4;
                            when 22 => extraLength := 4;
                            when 23 => extraLength := 4;
                            when 24 => extraLength := 5;
                            when 25 => extraLength := 5;
                            when 26 => extraLength := 5;
                            when 27 => extraLength := 5;
                            when others => extraLength := 0;
                        end case;
                        cto := MYHDL258_get4(extraLength, d_maxBits);
                        mask := (shift_left(1, to_integer(d_instantMaxBit)) - 1);
                        dlraddr <= to_unsigned((cto and mask), 15);
                        filled <= '0';
                        cur_next <= (resize(instantMaxBit, 5) + 1);
                    elsif (MYHDL259_get_bits(drleaf) >= signed(resize(cur_next, 6))) then
                        write(L, string'("DCACHE MISS"));
                        write(L, string'(" "));
                        write(L, to_hstring(cur_next));
                        writeline(output, L);
                        token := to_integer(code - 257);
                        case token is
                            when 0 => extraLength := 0;
                            when 1 => extraLength := 0;
                            when 2 => extraLength := 0;
                            when 3 => extraLength := 0;
                            when 4 => extraLength := 0;
                            when 5 => extraLength := 0;
                            when 6 => extraLength := 0;
                            when 7 => extraLength := 0;
                            when 8 => extraLength := 1;
                            when 9 => extraLength := 1;
                            when 10 => extraLength := 1;
                            when 11 => extraLength := 1;
                            when 12 => extraLength := 2;
                            when 13 => extraLength := 2;
                            when 14 => extraLength := 2;
                            when 15 => extraLength := 2;
                            when 16 => extraLength := 3;
                            when 17 => extraLength := 3;
                            when 18 => extraLength := 3;
                            when 19 => extraLength := 3;
                            when 20 => extraLength := 4;
                            when 21 => extraLength := 4;
                            when 22 => extraLength := 4;
                            when 23 => extraLength := 4;
                            when 24 => extraLength := 5;
                            when 25 => extraLength := 5;
                            when 26 => extraLength := 5;
                            when 27 => extraLength := 5;
                            when others => extraLength := 0;
                        end case;
                        cto := MYHDL260_get4(extraLength, d_maxBits);
                        mask := (shift_left(1, to_integer(cur_next)) - 1);
                        dlraddr <= to_unsigned((cto and mask), 15);
                        filled <= '0';
                        cur_next <= (cur_next + 1);
                    else
                        state <= D_NEXT_2;
                    end if;
                when D_NEXT_2 =>
                    if (True and True) then
                        if (MYHDL261_get_bits(drleaf) = 0) then
                            assert False report "End of Simulation" severity Failure;
                        end if;
                        token := to_integer(code - 257);
                        case token is
                            when 0 => tlength := 3;
                            when 1 => tlength := 4;
                            when 2 => tlength := 5;
                            when 3 => tlength := 6;
                            when 4 => tlength := 7;
                            when 5 => tlength := 8;
                            when 6 => tlength := 9;
                            when 7 => tlength := 10;
                            when 8 => tlength := 11;
                            when 9 => tlength := 13;
                            when 10 => tlength := 15;
                            when 11 => tlength := 17;
                            when 12 => tlength := 19;
                            when 13 => tlength := 23;
                            when 14 => tlength := 27;
                            when 15 => tlength := 31;
                            when 16 => tlength := 35;
                            when 17 => tlength := 43;
                            when 18 => tlength := 51;
                            when 19 => tlength := 59;
                            when 20 => tlength := 67;
                            when 21 => tlength := 83;
                            when 22 => tlength := 99;
                            when 23 => tlength := 115;
                            when 24 => tlength := 131;
                            when 25 => tlength := 163;
                            when 26 => tlength := 195;
                            when 27 => tlength := 227;
                            when others => tlength := 258;
                        end case;
                        case token is
                            when 0 => extraLength := 0;
                            when 1 => extraLength := 0;
                            when 2 => extraLength := 0;
                            when 3 => extraLength := 0;
                            when 4 => extraLength := 0;
                            when 5 => extraLength := 0;
                            when 6 => extraLength := 0;
                            when 7 => extraLength := 0;
                            when 8 => extraLength := 1;
                            when 9 => extraLength := 1;
                            when 10 => extraLength := 1;
                            when 11 => extraLength := 1;
                            when 12 => extraLength := 2;
                            when 13 => extraLength := 2;
                            when 14 => extraLength := 2;
                            when 15 => extraLength := 2;
                            when 16 => extraLength := 3;
                            when 17 => extraLength := 3;
                            when 18 => extraLength := 3;
                            when 19 => extraLength := 3;
                            when 20 => extraLength := 4;
                            when 21 => extraLength := 4;
                            when 22 => extraLength := 4;
                            when 23 => extraLength := 4;
                            when 24 => extraLength := 5;
                            when 25 => extraLength := 5;
                            when 26 => extraLength := 5;
                            when 27 => extraLength := 5;
                            when others => extraLength := 0;
                        end case;
                        tlength := (tlength + MYHDL262_get4(0, extraLength));
                        distanceCode := MYHDL263_get_code(drleaf);
                        case distanceCode is
                            when 0 => distance := 1;
                            when 1 => distance := 2;
                            when 2 => distance := 3;
                            when 3 => distance := 4;
                            when 4 => distance := 5;
                            when 5 => distance := 7;
                            when 6 => distance := 9;
                            when 7 => distance := 13;
                            when 8 => distance := 17;
                            when 9 => distance := 25;
                            when 10 => distance := 33;
                            when 11 => distance := 49;
                            when 12 => distance := 65;
                            when 13 => distance := 97;
                            when 14 => distance := 129;
                            when 15 => distance := 193;
                            when 16 => distance := 257;
                            when 17 => distance := 385;
                            when 18 => distance := 513;
                            when 19 => distance := 769;
                            when 20 => distance := 1025;
                            when 21 => distance := 1537;
                            when 22 => distance := 2049;
                            when 23 => distance := 3073;
                            when 24 => distance := 4097;
                            when 25 => distance := 6145;
                            when 26 => distance := 8193;
                            when 27 => distance := 12289;
                            when 28 => distance := 16385;
                            when others => distance := 24577;
                        end case;
                        case shift_right(distanceCode, 1) is
                            when 0 => moreBits := 0;
                            when 1 => moreBits := 0;
                            when 2 => moreBits := 1;
                            when 3 => moreBits := 2;
                            when 4 => moreBits := 3;
                            when 5 => moreBits := 4;
                            when 6 => moreBits := 5;
                            when 7 => moreBits := 6;
                            when 8 => moreBits := 7;
                            when 9 => moreBits := 8;
                            when 10 => moreBits := 9;
                            when 11 => moreBits := 10;
                            when 12 => moreBits := 11;
                            when 13 => moreBits := 12;
                            when others => moreBits := 13;
                        end case;
                        mored := MYHDL265_get4((extraLength + MYHDL264_get_bits(drleaf)), moreBits);
                        distance := (distance + mored);
                        if (distance > signed(resize(do, 25))) then
                            write(L, to_string(distance));
                            write(L, string'(" "));
                            write(L, to_hstring(do));
                            writeline(output, L);
                            assert False report "End of Simulation" severity Failure;
                        end if;
                        MYHDL267_adv(((moreBits + extraLength) + MYHDL266_get_bits(drleaf)));
                        offset <= resize(unsigned(((signed(resize(do, 25)) - distance) and to_signed(511, 25))), 9);
                        length <= to_unsigned(tlength, 9);
                        cur_i <= to_unsigned(0, 24);
                        oraddr <= resize(unsigned(signed(resize(do, 25)) - distance), 9);
                        state <= COPY;
                    end if;
                when INFLATE =>
                    if (not True) then
                        null;
                    elsif (False and (fcount < 3)) then
                        null;
                    elsif ((method = 1) and (not bool(filled))) then
                        filled <= '1';
                    elsif ((signed(resize(di, 25)) >= (signed(resize(isize, 25)) - 4)) and (not (i_mode = 0))) then
                        null;
                    elsif (do >= (i_raddr + 512)) then
                        write(L, string'("HOLDB"));
                        writeline(output, L);
                        null;
                    elsif (signed(resize(di, 25)) > (signed(resize(isize, 25)) - 3)) then
                        state <= IDLE;
                        o_done <= '1';
                        write(L, string'("NO EOF "));
                        write(L, string'(" "));
                        write(L, to_hstring(di));
                        writeline(output, L);
                        assert False report "End of Simulation" severity Failure;
                    elsif (code = 256) then
                        write(L, string'("EOF:"));
                        write(L, string'(" "));
                        write(L, to_hstring(isize));
                        write(L, string'(" "));
                        write(L, to_hstring(di));
                        write(L, string'(" "));
                        write(L, to_hstring(do));
                        writeline(output, L);
                        if ((not False) and (not bool(final))) then
                            state <= HEADER;
                            filled <= '0';
                            write(L, string'("New Block!"));
                            writeline(output, L);
                        else
                            o_done <= '1';
                            state <= IDLE;
                        end if;
                    else
                        if (code < 256) then
                            oaddr <= resize(do, 9);
                            obyte <= resize(code, 8);
                            o_oprogress <= (do + 1);
                            do <= (do + 1);
                            cur_next <= to_unsigned(0, 5);
                            state <= NEXT;
                        elsif (code = 300) then
                            assert False report "End of Simulation" severity Failure;
                        else
                            if ((not True) or bool(static)) then
                                token := to_integer(code - 257);
                                case token is
                                    when 0 => tlength := 3;
                                    when 1 => tlength := 4;
                                    when 2 => tlength := 5;
                                    when 3 => tlength := 6;
                                    when 4 => tlength := 7;
                                    when 5 => tlength := 8;
                                    when 6 => tlength := 9;
                                    when 7 => tlength := 10;
                                    when 8 => tlength := 11;
                                    when 9 => tlength := 13;
                                    when 10 => tlength := 15;
                                    when 11 => tlength := 17;
                                    when 12 => tlength := 19;
                                    when 13 => tlength := 23;
                                    when 14 => tlength := 27;
                                    when 15 => tlength := 31;
                                    when 16 => tlength := 35;
                                    when 17 => tlength := 43;
                                    when 18 => tlength := 51;
                                    when 19 => tlength := 59;
                                    when 20 => tlength := 67;
                                    when 21 => tlength := 83;
                                    when 22 => tlength := 99;
                                    when 23 => tlength := 115;
                                    when 24 => tlength := 131;
                                    when 25 => tlength := 163;
                                    when 26 => tlength := 195;
                                    when 27 => tlength := 227;
                                    when others => tlength := 258;
                                end case;
                                case token is
                                    when 0 => extraLength := 0;
                                    when 1 => extraLength := 0;
                                    when 2 => extraLength := 0;
                                    when 3 => extraLength := 0;
                                    when 4 => extraLength := 0;
                                    when 5 => extraLength := 0;
                                    when 6 => extraLength := 0;
                                    when 7 => extraLength := 0;
                                    when 8 => extraLength := 1;
                                    when 9 => extraLength := 1;
                                    when 10 => extraLength := 1;
                                    when 11 => extraLength := 1;
                                    when 12 => extraLength := 2;
                                    when 13 => extraLength := 2;
                                    when 14 => extraLength := 2;
                                    when 15 => extraLength := 2;
                                    when 16 => extraLength := 3;
                                    when 17 => extraLength := 3;
                                    when 18 => extraLength := 3;
                                    when 19 => extraLength := 3;
                                    when 20 => extraLength := 4;
                                    when 21 => extraLength := 4;
                                    when 22 => extraLength := 4;
                                    when 23 => extraLength := 4;
                                    when 24 => extraLength := 5;
                                    when 25 => extraLength := 5;
                                    when 26 => extraLength := 5;
                                    when 27 => extraLength := 5;
                                    when others => extraLength := 0;
                                end case;
                                tlength := (tlength + MYHDL268_get4(0, extraLength));
                                t := MYHDL269_get4(extraLength, 5);
                                distanceCode := MYHDL270_rev_bits(t, 5);
                                case distanceCode is
                                    when 0 => distance := 1;
                                    when 1 => distance := 2;
                                    when 2 => distance := 3;
                                    when 3 => distance := 4;
                                    when 4 => distance := 5;
                                    when 5 => distance := 7;
                                    when 6 => distance := 9;
                                    when 7 => distance := 13;
                                    when 8 => distance := 17;
                                    when 9 => distance := 25;
                                    when 10 => distance := 33;
                                    when 11 => distance := 49;
                                    when 12 => distance := 65;
                                    when 13 => distance := 97;
                                    when 14 => distance := 129;
                                    when 15 => distance := 193;
                                    when 16 => distance := 257;
                                    when 17 => distance := 385;
                                    when 18 => distance := 513;
                                    when 19 => distance := 769;
                                    when 20 => distance := 1025;
                                    when 21 => distance := 1537;
                                    when 22 => distance := 2049;
                                    when 23 => distance := 3073;
                                    when 24 => distance := 4097;
                                    when 25 => distance := 6145;
                                    when 26 => distance := 8193;
                                    when 27 => distance := 12289;
                                    when 28 => distance := 16385;
                                    when others => distance := 24577;
                                end case;
                                case shift_right(distanceCode, 1) is
                                    when 0 => moreBits := 0;
                                    when 1 => moreBits := 0;
                                    when 2 => moreBits := 1;
                                    when 3 => moreBits := 2;
                                    when 4 => moreBits := 3;
                                    when 5 => moreBits := 4;
                                    when 6 => moreBits := 5;
                                    when 7 => moreBits := 6;
                                    when 8 => moreBits := 7;
                                    when 9 => moreBits := 8;
                                    when 10 => moreBits := 9;
                                    when 11 => moreBits := 10;
                                    when 12 => moreBits := 11;
                                    when 13 => moreBits := 12;
                                    when others => moreBits := 13;
                                end case;
                                distance := (distance + MYHDL271_get4((extraLength + 5), moreBits));
                                MYHDL272_adv(((extraLength + 5) + moreBits));
                                offset <= resize(unsigned(((signed(resize(do, 25)) - distance) and to_signed(511, 25))), 9);
                                length <= to_unsigned(tlength, 9);
                                cur_i <= to_unsigned(0, 24);
                                oraddr <= resize(unsigned(signed(resize(do, 25)) - distance), 9);
                                state <= COPY;
                            else
                                if (not True) then
                                    write(L, string'("DYNAMIC mode disabled"));
                                    writeline(output, L);
                                    assert False report "End of Simulation" severity Failure;
                                end if;
                                state <= D_NEXT;
                            end if;
                        end if;
                        cur_next <= to_unsigned(0, 5);
                    end if;
                when COPY =>
                    if (not True) then
                        null;
                    elsif ((cur_i = 0) and ((do + length) >= (i_raddr + 512))) then
                        null;
                    elsif (signed(resize(di, 25)) >= (signed(resize(isize, 25)) - 2)) then
                        null;
                    elsif (True and (method = 0)) then
                        if (not bool(filled)) then
                            filled <= '1';
                        elsif (cur_i < length) then
                            oaddr <= resize(do, 9);
                            obyte <= b3;
                            di <= (di + 1);
                            filled <= '0';
                            o_iprogress <= di;
                            cur_i <= (cur_i + 1);
                            do <= (do + 1);
                            o_oprogress <= (do + 1);
                        elsif ((not False) and (not bool(final))) then
                            di <= (di + 2);
                            o_iprogress <= di;
                            state <= HEADER;
                            filled <= '0';
                            write(L, string'("new block"));
                            writeline(output, L);
                        else
                            o_done <= '1';
                            state <= IDLE;
                        end if;
                    elsif (cur_i < (length + 2)) then
                        oraddr <= resize(offset + cur_i, 9);
                        if (cur_i = 1) then
                            off1 <= stdl(signed(resize(offset, 10)) = ((signed(resize(do, 25)) - 1) and to_signed(511, 25)));
                            off2 <= stdl(signed(resize(offset, 10)) = ((signed(resize(do, 25)) - 2) and to_signed(511, 25)));
                            copy1 <= orbyte;
                        end if;
                        if (cur_i = 3) then
                            copy2 <= orbyte;
                        end if;
                        if (cur_i > 1) then
                            if bool(off1) then
                                obyte <= copy1;
                            elsif ((cur_i = 3) or (not bool(off2))) then
                                obyte <= orbyte;
                            elsif (cur_i > 2) then
                                if bool((cur_i and to_unsigned(1, 24))) then
                                    obyte <= copy2;
                                else
                                    obyte <= copy1;
                                end if;
                            else
                                obyte <= copy1;
                            end if;
                            oaddr <= resize(do, 9);
                            o_oprogress <= (do + 1);
                            do <= (do + 1);
                        end if;
                        cur_i <= (cur_i + 1);
                    else
                        cur_next <= to_unsigned(0, 5);
                        state <= NEXT;
                    end if;
                when others =>
                    write(L, string'("unknown state?!"));
                    writeline(output, L);
                    state <= IDLE;
            end case;
        end if;
    end if;
end process DEFLATE_LOGIC;

end architecture MyHDL;
